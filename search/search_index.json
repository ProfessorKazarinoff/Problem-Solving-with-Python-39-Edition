{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Problem Solving with Python 3.9 Edition by Peter D. Kazarinoff, PhD Table of Contents Preface Orientation Jupyter Notebooks The Python REPL Data Types and Variables NumPy and Arrays Plotting with Matplotlib Functions and Modules If Else Try Except Loops Symbolic Math Python and External Hardware MicroPython Appendix","title":"Home"},{"location":"#problem-solving-with-python-39-edition","text":"by Peter D. Kazarinoff, PhD","title":"Problem Solving with Python 3.9 Edition"},{"location":"#table-of-contents","text":"","title":"Table of Contents"},{"location":"#preface","text":"","title":"Preface"},{"location":"#orientation","text":"","title":"Orientation"},{"location":"#jupyter-notebooks","text":"","title":"Jupyter Notebooks"},{"location":"#the-python-repl","text":"","title":"The Python REPL"},{"location":"#data-types-and-variables","text":"","title":"Data Types and Variables"},{"location":"#numpy-and-arrays","text":"","title":"NumPy and Arrays"},{"location":"#plotting-with-matplotlib","text":"","title":"Plotting with Matplotlib"},{"location":"#functions-and-modules","text":"","title":"Functions and Modules"},{"location":"#if-else-try-except","text":"","title":"If Else Try Except"},{"location":"#loops","text":"","title":"Loops"},{"location":"#symbolic-math","text":"","title":"Symbolic Math"},{"location":"#python-and-external-hardware","text":"","title":"Python and External Hardware"},{"location":"#micropython","text":"","title":"MicroPython"},{"location":"#appendix","text":"","title":"Appendix"},{"location":"00-Preface/00-01-Motivation/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Preface Motivation The motivation for writing this book is that many undergraduate engineering students have to take a programming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student license and requires a site license to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. In addition, this site license eventually expires and students need to purchase another copy often before they finish their degree. The Python programming language, on the other hand, is open-source and free. To download and use Python, the cost to both the student and the college is zero (minus time spent). By moving an undergraduate engineering programming class to Python, students save money and gain greater access to the software they use in class. Later on, in their engineering education, students can continue to use Python for free.","title":"Motivation"},{"location":"00-Preface/00-01-Motivation/#preface","text":"","title":"Preface"},{"location":"00-Preface/00-01-Motivation/#motivation","text":"The motivation for writing this book is that many undergraduate engineering students have to take a programming course based on MATLAB. MATLAB is a great piece of software, but it currently costs $49.00 for a student license and requires a site license to be used on school computers. Subsequently, it is costly for a student to use MATLAB and it is costly for a college to support a course that uses MATLAB. In addition, this site license eventually expires and students need to purchase another copy often before they finish their degree. The Python programming language, on the other hand, is open-source and free. To download and use Python, the cost to both the student and the college is zero (minus time spent). By moving an undergraduate engineering programming class to Python, students save money and gain greater access to the software they use in class. Later on, in their engineering education, students can continue to use Python for free.","title":"Motivation"},{"location":"00-Preface/00-02-Acknowledgments/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Acknowledgments The creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers. The Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on GitHub provided a starting point for the tooling used to convert this book from Jupyter notebooks into a website and into LaTeX for printing.","title":"Acknowledgments"},{"location":"00-Preface/00-02-Acknowledgments/#acknowledgments","text":"The creation of this book and supporting material would not be possible without the gracious support of my wife and family. Students at Portland Community College continue to give me hope that the next generation of engineers will be a diverse group of team problem solvers. The Python Data Science Handbook and Machine Learning in Python as well as Reiman Equations in Python served as inspiration and examples of using Jupyter notebooks to construct a book. The bookbook repository on GitHub provided a starting point for the tooling used to convert this book from Jupyter notebooks into a website and into LaTeX for printing.","title":"Acknowledgments"},{"location":"00-Preface/00-03-Supporting-Materials/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Supporting Materials Supporting materials for this text can be found on the textbook website: problemsolvingwithpython.com The textbook website contains all of the text in web format. Code examples and Jupyter notebooks for the text can be found in the GitHub repository for the book: github.com/ProfessorKazarinoff/Problem-Solving-with-Python-38-Edition Live notebooks, where code examples found in the text can be run without installing any software, are available at: mybinder.org/v2/gh/ProfessorKazarinoff/Problem-Solving-with-Python-38-Edition/master If you are an instructor and using this book in a course with students- please send me an email using your school email address. In the email, include the course you are teaching and the term, approximate enrollment, and a link to the course listing on your school website. peter.kazarinoff@problemsolvingwithpython.com I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.","title":"Supporting Materials"},{"location":"00-Preface/00-03-Supporting-Materials/#supporting-materials","text":"Supporting materials for this text can be found on the textbook website: problemsolvingwithpython.com The textbook website contains all of the text in web format. Code examples and Jupyter notebooks for the text can be found in the GitHub repository for the book: github.com/ProfessorKazarinoff/Problem-Solving-with-Python-38-Edition Live notebooks, where code examples found in the text can be run without installing any software, are available at: mybinder.org/v2/gh/ProfessorKazarinoff/Problem-Solving-with-Python-38-Edition/master If you are an instructor and using this book in a course with students- please send me an email using your school email address. In the email, include the course you are teaching and the term, approximate enrollment, and a link to the course listing on your school website. peter.kazarinoff@problemsolvingwithpython.com I am happy to reply with a solution key for the end of chapter review problems as well as quiz and exam question banks.","title":"Supporting Materials"},{"location":"00-Preface/00-04-Formatting-Conventions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Formatting Conventions This book and supporting materials use the following formatting conventions. Web Address Web address will be shown as: https://github.com/professorkazarinoff/Problem-Solving-with-Python Important terms and vocabulary Important terms and vocabulary are shown in italic text . There is a difference between local variables and global variables in Python code. File Names File names are shown in bold and italic text . After completing the code, save the file as hello.py in the current directory. Module and Package Names Module and Package names will be shown in bold text . NumPy and Matplotlib are two useful packages for problem solvers. Separate code blocks Separate code blocks appear in their own sections in monospaced font . import numpy as np import pandas as pd import matplotlib.pyplot as plt Anaconda Prompt Commands Commands typed into the Anaconda Prompt are shown in separate sections which contain the prompt symbol > before each line. Note the prompt > should not be typed. The prompt symbol is included to indicate Anaconda Prompt , not a character for the user to enter. > conda create -n env python=3.8 > conda activate env Python REPL Commands Commands typed into the Python REPL (the Python Interpreter) appears in separate code sections, which contain the triple arrow prompt >>> . Note the triple arrow >>> prompt should not be typed. Triple arrows are included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL is shown on a separate line below the command, without the >>> prompt. >>> 2 + 2 4 >>> print ( 'Problem Solving with Python' ) Problem Solving with Python Jupyter Notebook cells Commands typed into Jupyter notebook cells appear with the label In [#]: to the left of the code section. The output from Jupyter notebook cells is shown below the input cell. Only code in the input cells needs to be typed. Output cells are be produced automatically by clicking the run button or typing [shift]+[Enter] . a = 2 b = 3 c = a + b print ( c ) 5 Keystrokes and Buttons Keystrokes directly entered by the keyboard or buttons that are indicated on programs or web pages are shown inside square brackets in [monospaced font] . To delete a line, use the [Backspace] key. To exit the shell, type [Ctrl] + [c]","title":"Formatting Conventions"},{"location":"00-Preface/00-04-Formatting-Conventions/#formatting-conventions","text":"This book and supporting materials use the following formatting conventions.","title":"Formatting Conventions"},{"location":"00-Preface/00-04-Formatting-Conventions/#web-address","text":"Web address will be shown as: https://github.com/professorkazarinoff/Problem-Solving-with-Python","title":"Web Address"},{"location":"00-Preface/00-04-Formatting-Conventions/#important-terms-and-vocabulary","text":"Important terms and vocabulary are shown in italic text . There is a difference between local variables and global variables in Python code.","title":"Important terms and vocabulary"},{"location":"00-Preface/00-04-Formatting-Conventions/#file-names","text":"File names are shown in bold and italic text . After completing the code, save the file as hello.py in the current directory.","title":"File Names"},{"location":"00-Preface/00-04-Formatting-Conventions/#module-and-package-names","text":"Module and Package names will be shown in bold text . NumPy and Matplotlib are two useful packages for problem solvers.","title":"Module and Package Names"},{"location":"00-Preface/00-04-Formatting-Conventions/#separate-code-blocks","text":"Separate code blocks appear in their own sections in monospaced font . import numpy as np import pandas as pd import matplotlib.pyplot as plt","title":"Separate code blocks"},{"location":"00-Preface/00-04-Formatting-Conventions/#anaconda-prompt-commands","text":"Commands typed into the Anaconda Prompt are shown in separate sections which contain the prompt symbol > before each line. Note the prompt > should not be typed. The prompt symbol is included to indicate Anaconda Prompt , not a character for the user to enter. > conda create -n env python=3.8 > conda activate env","title":"Anaconda Prompt Commands"},{"location":"00-Preface/00-04-Formatting-Conventions/#python-repl-commands","text":"Commands typed into the Python REPL (the Python Interpreter) appears in separate code sections, which contain the triple arrow prompt >>> . Note the triple arrow >>> prompt should not be typed. Triple arrows are included to indicate the Python REPL prompt, not a character for the user to enter. The output from the Python REPL is shown on a separate line below the command, without the >>> prompt. >>> 2 + 2 4 >>> print ( 'Problem Solving with Python' ) Problem Solving with Python","title":"Python REPL Commands"},{"location":"00-Preface/00-04-Formatting-Conventions/#jupyter-notebook-cells","text":"Commands typed into Jupyter notebook cells appear with the label In [#]: to the left of the code section. The output from Jupyter notebook cells is shown below the input cell. Only code in the input cells needs to be typed. Output cells are be produced automatically by clicking the run button or typing [shift]+[Enter] . a = 2 b = 3 c = a + b print ( c ) 5","title":"Jupyter Notebook cells"},{"location":"00-Preface/00-04-Formatting-Conventions/#keystrokes-and-buttons","text":"Keystrokes directly entered by the keyboard or buttons that are indicated on programs or web pages are shown inside square brackets in [monospaced font] . To delete a line, use the [Backspace] key. To exit the shell, type [Ctrl] + [c]","title":"Keystrokes and Buttons"},{"location":"00-Preface/00-05-Errata/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Errata Errata including any typos, code errors and formatting inconsistencies can be submitted to: errata@problemsolvingwithpython.com Please include the chapter number and section number in your email. Thank you in advance for helping improve this text for future readers.","title":"Errata"},{"location":"00-Preface/00-05-Errata/#errata","text":"Errata including any typos, code errors and formatting inconsistencies can be submitted to: errata@problemsolvingwithpython.com Please include the chapter number and section number in your email. Thank you in advance for helping improve this text for future readers.","title":"Errata"},{"location":"01-Orientation/01-00-Orientation/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Orientation Welcome to the wondeful world of problem-solving with Python! This first Orientation chapter will help you get started by guiding you through the process of installing Python on your computer. By the end of this chapter, you will be able to: Describe why Python is a useful computer language for problem solvers Describe applications where Python is used Detail advantages of Python over other programming languages Know the cost of Python Know the difference between Python and Anaconda Install Python on your computer Install Anaconda on your computer","title":"1.1 Introduction"},{"location":"01-Orientation/01-00-Orientation/#orientation","text":"Welcome to the wondeful world of problem-solving with Python! This first Orientation chapter will help you get started by guiding you through the process of installing Python on your computer. By the end of this chapter, you will be able to: Describe why Python is a useful computer language for problem solvers Describe applications where Python is used Detail advantages of Python over other programming languages Know the cost of Python Know the difference between Python and Anaconda Install Python on your computer Install Anaconda on your computer","title":"Orientation"},{"location":"01-Orientation/01-01-Why-Python/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Why Python? You might be wondering \"Why should I solve problems with Python?\" There are other programming languages in the world such as MATLAB, LabView, C++, and Java. What makes Python useful for solving problems? Python is a powerful programming language Python defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating-point numbers can be part of the same list. Python has an extensive Standard Library. A huge number of object types, functions, and methods are available for use without importing any external modules. These include math functions, list methods, and calls to a computer's system. There is a lot that can be done with the Python Standard Library. The first couple of chapters of this book will just use the standard library. It can do a lot. Python has over 100,000 external packages available for download and use. They are easy to install off of the Python Package Index, commonly called PyPI (\"pie pee eye\"). There is a Python package for just about everything. There are packages which can help you: interact with the web, make complex computations, calculate unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data. There are and many more Python packages added to PyPI every day. In this book, we will use some of the more useful Python packages for problem solvers such as NumPy, Matplotlib, and SymPy. Python is easy to learn and use One way Problem solvers code solutions faster in Python faster than coding solutions in other programming languages is that Python is easy to learn and use. Python programs tend to be shorter and quicker to write than a program that completes a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions in Python can be written and tested quickly. Python is also an easy language for fellow problem solvers on your team to learn. Python's language syntax is also quite human-readable. While programmers can become preoccupied with a program's runtime, it is development time that takes the longest. Python is transportable Python can be installed and run on each of the three major operating systems: Windows, Mac, and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a MacOS or Linux machine and type python . That's it, you are now using Python. On Windows, I recommend downloading and installing the Anaconda distribution of Python. The Anaconda distribution of Python is free and can be installed on all three major operating systems. Python is free Some computer languages used for problem-solving such as MATLAB and LabView cost money to download and install. Python is free to download and use. Python is also open source and individuals are free to modify, contribute to, and propose improvements to Python. All of the packages available on the Python Package Index are free to download and install. Many more packages, scripts, and utilities can be found in open-source code repositories on GitHub and BitBucket. Python is growing Python is growing in popularity. Python is particularly growing in data science and machine learning. It is also used with GIS systems, physical modeling, machine learning, and computer vision. These are growing team problem-solving areas for engineers.","title":"1.2 Why Python?"},{"location":"01-Orientation/01-01-Why-Python/#why-python","text":"You might be wondering \"Why should I solve problems with Python?\" There are other programming languages in the world such as MATLAB, LabView, C++, and Java. What makes Python useful for solving problems?","title":"Why Python?"},{"location":"01-Orientation/01-01-Why-Python/#python-is-a-powerful-programming-language","text":"Python defines the types of objects you build into your code. Unlike some other languages such as C, you do not need to declare the object type. The object type is also mutable, you can change the type of object easily and on the fly. There is a wide array of object types built into Python. Objects can change in size. Python objects can also contain mixed data types. Strings and floating-point numbers can be part of the same list. Python has an extensive Standard Library. A huge number of object types, functions, and methods are available for use without importing any external modules. These include math functions, list methods, and calls to a computer's system. There is a lot that can be done with the Python Standard Library. The first couple of chapters of this book will just use the standard library. It can do a lot. Python has over 100,000 external packages available for download and use. They are easy to install off of the Python Package Index, commonly called PyPI (\"pie pee eye\"). There is a Python package for just about everything. There are packages which can help you: interact with the web, make complex computations, calculate unit conversions, plot data, work with .csv, .xls, and .pdf files, manipulate images and video, read data from sensors and test equipment, train machine learning algorithms, design web apps, work with GIS data, work with astronautical data. There are and many more Python packages added to PyPI every day. In this book, we will use some of the more useful Python packages for problem solvers such as NumPy, Matplotlib, and SymPy.","title":"Python is a powerful programming language"},{"location":"01-Orientation/01-01-Why-Python/#python-is-easy-to-learn-and-use","text":"One way Problem solvers code solutions faster in Python faster than coding solutions in other programming languages is that Python is easy to learn and use. Python programs tend to be shorter and quicker to write than a program that completes a similar function in other languages. In the rapid design, prototype, test, iterate cycle programming solutions in Python can be written and tested quickly. Python is also an easy language for fellow problem solvers on your team to learn. Python's language syntax is also quite human-readable. While programmers can become preoccupied with a program's runtime, it is development time that takes the longest.","title":"Python is easy to learn and use"},{"location":"01-Orientation/01-01-Why-Python/#python-is-transportable","text":"Python can be installed and run on each of the three major operating systems: Windows, Mac, and Linux. On Mac and Linux Python comes installed out of the box. Just open up a terminal in on a MacOS or Linux machine and type python . That's it, you are now using Python. On Windows, I recommend downloading and installing the Anaconda distribution of Python. The Anaconda distribution of Python is free and can be installed on all three major operating systems.","title":"Python is transportable"},{"location":"01-Orientation/01-01-Why-Python/#python-is-free","text":"Some computer languages used for problem-solving such as MATLAB and LabView cost money to download and install. Python is free to download and use. Python is also open source and individuals are free to modify, contribute to, and propose improvements to Python. All of the packages available on the Python Package Index are free to download and install. Many more packages, scripts, and utilities can be found in open-source code repositories on GitHub and BitBucket.","title":"Python is free"},{"location":"01-Orientation/01-01-Why-Python/#python-is-growing","text":"Python is growing in popularity. Python is particularly growing in data science and machine learning. It is also used with GIS systems, physical modeling, machine learning, and computer vision. These are growing team problem-solving areas for engineers.","title":"Python is growing"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); The Anaconda Distribution of Python I recommend problem-solvers install the Anaconda distribution of Python . The following section details the differences between the Anaconda distribution of Python and the version of Python you can download from Python.org How is Anaconda different from Python? When you download Python from Python.org, you get the Python Interpreter , a little text editing program called IDLE and all of the Python Standard Library modules. The Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program. When you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the Anaconda Prompt (a command-line program), Spyder (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly. How is Anaconda different from Python? When you download Python from Python.org, you get the Python Interpreter , a little text editing program called IDLE and all of the Python Standard Library modules. The Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program. When you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the Anaconda Prompt (a command-line program), Spyder (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly. Why download Anaconda, if I want to use is Python? Regardless if you download Python from Python.org or if you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code. However, there are a couple of advantages to using the Anaconda distribution of Python. Anaconda includes Python plus about 600 additional Python packages The Anaconda distribution of Python is advantageous because it includes Python as well as about 600 additional Python packages. These additional packages are all free to install. The packages that come with Anaconda includes many of the most common Python packages use to solve problems. If you download Anaconda, you get Python including the Python Standard Library plus about 600 extra packages. If you download Python from Python.org, you just get Python and The Standard Library but no additional modules. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or about 600 steps) and just install Anaconda instead of installing about 600 different modules? Anaconda installs without administrator privileges Even if you can't install programs on a computer, like a computer in a school computer lab, you can still download and use Anaconda. The Anaconda distribution of Python will also allow you to install additional modules from the Python package index ( PyPI.org ) and conda-forge ( conda-forge.org ), the conda package index. Anaconda works on MacOS If you use MacOS, you probably already have Python installed on your computer. Most MacOS installations come with Python included. The problem is that the version of Python that comes with MacOS is old (usually legacy Python, Python 2) and the version of Python that comes with MacOS is locked up behind a set of administrator privileges. Because the pre-installed version of Python included with MacOS can require administrator privileges, you can have trouble with installation and run-time problems. Some things will seem to work fine, and then other things won't run at all, or you will keep getting asked for an administrator password over and over. Downloading and installing Anaconda (separate from the version of Python that came with MacOS) prevents most of the problems on MacOS caused by using the pre-installed version of Python. Anaconda makes package management and virtual environments easier Another advantage of Anaconda is that package management and virtual environments are a lot easier when you have Anaconda. Virtual environments and package handling might not seem to make a huge difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet. (It's OK if you don't even know what those two things are yet). After you write a couple of Python programs and start downloading a couple of extra modules from PyPI or conda-forge, dealing with package management and virtual environments becomes more critical.","title":"1.3 The Anaconda Distribution of Python"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#the-anaconda-distribution-of-python","text":"I recommend problem-solvers install the Anaconda distribution of Python . The following section details the differences between the Anaconda distribution of Python and the version of Python you can download from Python.org","title":"The Anaconda Distribution of Python"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#how-is-anaconda-different-from-python","text":"When you download Python from Python.org, you get the Python Interpreter , a little text editing program called IDLE and all of the Python Standard Library modules. The Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program. When you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the Anaconda Prompt (a command-line program), Spyder (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly.","title":"How is Anaconda different from Python?"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#how-is-anaconda-different-from-python_1","text":"When you download Python from Python.org, you get the Python Interpreter , a little text editing program called IDLE and all of the Python Standard Library modules. The Python Interpreter is an application or program that runs your Python code. A program written in the Python programming language is run with the Python Interpreter. So Python corresponds to both the language that a program is written in as well as the application that runs the program. When you download the Anaconda distribution of Python from Anaconda.com, you get a Python Interpreter, the Anaconda Prompt (a command-line program), Spyder (a code editor) and about 600 extra Python modules that aren't included in the Python Standard Library. The Anaconda distribution of Python also includes a program called Anaconda Navigator that allows you to launch Jupyter notebooks quickly.","title":"How is Anaconda different from Python?"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#why-download-anaconda-if-i-want-to-use-is-python","text":"Regardless if you download Python from Python.org or if you download Anaconda (with all the extra stuff it comes with) from Anaconda.com, you will be able to write and execute Python code. However, there are a couple of advantages to using the Anaconda distribution of Python.","title":"Why download Anaconda, if I want to use is Python?"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#anaconda-includes-python-plus-about-600-additional-python-packages","text":"The Anaconda distribution of Python is advantageous because it includes Python as well as about 600 additional Python packages. These additional packages are all free to install. The packages that come with Anaconda includes many of the most common Python packages use to solve problems. If you download Anaconda, you get Python including the Python Standard Library plus about 600 extra packages. If you download Python from Python.org, you just get Python and The Standard Library but no additional modules. You could install the extra modules that come with Anaconda (that don't come with plain old Python), but why not save a step (or about 600 steps) and just install Anaconda instead of installing about 600 different modules?","title":"Anaconda includes Python plus about 600 additional Python packages"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#anaconda-installs-without-administrator-privileges","text":"Even if you can't install programs on a computer, like a computer in a school computer lab, you can still download and use Anaconda. The Anaconda distribution of Python will also allow you to install additional modules from the Python package index ( PyPI.org ) and conda-forge ( conda-forge.org ), the conda package index.","title":"Anaconda installs without administrator privileges"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#anaconda-works-on-macos","text":"If you use MacOS, you probably already have Python installed on your computer. Most MacOS installations come with Python included. The problem is that the version of Python that comes with MacOS is old (usually legacy Python, Python 2) and the version of Python that comes with MacOS is locked up behind a set of administrator privileges. Because the pre-installed version of Python included with MacOS can require administrator privileges, you can have trouble with installation and run-time problems. Some things will seem to work fine, and then other things won't run at all, or you will keep getting asked for an administrator password over and over. Downloading and installing Anaconda (separate from the version of Python that came with MacOS) prevents most of the problems on MacOS caused by using the pre-installed version of Python.","title":"Anaconda works on MacOS"},{"location":"01-Orientation/01-02-The-Anaconda-Distribution-of-Python/#anaconda-makes-package-management-and-virtual-environments-easier","text":"Another advantage of Anaconda is that package management and virtual environments are a lot easier when you have Anaconda. Virtual environments and package handling might not seem to make a huge difference right now. If you just downloaded Anaconda for the first time, you are probably not dealing with package management and virtual environments yet. (It's OK if you don't even know what those two things are yet). After you write a couple of Python programs and start downloading a couple of extra modules from PyPI or conda-forge, dealing with package management and virtual environments becomes more critical.","title":"Anaconda makes package management and virtual environments easier"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Installing Anaconda on Windows For problem-solvers, I recommend installing and using the Anaconda distribution of Python. This section details the installation of the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the best option for problem-solvers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with about 600 Python packages pre-installed including NumPy , Matplotlib , and SymPy . These three packages are useful for problem-solvers and will be discussed in subsequent chapters. Steps: Visit Anaconda.com Select Products / Individual Edition Scroll down to the Anaconda Installers section Download the Windows 64-Bit Graphical Installer Open and run the .exe installer Use the Windows Start Menu, open the Anaconda Prompt and run some Python code 1. Visit Anaconda.com Go to the following link: Anaconda.com 2. Select Products / Individual Edition On the Anaconda.com home page, select Products from the upper menu, then select Individual Edition . 3. Scroll down to the Anaconda Installers section Scroll down the Individual Edition page to the Anaconda Installers section. 4. Download the Windows 64-Bit Graphical Installer In the Windows section of the page, select the 64-Bit Graphical Installer . Click the link to download the installer. 5. Open and run the .exe installer Open the .exe installer file you just downloaded to run it. You will need to accept a License Agreement. I recommend that you keep all the default options during the installation. 6. Open the Anaconda Prompt from the Windows start menu After the installation of Anaconda is complete, you can go to the Windows start menu and select the Anaconda Prompt. This opens the Anaconda Prompt . Anaconda is the Python distribution and the Anaconda Prompt is a command line shell (a program where you type in commands instead of using a mouse). The black screen and text that makes up the Anaconda Prompt doesn't look like much, but it is really useful for problem-solvers using Python. At the Anaconda prompt, type python and hit [Enter] . The python command starts the Python interpreter, also called the Python REPL (for Read Evaluate Print Loop). > python Note the Python version. You should see something like Python 3.8.3 . With the interpreter running, you will see a set of greater-than symbols >>> before the cursor. Now you can type Python commands. Try typing import this . You should see the Zen of Python by Tim Peters To close the Python interpreter, type exit() at the prompt >>> . Note the double parenthesis at the end of the exit() command. The () is needed to stop the Python interpreter and get back out to the Anaconda Prompt . To close the Anaconda Prompt , you can either close the window with the mouse, or type exit , no parenthesis necessary. When you want to use the Python interpreter again, just click the Windows Start button and select the Anaconda Prompt and type python .","title":"1.4 Installing Anaconda on Windows"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#installing-anaconda-on-windows","text":"For problem-solvers, I recommend installing and using the Anaconda distribution of Python. This section details the installation of the Anaconda distribution of Python on Windows 10. I think the Anaconda distribution of Python is the best option for problem-solvers who want to use Python. Anaconda is free (although the download is large which can take time) and can be installed on school or work computers where you don't have administrator access or the ability to install new programs. Anaconda comes bundled with about 600 Python packages pre-installed including NumPy , Matplotlib , and SymPy . These three packages are useful for problem-solvers and will be discussed in subsequent chapters.","title":"Installing Anaconda on Windows"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#steps","text":"Visit Anaconda.com Select Products / Individual Edition Scroll down to the Anaconda Installers section Download the Windows 64-Bit Graphical Installer Open and run the .exe installer Use the Windows Start Menu, open the Anaconda Prompt and run some Python code","title":"Steps:"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#1-visit-anacondacom","text":"Go to the following link: Anaconda.com","title":"1. Visit Anaconda.com"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#2-select-products-individual-edition","text":"On the Anaconda.com home page, select Products from the upper menu, then select Individual Edition .","title":"2. Select Products / Individual Edition"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#3-scroll-down-to-the-anaconda-installers-section","text":"Scroll down the Individual Edition page to the Anaconda Installers section.","title":"3. Scroll down to the Anaconda Installers section"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#4-download-the-windows-64-bit-graphical-installer","text":"In the Windows section of the page, select the 64-Bit Graphical Installer . Click the link to download the installer.","title":"4. Download the Windows 64-Bit Graphical Installer"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#5-open-and-run-the-exe-installer","text":"Open the .exe installer file you just downloaded to run it. You will need to accept a License Agreement. I recommend that you keep all the default options during the installation.","title":"5. Open and run the .exe installer"},{"location":"01-Orientation/01-03-Installing-Anaconda-on-Windows/#6-open-the-anaconda-prompt-from-the-windows-start-menu","text":"After the installation of Anaconda is complete, you can go to the Windows start menu and select the Anaconda Prompt. This opens the Anaconda Prompt . Anaconda is the Python distribution and the Anaconda Prompt is a command line shell (a program where you type in commands instead of using a mouse). The black screen and text that makes up the Anaconda Prompt doesn't look like much, but it is really useful for problem-solvers using Python. At the Anaconda prompt, type python and hit [Enter] . The python command starts the Python interpreter, also called the Python REPL (for Read Evaluate Print Loop). > python Note the Python version. You should see something like Python 3.8.3 . With the interpreter running, you will see a set of greater-than symbols >>> before the cursor. Now you can type Python commands. Try typing import this . You should see the Zen of Python by Tim Peters To close the Python interpreter, type exit() at the prompt >>> . Note the double parenthesis at the end of the exit() command. The () is needed to stop the Python interpreter and get back out to the Anaconda Prompt . To close the Anaconda Prompt , you can either close the window with the mouse, or type exit , no parenthesis necessary. When you want to use the Python interpreter again, just click the Windows Start button and select the Anaconda Prompt and type python .","title":"6. Open the Anaconda Prompt from the Windows start menu"},{"location":"03-The-Python-REPL/03-01-Introduction/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); The Python REPL Introduction In this chapter, you will learn how to write and run your first lines of Python code at the Python REPL also called the Python prompt. You will learn how to use Python as a calculator and be introduced to Python variables and Python's print() function. By the end of this chapter, you will be able to: Open and close the Python REPL Compute mathematical calculations using the Python REPL Use the output from the Python REPL as input in another problem Import the math and statistics modules from the Python Standard Library and use their functions Assign values to variables Use variables in calculations Create strings Combine and compare strings","title":"3.1 Introduction"},{"location":"03-The-Python-REPL/03-01-Introduction/#the-python-repl","text":"","title":"The Python REPL"},{"location":"03-The-Python-REPL/03-01-Introduction/#introduction","text":"In this chapter, you will learn how to write and run your first lines of Python code at the Python REPL also called the Python prompt. You will learn how to use Python as a calculator and be introduced to Python variables and Python's print() function. By the end of this chapter, you will be able to: Open and close the Python REPL Compute mathematical calculations using the Python REPL Use the output from the Python REPL as input in another problem Import the math and statistics modules from the Python Standard Library and use their functions Assign values to variables Use variables in calculations Create strings Combine and compare strings","title":"Introduction"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Python as a Calculator Python can be used as a calculator to compute arithmetic operations like addition, subtraction, multiplication, and division. Python can also be used for trigonometric calculations and statistical calculations. The Python REPL Calculations can be completed at the Python Prompt, also called the Python REPL. REPL stands for Read Evaluate Print Loop . The Python REPL shows three arrow symbols >>> followed by a blinking cursor. Programmers type commands at the >>> prompt then hit [ENTER] to see the results. Commands typed into the Python REPL are read by the interpreter, results of running the commands are evaluated , then printed to the command window. After the output is printed, the >>> prompt appears on a new line. This process repeats over and over again in a continuous loop. Arithmetic Python can be used as a calculator to make arithmetic calculations. Try the following commands at the Python REPL using the arithmetic operators + , - , * , / : Suppose the mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly? >>> 5 + 3 8 Suppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the leftover assembly? >>> 8 - 1.5 6.5 If the battery has a mass of 5000 g and a volume of 2500 \\(cm^3\\) What is the density of the battery? The formula for density is below, where \\(D\\) is density, \\(m\\) is mass and \\(v\\) is volume. \\[ D = \\frac{m}{v} \\] In the problem above \\(m = 5000\\) and \\(v=2500\\) Let's solve this with Python. >>> 5000 / 2500 2.0 What is the total mass if we have 2 batteries, and each battery weighs 5 kg? >>> 5 * 2 10 The length, width, and height of each battery is 3 cm. What is the area of the base of the battery? To complete this problem, use the double asterisk symbol ** to raise a number to a power. >>> 3 ** 2 9 What is the volume of the battery if each the length, width, and height of the battery are all 3 cm? >>> 3 ** 3 27 Find the mass of the two batteries and two cables. We can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (The underscore _ in Python is comparable to the ans variable in MATLAB) >>> 2 * 5 10 >>> _ + 1.5 + 1 12.5 Section Summary A summary of the arithmetic operations in Python is below: Operator Description Example Result + addition 2 + 3 5 - subtraction 8 - 6 2 - negative number -4 -4 * multiplication 5 * 2 10 / division 6 / 3 2 ** raises a number to a power 10**2 100 _ returns last saved value _ + 7 107 Trigonometry: sine, cosine, and tangent Trigonometry functions such as sine, cosine, and tangent can also be calculated using the Python REPL. To use Python's trig functions, we need to introduce a new concept: importing modules . In Python, there are many operations built into the language when the REPL starts. These include + , - , * , / like we saw in the previous section. However, not all functions will work right away when Python starts. Say we want to find the sine of an angle. Try the following: >>> sin ( 60 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'sin' is not defined This error results because we have not told Python to include the sin function. The sin function is part of the Python Standard Library . The Python Standard Library comes with every Python installation and includes many functions, but not all of these functions are available to us when we start a new Python REPL session. To use Python's sin function, first import the sin function from the math module which is part of the Python Standard Library. Importing modules and functions is easy. Use the following syntax: from module import function To import the sin() function from the math module try: >>> from math import sin >>> sin ( 60 ) - 0.3048106211022167 Success! Multiple modules can be imported at the same time. Say we want to use a bunch of different trig functions to solve the following problem. An angle has a value of \\(\\pi\\) /6 radians. What is the sine, cos, and tangent of the angle? To solve this problem we need to import the sin() , cos() , and tan() functions. It is also useful to have the value of \\(\\pi\\) , rather than having to write 3.14.... We can import all of these functions at the same time using the syntax: from module import function1, function2, function3 Note the commas in between the function names. Try: >>> from math import sin , cos , tan , pi >>> pi 3.141592653589793 >>> sin ( pi / 6 ) 0.49999999999999994 >>> cos ( pi / 6 ) 0.8660254037844387 >>> tan ( pi / 6 ) 0.5773502691896257 Section Summary The following trig functions are part of Python's math module: Trig function Name Description Example Result math.pi pi mathematical constant \\(\\pi\\) math.pi 3.14 math.sin() sine sine of an angle in radians math.sin(4) 9.025 math.cos() cosine cosine of an angle in radians cos(3.1) 400 math.tan() tangent tangent of an angle in radians tan(100) 2.0 math.asin() arc sine inverse sine, ouput in radians math.sin(4) 9.025 math.acos() arc cosine inverse cosine, ouput in radians log(3.1) 400 math.atan() arc tangent inverse tangent, ouput in radians atan(100) 2.0 math.radians() radians conversion degrees to radians math.radians(90) 1.57 math.degrees() degree conversion radians to degrees math.degrees(2) 114.59 Exponents and Logarithms Calculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the math module just like the trig functions were imported from the math module above. The following exponents and logarithms functions can be imported from Python's math module: log log10 exp e pow(x,y) sqrt Let's try a couple of examples: >>> from math import log , log10 , exp , e , pow , sqrt >>> log ( 3.0 * e ** 3.4 ) # note: natural log 4.4986122886681095 A right triangle has side lengths 3 and 4. What is the length of the hypotenuse? >>> sqrt ( 3 ** 2 + 4 ** 2 ) 5.0 The power function pow() works like the ** operator. pow() raises a number to a power. >>> 5 ** 2 25 >>> pow ( 5 , 2 ) 25.0 Section Summary The following exponent and logarithm functions are part of Python's math module: Math function Name Description Example Result math.e Euler's number mathematical constant \\(e\\) math.e 2.718 math.exp() exponent \\(e\\) raised to a power math.exp(2.2) 9.025 math.log() natural logarithm log base \\(e\\) math.log(3.1) 400 math.log10() base 10 logarithm log base 10 math.log10(100) 2.0 math.pow() power raises a number to a power math.pow(2,3) 8.0 math.sqrt() square root square root of a number math.sqrt(16) 4.0 Statistics To round out this section, we will look at a couple of statistics functions. These functions are part of the Python Standard Library, but not part of the math module. To access Python's statistics functions, we need to import them from the statistics module using the statement from statistics import mean, median, mode, stdev . Then the functions mean , median , mode and stdev (standard deviation) can be used. >>> from statistics import mean , median , mode , stdev >>> test_scores = [ 60 , 83 , 83 , 91 , 100 ] >>> mean ( test_scores ) 83.4 >>> median ( test_scores ) 83 >>> mode ( test_scores ) 83 >>> stdev ( test_scores ) 14.842506526863986 Alternatively, we can import the entire statistics module using the statement import statistics . Then to use the functions, we need to use the names statistics.mean , statistics.median , statistics.mode , and statistics.stdev . See below: >>> import statistics >>> test_scores = [ 60 , 83 , 83 , 91 , 100 ] >>> statistics . mean ( test_scores ) 83.4 >>> statistics . median ( test_scores ) 83 >>> statistics . mode ( test_scores ) 83 >>> statistics . stdev ( test_scores ) 14.842506526863986 Section Summary The following functions are part of Python's statistics module. These functions need to be imported from the statistics module before they are used. Statistics function Name Description Example Result mean() mean mean or average mean([1,4,5,5]) 3.75 median() median middle value median([1,4,5,5]) 4.5 mode() mode most often mode([1,4,5,5]) 5 stdev() standard deviation spread of data stdev([1,4,5,5]) 1.892 variance() variance variance of data variance([1,4,5,5]) 3.583","title":"3.2 Python as a Calculator"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#python-as-a-calculator","text":"Python can be used as a calculator to compute arithmetic operations like addition, subtraction, multiplication, and division. Python can also be used for trigonometric calculations and statistical calculations.","title":"Python as a Calculator"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#the-python-repl","text":"Calculations can be completed at the Python Prompt, also called the Python REPL. REPL stands for Read Evaluate Print Loop . The Python REPL shows three arrow symbols >>> followed by a blinking cursor. Programmers type commands at the >>> prompt then hit [ENTER] to see the results. Commands typed into the Python REPL are read by the interpreter, results of running the commands are evaluated , then printed to the command window. After the output is printed, the >>> prompt appears on a new line. This process repeats over and over again in a continuous loop.","title":"The Python REPL"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#arithmetic","text":"Python can be used as a calculator to make arithmetic calculations. Try the following commands at the Python REPL using the arithmetic operators + , - , * , / : Suppose the mass of a battery is 5 kg and the mass of the battery cables is 3 kg. What is the mass of the battery cable assembly? >>> 5 + 3 8 Suppose one of the cables above is removed and it has a mass of 1.5 kg. What is the mass of the leftover assembly? >>> 8 - 1.5 6.5 If the battery has a mass of 5000 g and a volume of 2500 \\(cm^3\\) What is the density of the battery? The formula for density is below, where \\(D\\) is density, \\(m\\) is mass and \\(v\\) is volume. \\[ D = \\frac{m}{v} \\] In the problem above \\(m = 5000\\) and \\(v=2500\\) Let's solve this with Python. >>> 5000 / 2500 2.0 What is the total mass if we have 2 batteries, and each battery weighs 5 kg? >>> 5 * 2 10 The length, width, and height of each battery is 3 cm. What is the area of the base of the battery? To complete this problem, use the double asterisk symbol ** to raise a number to a power. >>> 3 ** 2 9 What is the volume of the battery if each the length, width, and height of the battery are all 3 cm? >>> 3 ** 3 27 Find the mass of the two batteries and two cables. We can use Python to find the mass of the batteries and then use the answer, which Python saves as an underscore _ to use in our next operation. (The underscore _ in Python is comparable to the ans variable in MATLAB) >>> 2 * 5 10 >>> _ + 1.5 + 1 12.5","title":"Arithmetic"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#section-summary","text":"A summary of the arithmetic operations in Python is below: Operator Description Example Result + addition 2 + 3 5 - subtraction 8 - 6 2 - negative number -4 -4 * multiplication 5 * 2 10 / division 6 / 3 2 ** raises a number to a power 10**2 100 _ returns last saved value _ + 7 107","title":"Section Summary"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#trigonometry-sine-cosine-and-tangent","text":"Trigonometry functions such as sine, cosine, and tangent can also be calculated using the Python REPL. To use Python's trig functions, we need to introduce a new concept: importing modules . In Python, there are many operations built into the language when the REPL starts. These include + , - , * , / like we saw in the previous section. However, not all functions will work right away when Python starts. Say we want to find the sine of an angle. Try the following: >>> sin ( 60 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'sin' is not defined This error results because we have not told Python to include the sin function. The sin function is part of the Python Standard Library . The Python Standard Library comes with every Python installation and includes many functions, but not all of these functions are available to us when we start a new Python REPL session. To use Python's sin function, first import the sin function from the math module which is part of the Python Standard Library. Importing modules and functions is easy. Use the following syntax: from module import function To import the sin() function from the math module try: >>> from math import sin >>> sin ( 60 ) - 0.3048106211022167 Success! Multiple modules can be imported at the same time. Say we want to use a bunch of different trig functions to solve the following problem. An angle has a value of \\(\\pi\\) /6 radians. What is the sine, cos, and tangent of the angle? To solve this problem we need to import the sin() , cos() , and tan() functions. It is also useful to have the value of \\(\\pi\\) , rather than having to write 3.14.... We can import all of these functions at the same time using the syntax: from module import function1, function2, function3 Note the commas in between the function names. Try: >>> from math import sin , cos , tan , pi >>> pi 3.141592653589793 >>> sin ( pi / 6 ) 0.49999999999999994 >>> cos ( pi / 6 ) 0.8660254037844387 >>> tan ( pi / 6 ) 0.5773502691896257","title":"Trigonometry: sine, cosine, and tangent"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#section-summary_1","text":"The following trig functions are part of Python's math module: Trig function Name Description Example Result math.pi pi mathematical constant \\(\\pi\\) math.pi 3.14 math.sin() sine sine of an angle in radians math.sin(4) 9.025 math.cos() cosine cosine of an angle in radians cos(3.1) 400 math.tan() tangent tangent of an angle in radians tan(100) 2.0 math.asin() arc sine inverse sine, ouput in radians math.sin(4) 9.025 math.acos() arc cosine inverse cosine, ouput in radians log(3.1) 400 math.atan() arc tangent inverse tangent, ouput in radians atan(100) 2.0 math.radians() radians conversion degrees to radians math.radians(90) 1.57 math.degrees() degree conversion radians to degrees math.degrees(2) 114.59","title":"Section Summary"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#exponents-and-logarithms","text":"Calculating exponents and logarithms with Python is easy. Note the exponent and logarithm functions are imported from the math module just like the trig functions were imported from the math module above. The following exponents and logarithms functions can be imported from Python's math module: log log10 exp e pow(x,y) sqrt Let's try a couple of examples: >>> from math import log , log10 , exp , e , pow , sqrt >>> log ( 3.0 * e ** 3.4 ) # note: natural log 4.4986122886681095 A right triangle has side lengths 3 and 4. What is the length of the hypotenuse? >>> sqrt ( 3 ** 2 + 4 ** 2 ) 5.0 The power function pow() works like the ** operator. pow() raises a number to a power. >>> 5 ** 2 25 >>> pow ( 5 , 2 ) 25.0","title":"Exponents and Logarithms"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#section-summary_2","text":"The following exponent and logarithm functions are part of Python's math module: Math function Name Description Example Result math.e Euler's number mathematical constant \\(e\\) math.e 2.718 math.exp() exponent \\(e\\) raised to a power math.exp(2.2) 9.025 math.log() natural logarithm log base \\(e\\) math.log(3.1) 400 math.log10() base 10 logarithm log base 10 math.log10(100) 2.0 math.pow() power raises a number to a power math.pow(2,3) 8.0 math.sqrt() square root square root of a number math.sqrt(16) 4.0","title":"Section Summary"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#statistics","text":"To round out this section, we will look at a couple of statistics functions. These functions are part of the Python Standard Library, but not part of the math module. To access Python's statistics functions, we need to import them from the statistics module using the statement from statistics import mean, median, mode, stdev . Then the functions mean , median , mode and stdev (standard deviation) can be used. >>> from statistics import mean , median , mode , stdev >>> test_scores = [ 60 , 83 , 83 , 91 , 100 ] >>> mean ( test_scores ) 83.4 >>> median ( test_scores ) 83 >>> mode ( test_scores ) 83 >>> stdev ( test_scores ) 14.842506526863986 Alternatively, we can import the entire statistics module using the statement import statistics . Then to use the functions, we need to use the names statistics.mean , statistics.median , statistics.mode , and statistics.stdev . See below: >>> import statistics >>> test_scores = [ 60 , 83 , 83 , 91 , 100 ] >>> statistics . mean ( test_scores ) 83.4 >>> statistics . median ( test_scores ) 83 >>> statistics . mode ( test_scores ) 83 >>> statistics . stdev ( test_scores ) 14.842506526863986","title":"Statistics"},{"location":"03-The-Python-REPL/03-02-Python-as-a-Calculator/#section-summary_3","text":"The following functions are part of Python's statistics module. These functions need to be imported from the statistics module before they are used. Statistics function Name Description Example Result mean() mean mean or average mean([1,4,5,5]) 3.75 median() median middle value median([1,4,5,5]) 4.5 mode() mode most often mode([1,4,5,5]) 5 stdev() standard deviation spread of data stdev([1,4,5,5]) 1.892 variance() variance variance of data variance([1,4,5,5]) 3.583","title":"Section Summary"},{"location":"03-The-Python-REPL/03-03-Variables/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Variables Variables are assigned in Python using the = equals sign also called the assignment operator . The statement: a = 2 Assigns the integer 2 to the variable a . >>> a = 2 >>> a 2 Note the assignment operator = (equals), is different from the logical comparison operator == (equivalent to). >>> a == 2 True Variable names in Python must conform to the following rules: variable names must start with a letter variable names can only contain letters, numbers, and the underscore character _ variable names can not contain spaces variable names can not include punctuation variable names are not enclosed in quotes or brackets The following code lines show valid variable names: constant = 4 new_variable = 'var' my2rules = ['rule1','rule2'] SQUARES = 4 The following code lines show invalid variable names: a constant = 4 3newVariables = [1, 2, 3] &sum = 4 + 4 Let's solve the problem below at the Python REPL using variables. Problem The Arrhenius relationship states: \\[ n = n_{v}e^{-Q_v/(RT)} \\] In a system where \\(n_v = 2.0 \\times 10^{-3}\\) , \\(Q_v = 5\\) , \\(R=3.18\\) , and \\(T=293\\) , calculate \\(n\\) . Solution Use variables to assign a value to each one of the constants in the problem and calculate \\(n\\) . >>> nv = 2.0e-3 >>> Qv = 5 >>> R = 3.18 >>> T = 293 >>> from math import exp >>> n = nv * exp ( - 1 * Qv / ( R * T )) >>> n 0.0019892961379660424","title":"3.3 Variables"},{"location":"03-The-Python-REPL/03-03-Variables/#variables","text":"Variables are assigned in Python using the = equals sign also called the assignment operator . The statement: a = 2 Assigns the integer 2 to the variable a . >>> a = 2 >>> a 2 Note the assignment operator = (equals), is different from the logical comparison operator == (equivalent to). >>> a == 2 True Variable names in Python must conform to the following rules: variable names must start with a letter variable names can only contain letters, numbers, and the underscore character _ variable names can not contain spaces variable names can not include punctuation variable names are not enclosed in quotes or brackets The following code lines show valid variable names: constant = 4 new_variable = 'var' my2rules = ['rule1','rule2'] SQUARES = 4 The following code lines show invalid variable names: a constant = 4 3newVariables = [1, 2, 3] &sum = 4 + 4 Let's solve the problem below at the Python REPL using variables.","title":"Variables"},{"location":"03-The-Python-REPL/03-03-Variables/#problem","text":"The Arrhenius relationship states: \\[ n = n_{v}e^{-Q_v/(RT)} \\] In a system where \\(n_v = 2.0 \\times 10^{-3}\\) , \\(Q_v = 5\\) , \\(R=3.18\\) , and \\(T=293\\) , calculate \\(n\\) .","title":"Problem"},{"location":"03-The-Python-REPL/03-03-Variables/#solution","text":"Use variables to assign a value to each one of the constants in the problem and calculate \\(n\\) . >>> nv = 2.0e-3 >>> Qv = 5 >>> R = 3.18 >>> T = 293 >>> from math import exp >>> n = nv * exp ( - 1 * Qv / ( R * T )) >>> n 0.0019892961379660424","title":"Solution"},{"location":"03-The-Python-REPL/03-04-String-Operations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); String Operations Strings are sequences of letters, numbers, punctuation, and spaces. Strings are defined at the Python REPL by enclosing letters, numbers, punctuation, and spaces in single quotes ' ' or double quotes \" \" . >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" In Python, string operations include concatenation (combining strings), logical comparisons (comparing strings) and indexing (pulling specific characters out of strings). String Concatenation Strings can be concatenated or combined using the + operator. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + another_word + third_word >>> all_words 'Solutionanother solution3rd solution!' To include spaces in the concatenated string, add a string which just contains one space \" \" in between each string you combine. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + \" \" + another_word + \" \" + third_word >>> all_words 'Solution another solution 3rd solution!' String Comparison Strings can be compared using the comparison operator; the double equals sign == . Note the comparison operator (double equals == ) is not the same as the assignment operator, a single equals sign = . >>> name1 = 'Gabby' >>> name2 = 'Gabby' >>> name1 == name2 True >>> name1 = 'Gabby' >>> name2 = 'Maelle' >>> name1 == name2 False Capital letters and lower case letters are different characters in Python. A string with the same letters, but different capitalization are not equivalent. >>> name1 = 'Maelle' >>> name2 = 'maelle' >>> name1 == name2 False","title":"3.4 String Operations"},{"location":"03-The-Python-REPL/03-04-String-Operations/#string-operations","text":"Strings are sequences of letters, numbers, punctuation, and spaces. Strings are defined at the Python REPL by enclosing letters, numbers, punctuation, and spaces in single quotes ' ' or double quotes \" \" . >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" In Python, string operations include concatenation (combining strings), logical comparisons (comparing strings) and indexing (pulling specific characters out of strings).","title":"String Operations"},{"location":"03-The-Python-REPL/03-04-String-Operations/#string-concatenation","text":"Strings can be concatenated or combined using the + operator. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + another_word + third_word >>> all_words 'Solutionanother solution3rd solution!' To include spaces in the concatenated string, add a string which just contains one space \" \" in between each string you combine. >>> word = \"Solution\" >>> another_word = \"another solution\" >>> third_word = \"3rd solution!\" >>> all_words = word + \" \" + another_word + \" \" + third_word >>> all_words 'Solution another solution 3rd solution!'","title":"String Concatenation"},{"location":"03-The-Python-REPL/03-04-String-Operations/#string-comparison","text":"Strings can be compared using the comparison operator; the double equals sign == . Note the comparison operator (double equals == ) is not the same as the assignment operator, a single equals sign = . >>> name1 = 'Gabby' >>> name2 = 'Gabby' >>> name1 == name2 True >>> name1 = 'Gabby' >>> name2 = 'Maelle' >>> name1 == name2 False Capital letters and lower case letters are different characters in Python. A string with the same letters, but different capitalization are not equivalent. >>> name1 = 'Maelle' >>> name2 = 'maelle' >>> name1 == name2 False","title":"String Comparison"},{"location":"03-The-Python-REPL/03-05-Print-Statements/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Print Statements One built-in function in Python is print() . The value or expression inside of the parenthesis of a print() function \"prints\" out to the REPL when the print() function is called. An example using the print() function is below: >>> name = \"Maelle\" >>> print ( \"Your name is: \" ) Your name is : >>> print ( name ) Maelle Remember that strings must be enclosed by quotation marks. The following command produces an error. >>> print ( Maelle ) NameError : name 'Maelle' is not defined This error is corrected by surrounding the string Maelle with quotation marks. >>> print ( \"Maelle\" ) Maelle Expressions passed to the print() function are evaluated before they are printed out. For instance, the sum of two numbers can be shown with the print() function. >>> print ( 1 + 2 ) 3 If you want to see the text 1+2 , you need to define \"1+2\" as a string and print out the string \"1+2\" instead. >>> print ( \"1+2\" ) 1 + 2 Strings can be concatenated (combined) inside of a print() statement. >>> name = Maelle >>> print ( \"Your name is: \" + name ) Your name is Maelle The print() function also prints out individual expressions one after another with a space in between when the expressions are placed inside the print() function and separated by a comma. >>> print ( \"Name:\" , \"Maelle\" , \"Age\" , 2 + 5 ) Name : Maelle Age 7","title":"3.5 Print Statements"},{"location":"03-The-Python-REPL/03-05-Print-Statements/#print-statements","text":"One built-in function in Python is print() . The value or expression inside of the parenthesis of a print() function \"prints\" out to the REPL when the print() function is called. An example using the print() function is below: >>> name = \"Maelle\" >>> print ( \"Your name is: \" ) Your name is : >>> print ( name ) Maelle Remember that strings must be enclosed by quotation marks. The following command produces an error. >>> print ( Maelle ) NameError : name 'Maelle' is not defined This error is corrected by surrounding the string Maelle with quotation marks. >>> print ( \"Maelle\" ) Maelle Expressions passed to the print() function are evaluated before they are printed out. For instance, the sum of two numbers can be shown with the print() function. >>> print ( 1 + 2 ) 3 If you want to see the text 1+2 , you need to define \"1+2\" as a string and print out the string \"1+2\" instead. >>> print ( \"1+2\" ) 1 + 2 Strings can be concatenated (combined) inside of a print() statement. >>> name = Maelle >>> print ( \"Your name is: \" + name ) Your name is Maelle The print() function also prints out individual expressions one after another with a space in between when the expressions are placed inside the print() function and separated by a comma. >>> print ( \"Name:\" , \"Maelle\" , \"Age\" , 2 + 5 ) Name : Maelle Age 7","title":"Print Statements"},{"location":"03-The-Python-REPL/03-06-Summary/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Summary In this chapter, you learned how to use the Python REPL, also called the Python prompt, to solve problems. You learned how to do arithmetic, powers and logarithms, trigonometry and save values to variables. Operations on strings were introduced including concatenation and comparison. In the last section of the chapter, Python's print() function was introduced. Key Terms and Concepts REPL Python REPL Python Prompt prompt Python Interpreter interpreter operator mathematical operator import module Python Standard Library Standard Library syntax functions command line error variable assignment operator comparison operator concatenate equivalent Summary of Python Functions and Commands Below is a summary of the functions and operators used in this chapter: Arithmetic Arithmetic Operator Description + addition - subtraction * multiplication / division ** exponents _ answer in memory Trigonometry Trig Function Description from math import * sin sine of an angle in radians cos cosine of an angle in radians tan tangent of an angle in radians pi mathematical constant \\(\\pi\\) degrees convert radians to degrees radians convert degrees to radians asin inverse sine acos inverse cosine atan inverse tangent Logarithms and Exponents Logarithms and Exponent Function Description from math import * log log base e, natural log log10 log base 10 exp \\(e^{power}\\) e mathematical constant \\(e\\) pow(x,y) x raised to the y power sqrt square root Statistics Statistics Function Description from statistics import * mean mean (average) median median (middle value) mode mode (most often) stdev standard deviation of a sample pstdev standard deviation of a population","title":"3.6 Summary"},{"location":"03-The-Python-REPL/03-06-Summary/#summary","text":"In this chapter, you learned how to use the Python REPL, also called the Python prompt, to solve problems. You learned how to do arithmetic, powers and logarithms, trigonometry and save values to variables. Operations on strings were introduced including concatenation and comparison. In the last section of the chapter, Python's print() function was introduced.","title":"Summary"},{"location":"03-The-Python-REPL/03-06-Summary/#key-terms-and-concepts","text":"REPL Python REPL Python Prompt prompt Python Interpreter interpreter operator mathematical operator import module Python Standard Library Standard Library syntax functions command line error variable assignment operator comparison operator concatenate equivalent","title":"Key Terms and Concepts"},{"location":"03-The-Python-REPL/03-06-Summary/#summary-of-python-functions-and-commands","text":"Below is a summary of the functions and operators used in this chapter:","title":"Summary of Python Functions and Commands"},{"location":"03-The-Python-REPL/03-06-Summary/#arithmetic","text":"Arithmetic Operator Description + addition - subtraction * multiplication / division ** exponents _ answer in memory","title":"Arithmetic"},{"location":"03-The-Python-REPL/03-06-Summary/#trigonometry","text":"Trig Function Description from math import * sin sine of an angle in radians cos cosine of an angle in radians tan tangent of an angle in radians pi mathematical constant \\(\\pi\\) degrees convert radians to degrees radians convert degrees to radians asin inverse sine acos inverse cosine atan inverse tangent","title":"Trigonometry"},{"location":"03-The-Python-REPL/03-06-Summary/#logarithms-and-exponents","text":"Logarithms and Exponent Function Description from math import * log log base e, natural log log10 log base 10 exp \\(e^{power}\\) e mathematical constant \\(e\\) pow(x,y) x raised to the y power sqrt square root","title":"Logarithms and Exponents"},{"location":"03-The-Python-REPL/03-06-Summary/#statistics","text":"Statistics Function Description from statistics import * mean mean (average) median median (middle value) mode mode (most often) stdev standard deviation of a sample pstdev standard deviation of a population","title":"Statistics"},{"location":"03-The-Python-REPL/03-07-Review-Questions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Review Questions Arithmetic Q03.01 \\(2 + \\frac{1}{2}\\) Q03.02 \\(4 \\times 2 + \\frac{2}{4}\\) Q03.03 \\(\\frac{5}{2} \\times 3 + 4\\) Q03.04 \\(4^2 + 3\\) Q03.05 \\(\\sqrt{16}\\) Q03.06 \\(3^{4-5}\\) Q03.07 \\(\\frac{1+3+5}{2+4+6}\\) Q03.08 \\(1 - 2 + \\frac{9}{6} -3 + 5\\) Q03.09 \\((3 + 5 -2)^{2/3}\\) Q03.10 \\(\\frac{5+3}{2 \\times 5}\\) Q03.11 \\(\\sqrt{6^2 + 4}\\) Q03.12 \\(1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5}\\) Strings Q03.15 Define the string \"Problem\" Q03.16 Two strings \"Problem\" and \"Solving with Python\". Combine these strings to produce \"Problem Solving with Python\". Hint: Don't forget the space. Q03.17 Compare the strings \"Problem\" and \"problem\" with the comparison operator == . Explain the result. Q03.18 Compare the output of the code 1 + 2 == 3 and '1 + 2' == '3' . Explain why the output is different. Trigonometry Q03.30 Find the sine of \\(0\\) , \\(\\pi/4\\) , \\(\\pi/2\\) , \\(3\\pi/4\\) , and \\(\\pi\\) . Q03.31 Find the cosine of 0 degrees, 30 degrees, 60 degrees, and 90 degrees. Q03.32 Find the tangent of 3/4, 5/12, and -8/6. Q03.33 Find the sin of 0.1 radians. Then find the arcsine of the result and see if it equals 0.1 radians. Q03.34 The U.S. Forest Service can use trigonometry to find the height of trees. The height of a tree, \\(h\\) is equal to the distance \\(d\\) between an observer and the base of the tree multiplied by the tangent of the angle \\(\\theta\\) between looking straight along the ground and looking up at the top of the tree according to the formula: \\[ h = d\\tan(\\theta) \\] If a Forest Service ranger is 20 feet away from the base of a douglas fir tree and looks up at a 63 degree angle relative to straight ahead to see the top of the tree, what is the height of the douglas fir tree? Q03.35 The tangent of an angle is equal to the sine of the angle divided by the cosine of the angle. Make two calculations, one for the tangent of -29 degrees and another calculation for the sine of -29 degrees divided by the cosine of -29 degrees. Do you observe the same output? Q03.36 A simple model of water level based on tides (assuming high tide is at midnight) is: \\[ h = (4.8)\\sin(\\pi/6)(t+3)+5.1 \\] Where \\(h\\) is the water height and \\(t\\) is the number of hours since midnight. Using this model, calculate the water level \\(h\\) at 6am ( \\(t=6\\) hours since midnight). Q03.37 The x-component of a force \\(F_x\\) is equal to the magnitude of the force \\(|\\vec{F}|\\) multiplied by the cosine of the angle \\(\\theta\\) of the force relative to the positive x-axis. \\[ F_x = |\\vec{F}|\\cos(\\theta) \\] If the magnitude of a force \\(|\\vec{F}| = 12.4\\) and the force acts at \\(\\theta=110\\) degrees relative to the positive x-axis, what is the x-component of the force \\(F_x\\) ? Q03.38 The distance \\(d\\) a free-thrown projectile travels is dependent on the projectile's initial velocity \\(v_0\\) , the acceleration due to gravity \\(g=9.81 m/s^2\\) and the angle \\(\\theta\\) at which the project is launched according to: \\[ d = \\frac{{v_0}^2}{g} \\sin(2\\theta) \\] If a projectile is launched at a 12 degree angle with an initial velocity of 150 m/s, how far will the projectile travel? Logarithms and Exponents Q03.41 Show that the natural log of Euler's number, \\(\\ln(e)\\) , is equal to one. Q03.42 Logarithms turn multiplication into addition. Complete both of the calculations below to see if the expressions are equal to each other: \\[ \\log(87.1 \\times 210 \\times 10^{3}) \\] \\[ \\log(87.1) + \\log(210) + \\log(10^{3}) \\] Q03.43 Logarithms turn exponents into multiplication and multiplication into addition. Complete both of the calculations below to see if the expressions are equal. Remember, Python has a couple of log functions including log() and log10() . \\[ \\log(6.02 \\times 10^{23}) \\] \\[ 23+\\log(6.02) \\] Q03.44 Python's math module has the natural log ( \\(\\ln\\) ) function math.log() and the log (base 10) function math.log10() . If you want to find the log with an arbitrary base, \\(b\\) , of a number \\(n\\) , you can use a ratio of natural logarithms (log base \\(e\\) ) according to: \\[ \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)} \\] Calculate the base 4 logarithm of \\(3.9 \\times 10^{-9}\\) \\[ log_{4}(3.9 \\times 10^{-9}) \\] Q03.45 The magnitude of a vector \\(|\\vec{v}|\\) is equal to the square root of the sum of the squares of the vector's components \\(v_x\\) , \\(v_y\\) , and \\(v_z\\) according to: \\[ |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2} \\] What is the magnitude of a vector \\(\\vec{v}\\) that has components \\(v_x = 76.3\\) , \\(v_y = 70.9\\) , \\(v_z = 93.6\\) ? Q03.46 Moore's Law, a relationship that states the number of transistors that fit on a microchip doubles every two years can be modeled as: \\[ P_n = P_0 \\times 2^n \\] Where \\(P_0\\) is the original number of transistors on a microchip and \\(P_n\\) is the number of transistors on a microchip after \\(n\\) number of years since the original microchip. If the original microchip has 1000 transistors, how many transistors are projected to be on a microchip 40 years later according to Moore's Law? Variables in Calculations Q03.71 \\(a = 2\\) , \\(b = 3\\) , calculate \\(\\frac{4}{5}(a^2 - b^3)\\) Q03.72 The area of a circle, \\(a\\) , is dependent on the circle's radius, \\(r\\) , according to: \\[ a=\\pi r^2 \\] What is the area of a circle with radius \\(r=4\\) ? Q03.73 The area of a circle, \\(a\\) , is dependent on the circle's diameter, \\(d\\) , according to: \\[ a=\\pi (\\frac{d}{2})^2 \\] What is the area of a circle with diameter \\(d=6\\) ? Q03.74 The volume of a sphere, \\(v\\) , is dependent on the sphere's radius, \\(r\\) , according to: \\[ v=(\\frac{4}{3})\\pi r^3 \\] What is the volume of a sphere with radius \\(r=1.5\\) ? Q03.75 The volume of a cylinder, \\(v\\) , is dependent on the cylinder's radius, \\(r\\) , and height, \\(h\\) , according to: \\[ v=\\pi r^2 h \\] What is the volume of a cylinder with radius \\(r=5\\) and height \\(h=10\\) ? Q03.76 The surface area of a sphere, \\(a_s\\) is related to the sphere's radius, \\(r\\) , according to: \\[ a_s=4\\pi r^2 \\] What is the surface area \\(a_s\\) of a sphere with radius \\(r=2.5\\) ? Q03.77 The general equation for the distance, \\(d\\) , that a free falling body travels (neglecting air resistance) is: \\[ d = \\frac{1}{2}gt^2 \\] \\(g\\) is the acceleration due to gravity and \\(t\\) is the fall time. Assume the acceleration due to gravity \\(g = 9.81\\) . How far (what distance) will a ball fall in time \\(t = 12\\) ? Q03.78 The general equation for the fall time, \\(t\\) , that a free falling body takes (neglecting air resistance) to cover a distance, \\(d\\) is: \\[t = \\sqrt{\\frac{d}{0.5g}}\\] \\(g\\) is the acceleration due to gravity. Assume the acceleration due to gravity \\(g = 9.81\\) . How long (what time) will it take a base jumper to fall distance \\(d = 2000\\) ? Q03.79 The value of an investment \\(v\\) compounded annually at an interest rate of \\(r\\%\\) after \\(n\\) years is dependent on the original investment \\(P\\) according to: \\[ v = P(1 + r/100)^n \\] If \\(P=1000\\) dollars at a rate of \\(r=7\\%\\) , what will the value \\(v\\) be after \\(n=20\\) years? Q03.80 The original principal \\(P\\) needed to produce a total savings of value \\(v\\) at a rate of \\(r\\%\\) over \\(n\\) years is calculated by: \\[ P = \\frac{v}{(1+r/100)^n} \\] What is the principal \\(P\\) needed to save one million dollars at a rate \\(r=10\\%\\) over \\(n=40\\) years? Q03.81 Electrical power \\(P\\) is related to current \\(I\\) and resistance \\(R\\) according to: \\[ P = I^2R\\] An electrical load with a resistance \\(R = 10,000\\) running at a current \\(I=0.200\\) draws how much power \\(P\\) ? Errors, Explanations, and Solutions For each of the problems below, run the line of code. Then explain the error in your own words. Give an explanation more specific than invalid syntax . Then suggest and run a line of code that fixes the error. Q03.91 >>> 9 x 10 Q03.92 >>> 1 1 / 2 + 2 2 / 3 Q03.93 >>> 3 cos ( 35 ) Q03.94 >>> 8.31 x 10 ^ 9 Q03.95 >>> ( 2 + 3 ) ** ( 2 - 3 e ( 4 ) Q03.96 >>> 7 % + 8 % + 9 % Q03.97 >>> ( - ) 54.2 + 9.2 Q03.98 >>> '5' / '4' Q03.99 >>> ln ( e ) - log ( 10 )","title":"3.7 Review Questions"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#review-questions","text":"","title":"Review Questions"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#arithmetic","text":"Q03.01 \\(2 + \\frac{1}{2}\\) Q03.02 \\(4 \\times 2 + \\frac{2}{4}\\) Q03.03 \\(\\frac{5}{2} \\times 3 + 4\\) Q03.04 \\(4^2 + 3\\) Q03.05 \\(\\sqrt{16}\\) Q03.06 \\(3^{4-5}\\) Q03.07 \\(\\frac{1+3+5}{2+4+6}\\) Q03.08 \\(1 - 2 + \\frac{9}{6} -3 + 5\\) Q03.09 \\((3 + 5 -2)^{2/3}\\) Q03.10 \\(\\frac{5+3}{2 \\times 5}\\) Q03.11 \\(\\sqrt{6^2 + 4}\\) Q03.12 \\(1 + 9 \\times \\frac{8}{4^2} + 1^{3-4} \\times \\frac{1}{2.5}\\)","title":"Arithmetic"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#strings","text":"Q03.15 Define the string \"Problem\" Q03.16 Two strings \"Problem\" and \"Solving with Python\". Combine these strings to produce \"Problem Solving with Python\". Hint: Don't forget the space. Q03.17 Compare the strings \"Problem\" and \"problem\" with the comparison operator == . Explain the result. Q03.18 Compare the output of the code 1 + 2 == 3 and '1 + 2' == '3' . Explain why the output is different.","title":"Strings"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#trigonometry","text":"Q03.30 Find the sine of \\(0\\) , \\(\\pi/4\\) , \\(\\pi/2\\) , \\(3\\pi/4\\) , and \\(\\pi\\) . Q03.31 Find the cosine of 0 degrees, 30 degrees, 60 degrees, and 90 degrees. Q03.32 Find the tangent of 3/4, 5/12, and -8/6. Q03.33 Find the sin of 0.1 radians. Then find the arcsine of the result and see if it equals 0.1 radians. Q03.34 The U.S. Forest Service can use trigonometry to find the height of trees. The height of a tree, \\(h\\) is equal to the distance \\(d\\) between an observer and the base of the tree multiplied by the tangent of the angle \\(\\theta\\) between looking straight along the ground and looking up at the top of the tree according to the formula: \\[ h = d\\tan(\\theta) \\] If a Forest Service ranger is 20 feet away from the base of a douglas fir tree and looks up at a 63 degree angle relative to straight ahead to see the top of the tree, what is the height of the douglas fir tree? Q03.35 The tangent of an angle is equal to the sine of the angle divided by the cosine of the angle. Make two calculations, one for the tangent of -29 degrees and another calculation for the sine of -29 degrees divided by the cosine of -29 degrees. Do you observe the same output? Q03.36 A simple model of water level based on tides (assuming high tide is at midnight) is: \\[ h = (4.8)\\sin(\\pi/6)(t+3)+5.1 \\] Where \\(h\\) is the water height and \\(t\\) is the number of hours since midnight. Using this model, calculate the water level \\(h\\) at 6am ( \\(t=6\\) hours since midnight). Q03.37 The x-component of a force \\(F_x\\) is equal to the magnitude of the force \\(|\\vec{F}|\\) multiplied by the cosine of the angle \\(\\theta\\) of the force relative to the positive x-axis. \\[ F_x = |\\vec{F}|\\cos(\\theta) \\] If the magnitude of a force \\(|\\vec{F}| = 12.4\\) and the force acts at \\(\\theta=110\\) degrees relative to the positive x-axis, what is the x-component of the force \\(F_x\\) ? Q03.38 The distance \\(d\\) a free-thrown projectile travels is dependent on the projectile's initial velocity \\(v_0\\) , the acceleration due to gravity \\(g=9.81 m/s^2\\) and the angle \\(\\theta\\) at which the project is launched according to: \\[ d = \\frac{{v_0}^2}{g} \\sin(2\\theta) \\] If a projectile is launched at a 12 degree angle with an initial velocity of 150 m/s, how far will the projectile travel?","title":"Trigonometry"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#logarithms-and-exponents","text":"Q03.41 Show that the natural log of Euler's number, \\(\\ln(e)\\) , is equal to one. Q03.42 Logarithms turn multiplication into addition. Complete both of the calculations below to see if the expressions are equal to each other: \\[ \\log(87.1 \\times 210 \\times 10^{3}) \\] \\[ \\log(87.1) + \\log(210) + \\log(10^{3}) \\] Q03.43 Logarithms turn exponents into multiplication and multiplication into addition. Complete both of the calculations below to see if the expressions are equal. Remember, Python has a couple of log functions including log() and log10() . \\[ \\log(6.02 \\times 10^{23}) \\] \\[ 23+\\log(6.02) \\] Q03.44 Python's math module has the natural log ( \\(\\ln\\) ) function math.log() and the log (base 10) function math.log10() . If you want to find the log with an arbitrary base, \\(b\\) , of a number \\(n\\) , you can use a ratio of natural logarithms (log base \\(e\\) ) according to: \\[ \\log_b(n) = \\frac{\\ln(n)}{\\ln(b)} \\] Calculate the base 4 logarithm of \\(3.9 \\times 10^{-9}\\) \\[ log_{4}(3.9 \\times 10^{-9}) \\] Q03.45 The magnitude of a vector \\(|\\vec{v}|\\) is equal to the square root of the sum of the squares of the vector's components \\(v_x\\) , \\(v_y\\) , and \\(v_z\\) according to: \\[ |\\vec{v}| = \\sqrt{{v_x}^2 + {v_y}^2 + {v_z}^2} \\] What is the magnitude of a vector \\(\\vec{v}\\) that has components \\(v_x = 76.3\\) , \\(v_y = 70.9\\) , \\(v_z = 93.6\\) ? Q03.46 Moore's Law, a relationship that states the number of transistors that fit on a microchip doubles every two years can be modeled as: \\[ P_n = P_0 \\times 2^n \\] Where \\(P_0\\) is the original number of transistors on a microchip and \\(P_n\\) is the number of transistors on a microchip after \\(n\\) number of years since the original microchip. If the original microchip has 1000 transistors, how many transistors are projected to be on a microchip 40 years later according to Moore's Law?","title":"Logarithms and Exponents"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#variables-in-calculations","text":"Q03.71 \\(a = 2\\) , \\(b = 3\\) , calculate \\(\\frac{4}{5}(a^2 - b^3)\\) Q03.72 The area of a circle, \\(a\\) , is dependent on the circle's radius, \\(r\\) , according to: \\[ a=\\pi r^2 \\] What is the area of a circle with radius \\(r=4\\) ? Q03.73 The area of a circle, \\(a\\) , is dependent on the circle's diameter, \\(d\\) , according to: \\[ a=\\pi (\\frac{d}{2})^2 \\] What is the area of a circle with diameter \\(d=6\\) ? Q03.74 The volume of a sphere, \\(v\\) , is dependent on the sphere's radius, \\(r\\) , according to: \\[ v=(\\frac{4}{3})\\pi r^3 \\] What is the volume of a sphere with radius \\(r=1.5\\) ? Q03.75 The volume of a cylinder, \\(v\\) , is dependent on the cylinder's radius, \\(r\\) , and height, \\(h\\) , according to: \\[ v=\\pi r^2 h \\] What is the volume of a cylinder with radius \\(r=5\\) and height \\(h=10\\) ? Q03.76 The surface area of a sphere, \\(a_s\\) is related to the sphere's radius, \\(r\\) , according to: \\[ a_s=4\\pi r^2 \\] What is the surface area \\(a_s\\) of a sphere with radius \\(r=2.5\\) ? Q03.77 The general equation for the distance, \\(d\\) , that a free falling body travels (neglecting air resistance) is: \\[ d = \\frac{1}{2}gt^2 \\] \\(g\\) is the acceleration due to gravity and \\(t\\) is the fall time. Assume the acceleration due to gravity \\(g = 9.81\\) . How far (what distance) will a ball fall in time \\(t = 12\\) ? Q03.78 The general equation for the fall time, \\(t\\) , that a free falling body takes (neglecting air resistance) to cover a distance, \\(d\\) is: \\[t = \\sqrt{\\frac{d}{0.5g}}\\] \\(g\\) is the acceleration due to gravity. Assume the acceleration due to gravity \\(g = 9.81\\) . How long (what time) will it take a base jumper to fall distance \\(d = 2000\\) ? Q03.79 The value of an investment \\(v\\) compounded annually at an interest rate of \\(r\\%\\) after \\(n\\) years is dependent on the original investment \\(P\\) according to: \\[ v = P(1 + r/100)^n \\] If \\(P=1000\\) dollars at a rate of \\(r=7\\%\\) , what will the value \\(v\\) be after \\(n=20\\) years? Q03.80 The original principal \\(P\\) needed to produce a total savings of value \\(v\\) at a rate of \\(r\\%\\) over \\(n\\) years is calculated by: \\[ P = \\frac{v}{(1+r/100)^n} \\] What is the principal \\(P\\) needed to save one million dollars at a rate \\(r=10\\%\\) over \\(n=40\\) years? Q03.81 Electrical power \\(P\\) is related to current \\(I\\) and resistance \\(R\\) according to: \\[ P = I^2R\\] An electrical load with a resistance \\(R = 10,000\\) running at a current \\(I=0.200\\) draws how much power \\(P\\) ?","title":"Variables in Calculations"},{"location":"03-The-Python-REPL/03-07-Review-Questions/#errors-explanations-and-solutions","text":"For each of the problems below, run the line of code. Then explain the error in your own words. Give an explanation more specific than invalid syntax . Then suggest and run a line of code that fixes the error. Q03.91 >>> 9 x 10 Q03.92 >>> 1 1 / 2 + 2 2 / 3 Q03.93 >>> 3 cos ( 35 ) Q03.94 >>> 8.31 x 10 ^ 9 Q03.95 >>> ( 2 + 3 ) ** ( 2 - 3 e ( 4 ) Q03.96 >>> 7 % + 8 % + 9 % Q03.97 >>> ( - ) 54.2 + 9.2 Q03.98 >>> '5' / '4' Q03.99 >>> ln ( e ) - log ( 10 )","title":"Errors, Explanations, and Solutions"},{"location":"04-Data-Types-and-Variables/04-01-Introduction/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Data Types and Variables Introduction This chapter is about Python data types and variables. Python has many built-in data types such as integers, floats, booleans, strings, and lists. By the end of this chapter you will be able to: Explain the difference between Python's built-in data types Define variables with the assignment operator = Create variables with different data types Use Python's type() function to determine an object's data type Compare variables with the comparison operator == Convert variables from one data type to another Work with integers, floats and complex numbers Understand the boolean data type Create and modify lists, dictionaries, and tuples Index and slice strings, lists, and tuples","title":"4.1 Introduction"},{"location":"04-Data-Types-and-Variables/04-01-Introduction/#data-types-and-variables","text":"","title":"Data Types and Variables"},{"location":"04-Data-Types-and-Variables/04-01-Introduction/#introduction","text":"This chapter is about Python data types and variables. Python has many built-in data types such as integers, floats, booleans, strings, and lists. By the end of this chapter you will be able to: Explain the difference between Python's built-in data types Define variables with the assignment operator = Create variables with different data types Use Python's type() function to determine an object's data type Compare variables with the comparison operator == Convert variables from one data type to another Work with integers, floats and complex numbers Understand the boolean data type Create and modify lists, dictionaries, and tuples Index and slice strings, lists, and tuples","title":"Introduction"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Numeric Data Types Python has many useful built-in data types . Python variables can store different types of data based on a variable's data type. A variable's data type is created dynamically, without the need to explicitly define a data type when the variable is created. It is useful for problem solvers to understand a couple of Python's core data types to write well-constructed code. A review of variable assignment in Python Recall from the previous chapter that variables in Python are defined with the assignment operator, the equals sign = . To define a variable in Python, the variable name is written first, then the assignment operator = followed by a value or expression. The general syntax to assign a value to variable name is below: variable_name = value Variable names in Python must adhere to the following rules: variable names must start with a letter variable names can only contain letters, numbers and the underscore character _ variable names can not contain spaces or punctuation variable names are not enclosed in quotes or brackets Below is a discussion of a few different built-in data types in Python. Integers Integers are one of the Python data types. An integer is a whole number, negative, positive or zero. In Python, integer variables are defined by assigning a whole number to a variable. Python's type() function can be used to determine the data type of a variable. >>> a = 5 >>> type ( a ) < class ' int '> The output <class 'int'> indicates the variable a is an integer. Integers can be negative or zero. >>> b = - 2 >>> type ( b ) < class ' int '> >>> z = 0 >>> type ( z ) < class ' int '> Floating Point Numbers Floating point numbers or floats are another numeric data type. Floats are decimals, positive, negative, and zero. Floats can also be represented by numbers in scientific notation which contain exponents. Both a lower case e or an upper case E can be used to define floats in scientific notation. In Python, a float can be defined using a decimal point . when a variable is assigned. >>> c = 6.2 >>> type ( c ) < class ' float '> >>> d = - 0.03 >>> type ( d ) < class ' float '> >>> Na = 6.02e23 >>> Na 6.02e+23 >>> type ( Na ) < class ' float '> To define a variable as a float instead of an integer, even if the variable is assigned a whole number, a trailing decimal point . is used. Note the difference when a decimal point . comes after a whole number: >>> g = 5 >>> type ( g ) < class ' int '> >>> f = 5. >>> type ( r ) < class ' float '> Complex Numbers Another useful numeric data type for problem solvers is the complex number data type. A complex number is defined in Python using a real component + an imaginary component j . The letter j must be used to denote the imaginary component. Using the letter i to define a complex number returns an error in Python. >>> comp = 4 + 2 j >>> type ( comp ) < class ' complex '> >>> comp2 = 4 + 2 i ^ SyntaxError : invalid syntax Imaginary numbers can be added to integers and floats. >>> intgr = 3 >>> type ( intgr ) < class ' int '> >>> comp_sum = comp + intgr >>> print ( comp_sum ) ( 7 + 2 j ) >>> flt = 2.1 >>> comp_sum = comp + flt >>> print ( comp_sum ) ( 6.1 + 2 j )","title":"4.2 Data Types and Variables"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/#numeric-data-types","text":"Python has many useful built-in data types . Python variables can store different types of data based on a variable's data type. A variable's data type is created dynamically, without the need to explicitly define a data type when the variable is created. It is useful for problem solvers to understand a couple of Python's core data types to write well-constructed code.","title":"Numeric Data Types"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/#a-review-of-variable-assignment-in-python","text":"Recall from the previous chapter that variables in Python are defined with the assignment operator, the equals sign = . To define a variable in Python, the variable name is written first, then the assignment operator = followed by a value or expression. The general syntax to assign a value to variable name is below: variable_name = value Variable names in Python must adhere to the following rules: variable names must start with a letter variable names can only contain letters, numbers and the underscore character _ variable names can not contain spaces or punctuation variable names are not enclosed in quotes or brackets Below is a discussion of a few different built-in data types in Python.","title":"A review of variable assignment in Python"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/#integers","text":"Integers are one of the Python data types. An integer is a whole number, negative, positive or zero. In Python, integer variables are defined by assigning a whole number to a variable. Python's type() function can be used to determine the data type of a variable. >>> a = 5 >>> type ( a ) < class ' int '> The output <class 'int'> indicates the variable a is an integer. Integers can be negative or zero. >>> b = - 2 >>> type ( b ) < class ' int '> >>> z = 0 >>> type ( z ) < class ' int '>","title":"Integers"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/#floating-point-numbers","text":"Floating point numbers or floats are another numeric data type. Floats are decimals, positive, negative, and zero. Floats can also be represented by numbers in scientific notation which contain exponents. Both a lower case e or an upper case E can be used to define floats in scientific notation. In Python, a float can be defined using a decimal point . when a variable is assigned. >>> c = 6.2 >>> type ( c ) < class ' float '> >>> d = - 0.03 >>> type ( d ) < class ' float '> >>> Na = 6.02e23 >>> Na 6.02e+23 >>> type ( Na ) < class ' float '> To define a variable as a float instead of an integer, even if the variable is assigned a whole number, a trailing decimal point . is used. Note the difference when a decimal point . comes after a whole number: >>> g = 5 >>> type ( g ) < class ' int '> >>> f = 5. >>> type ( r ) < class ' float '>","title":"Floating Point Numbers"},{"location":"04-Data-Types-and-Variables/04-02-Numeric-Data-Types/#complex-numbers","text":"Another useful numeric data type for problem solvers is the complex number data type. A complex number is defined in Python using a real component + an imaginary component j . The letter j must be used to denote the imaginary component. Using the letter i to define a complex number returns an error in Python. >>> comp = 4 + 2 j >>> type ( comp ) < class ' complex '> >>> comp2 = 4 + 2 i ^ SyntaxError : invalid syntax Imaginary numbers can be added to integers and floats. >>> intgr = 3 >>> type ( intgr ) < class ' int '> >>> comp_sum = comp + intgr >>> print ( comp_sum ) ( 7 + 2 j ) >>> flt = 2.1 >>> comp_sum = comp + flt >>> print ( comp_sum ) ( 6.1 + 2 j )","title":"Complex Numbers"},{"location":"04-Data-Types-and-Variables/04-03-Boolean-Data-Type/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Boolean Data Type The boolean data type is either True or False. In Python, boolean variables are defined by the True and False keywords. >>> a = True >>> type ( a ) < class ' bool '> >>> b = False >>> type ( b ) < class ' bool '> The output <class 'bool'> indicates the variable is a boolean data type. Note the keywords True and False must have an Upper Case first letter. Using a lowercase true returns an error in Python. >>> c = true Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'true' is not defined >>> d = false Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'false' is not defined Integers and Floats as Booleans Integers and floating point numbers can be converted to the boolean data type using Python's bool() function. An int, float, or complex number set to zero returns False . An integer, float, or complex number set to any other number, positive or negative, returns True . >>> zero_int = 0 >>> bool ( zero_int ) False >>> pos_int = 1 >>> bool ( pos_int ) True >>> neg_flt = - 5.1 >>> bool ( neg_flt ) True >>> zero_flt = 0.0 >>> bool ( zero_flt ) False Boolean Arithmetic Boolean arithmetic is the arithmetic of true and false logic. A boolean or logical value can either be True or False . Boolean values can be manipulated and combined with boolean operators . Boolean operators in Python include and , or , and not . The common boolean operators in Python are below: or and not == (equivalent) != (not equivalent) In the code section below, two variables are assigned the boolean values True and False . Then these boolean values are combined and manipulated with boolean operators. >>> A = True >>> B = False >>> A or B True >>> A and B False >>> not A False >>> not B True >>> A == B False >>> A != B True Boolean operators such as and , or , and not can be combined with parenthesis to make compound boolean expressions . >>> C = False >>> A or ( C and B ) True >>> ( A and B ) or C False A summary of boolean arithmetic and boolean operators is shown in the table below: A B not A not B A == B A =! B A or B A and B T F F T F T T F F T T F F T T F T T F F T F T T F F T T T F F F","title":"4.3 Boolean Data Type"},{"location":"04-Data-Types-and-Variables/04-03-Boolean-Data-Type/#boolean-data-type","text":"The boolean data type is either True or False. In Python, boolean variables are defined by the True and False keywords. >>> a = True >>> type ( a ) < class ' bool '> >>> b = False >>> type ( b ) < class ' bool '> The output <class 'bool'> indicates the variable is a boolean data type. Note the keywords True and False must have an Upper Case first letter. Using a lowercase true returns an error in Python. >>> c = true Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'true' is not defined >>> d = false Traceback ( most recent call last ): File \"<input>\" , line 1 , in < module > NameError : name 'false' is not defined","title":"Boolean Data Type"},{"location":"04-Data-Types-and-Variables/04-03-Boolean-Data-Type/#integers-and-floats-as-booleans","text":"Integers and floating point numbers can be converted to the boolean data type using Python's bool() function. An int, float, or complex number set to zero returns False . An integer, float, or complex number set to any other number, positive or negative, returns True . >>> zero_int = 0 >>> bool ( zero_int ) False >>> pos_int = 1 >>> bool ( pos_int ) True >>> neg_flt = - 5.1 >>> bool ( neg_flt ) True >>> zero_flt = 0.0 >>> bool ( zero_flt ) False","title":"Integers and Floats as Booleans"},{"location":"04-Data-Types-and-Variables/04-03-Boolean-Data-Type/#boolean-arithmetic","text":"Boolean arithmetic is the arithmetic of true and false logic. A boolean or logical value can either be True or False . Boolean values can be manipulated and combined with boolean operators . Boolean operators in Python include and , or , and not . The common boolean operators in Python are below: or and not == (equivalent) != (not equivalent) In the code section below, two variables are assigned the boolean values True and False . Then these boolean values are combined and manipulated with boolean operators. >>> A = True >>> B = False >>> A or B True >>> A and B False >>> not A False >>> not B True >>> A == B False >>> A != B True Boolean operators such as and , or , and not can be combined with parenthesis to make compound boolean expressions . >>> C = False >>> A or ( C and B ) True >>> ( A and B ) or C False A summary of boolean arithmetic and boolean operators is shown in the table below: A B not A not B A == B A =! B A or B A and B T F F T F T T F F T T F F T T F T T F F T F T T F F T T T F F F","title":"Boolean Arithmetic"},{"location":"04-Data-Types-and-Variables/04-04-Strings/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Strings Another built-in Python data type is strings . Strings are sequences of letters, numbers, symbols, and spaces. In Python, strings can be almost any length and can contain spaces. Strings are assigned in Python using single quotation marks ' ' or double quotation marks \" \" . Python strings can contain blank spaces. A blank space is a valid character in a Python string. >>> string = 'z' >>>> type ( string ) < class ' str '> >>> string = \"Engineers\" >>> type ( string ) < class ' str '> The output <class 'str'> indicates the variable is a string. Numbers as Strings Numbers and decimals can be defined as strings too. If a decimal number is defined using quotes ' ' , the number is saved as a string rather than as a float. Integers defined using quotes become strings as well. >>> num = '5.2' >>> type ( num ) < class ' str '> >>> num = '2' >>> type ( num ) < class ' str '> Strings as Boolean Values Strings can be converted to boolean values (converted to True or False). The empty string \"\" returns as False . All other strings convert to True . >>> name = \"Maelle\" >>> bool ( name ) True >>> empty = \"\" >>> bool ( empty ) False Note, a string that contains just one space ( \" \" ) is not empty. It contains the space character. Therefore a string made up of just one space converts to True . >>> space = \" \" >>> bool ( space ) True String Indexing String indexing is the process of pulling out specific characters from a string in a particular order. In Python, strings are indexed using square brackets [ ] . An important point to remember: Python counting starts at 0 and ends at n-1 Consider the word below. Solution The letter S is at index zero, the letter o is at index one. The last letter of the word Solution is n . n is in the seventh index. Even though the word Solution has eight letters, the last letter is in the seventh index. This is because Python indexing starts at 0 and ends at n-1 . >>> word = 'Solution' >>> word [ 0 ] 'S' >>> word [ 1 ] 'o' >>> word [ 7 ] 'n' If the eighth index of the word Solution is called, an error is returned. >>> word [ 8 ] IndexError : string index out of range Negative Indexing Negative indexes start from the last character in a string and count down to the first character in a string. Place a negative number inside of the square brackets to pull a character out of a string starting from the end of the string. >>> word [ - 1 ] 'n' >>> word [ - 2 ] 'o' String Slicing String slicing is an operation to pull out a sequence of characters from a string. In Python, a colon on the inside of the square brackets between two numbers in a slicing operation indicates through . If the index [0:3] is called, the characters at positions 0 through 3 are returned. Remember Python counting starts at 0 and ends at n-1 . So [0:3] indicates the first through third letters, which are indexes 0 to 2 . >>> word [ 0 : 3 ] 'Sol' A colon by itself on the inside of square brackets indicates all . >>> word [:] 'Solution' When three numbers are separated by two colons inside of square brackets, the numbers represent start : stop : step . Remember that Python counting starts at 0 and ends at n-1 . >>> word [ 0 : 7 : 2 ] #start:stop:step 'Slto' When two colons are used inside of square brackets, and less than three numbers are specified, the missing numbers are set to their \"defaults\". The default start is 0 , the default stop is n-1 , and the default step is 1 . The two code lines below produce the same output since 0 is the default start and 7 (n-1) is the default stop. Both lines of code use a step of 2 . >>> word [ 0 : 7 : 2 ] 'Slto' >>> word [:: 2 ] 'Slto' Reversing a String The characters that make up a string can be reversed by using the default start and stop values and specifying a step of -1 . >>> word [:: - 1 ] 'noituloS'","title":"4.4 Strings"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#strings","text":"Another built-in Python data type is strings . Strings are sequences of letters, numbers, symbols, and spaces. In Python, strings can be almost any length and can contain spaces. Strings are assigned in Python using single quotation marks ' ' or double quotation marks \" \" . Python strings can contain blank spaces. A blank space is a valid character in a Python string. >>> string = 'z' >>>> type ( string ) < class ' str '> >>> string = \"Engineers\" >>> type ( string ) < class ' str '> The output <class 'str'> indicates the variable is a string.","title":"Strings"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#numbers-as-strings","text":"Numbers and decimals can be defined as strings too. If a decimal number is defined using quotes ' ' , the number is saved as a string rather than as a float. Integers defined using quotes become strings as well. >>> num = '5.2' >>> type ( num ) < class ' str '> >>> num = '2' >>> type ( num ) < class ' str '>","title":"Numbers as Strings"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#strings-as-boolean-values","text":"Strings can be converted to boolean values (converted to True or False). The empty string \"\" returns as False . All other strings convert to True . >>> name = \"Maelle\" >>> bool ( name ) True >>> empty = \"\" >>> bool ( empty ) False Note, a string that contains just one space ( \" \" ) is not empty. It contains the space character. Therefore a string made up of just one space converts to True . >>> space = \" \" >>> bool ( space ) True","title":"Strings as Boolean Values"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#string-indexing","text":"String indexing is the process of pulling out specific characters from a string in a particular order. In Python, strings are indexed using square brackets [ ] . An important point to remember: Python counting starts at 0 and ends at n-1 Consider the word below. Solution The letter S is at index zero, the letter o is at index one. The last letter of the word Solution is n . n is in the seventh index. Even though the word Solution has eight letters, the last letter is in the seventh index. This is because Python indexing starts at 0 and ends at n-1 . >>> word = 'Solution' >>> word [ 0 ] 'S' >>> word [ 1 ] 'o' >>> word [ 7 ] 'n' If the eighth index of the word Solution is called, an error is returned. >>> word [ 8 ] IndexError : string index out of range","title":"String Indexing"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#negative-indexing","text":"Negative indexes start from the last character in a string and count down to the first character in a string. Place a negative number inside of the square brackets to pull a character out of a string starting from the end of the string. >>> word [ - 1 ] 'n' >>> word [ - 2 ] 'o'","title":"Negative Indexing"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#string-slicing","text":"String slicing is an operation to pull out a sequence of characters from a string. In Python, a colon on the inside of the square brackets between two numbers in a slicing operation indicates through . If the index [0:3] is called, the characters at positions 0 through 3 are returned. Remember Python counting starts at 0 and ends at n-1 . So [0:3] indicates the first through third letters, which are indexes 0 to 2 . >>> word [ 0 : 3 ] 'Sol' A colon by itself on the inside of square brackets indicates all . >>> word [:] 'Solution' When three numbers are separated by two colons inside of square brackets, the numbers represent start : stop : step . Remember that Python counting starts at 0 and ends at n-1 . >>> word [ 0 : 7 : 2 ] #start:stop:step 'Slto' When two colons are used inside of square brackets, and less than three numbers are specified, the missing numbers are set to their \"defaults\". The default start is 0 , the default stop is n-1 , and the default step is 1 . The two code lines below produce the same output since 0 is the default start and 7 (n-1) is the default stop. Both lines of code use a step of 2 . >>> word [ 0 : 7 : 2 ] 'Slto' >>> word [:: 2 ] 'Slto'","title":"String Slicing"},{"location":"04-Data-Types-and-Variables/04-04-Strings/#reversing-a-string","text":"The characters that make up a string can be reversed by using the default start and stop values and specifying a step of -1 . >>> word [:: - 1 ] 'noituloS'","title":"Reversing a String"},{"location":"04-Data-Types-and-Variables/04-05-Lists/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Lists A list is a data structure in Python that can contain multiple elements of any of the other data types. A list is defined with square brackets [ ] and commas , between elements. >>> lst = [ 1 , 2 , 3 ] >>> type ( lst ) list >>> lst = [ 1 , 5.3 , '3rd_Element' ] >>> type ( lst ) list Indexing Lists Individual elements of a list can be accessed or indexed using bracket [ ] notation. Note that Python lists start with the index zero, not the index 1. For example: >>> lst = [ 'statics' , 'strengths' , 'dynamics' ] >>> lst [ 0 ] 'statics' >>> lst [ 1 ] 'strengths' >>> lst [ 2 ] 'dynamics' Remember! Python lists start indexing at [0] not at [1]. To call the elements in a list with 3 values use: lst[0], lst[1], lst[2]. Slicing Lists List slicing is an operation used to pull out a sequence of objects from a list. In Python, the syntax of list slicing is similar to the syntax of string slicing shown in a previous section. Colons : are used inside the square brackets to denote all >>> lst = [ 2 , 4 , 6 ] >>> lst [:] [ 2 , 4 , 6 ] Negative numbers can be used as indexes to call the last number of elements in the list >>> lst = [ 2 , 4 , 6 ] >>> lst [ - 1 ] 6 The colon operator can also be used to denote all up to and thru end . >>> lst = [ 2 , 4 , 6 ] >>> lst [: 2 ] # all up to 2 [ 2 , 4 ] >>> lst = [ 2 , 4 , 6 ] >>> lst [ 2 :] # 2 thru end [ 6 ] The colon operator can also be used to denote start : end + 1 . Note that indexing here is not inclusive. lst[1:3] returns the 2nd element, and 3rd element but not the fourth element even though 3 is used in the index. Remember! Python indexing is not inclusive. The last element called in an index will not be returned.","title":"4.5 Lists"},{"location":"04-Data-Types-and-Variables/04-05-Lists/#lists","text":"A list is a data structure in Python that can contain multiple elements of any of the other data types. A list is defined with square brackets [ ] and commas , between elements. >>> lst = [ 1 , 2 , 3 ] >>> type ( lst ) list >>> lst = [ 1 , 5.3 , '3rd_Element' ] >>> type ( lst ) list","title":"Lists"},{"location":"04-Data-Types-and-Variables/04-05-Lists/#indexing-lists","text":"Individual elements of a list can be accessed or indexed using bracket [ ] notation. Note that Python lists start with the index zero, not the index 1. For example: >>> lst = [ 'statics' , 'strengths' , 'dynamics' ] >>> lst [ 0 ] 'statics' >>> lst [ 1 ] 'strengths' >>> lst [ 2 ] 'dynamics' Remember! Python lists start indexing at [0] not at [1]. To call the elements in a list with 3 values use: lst[0], lst[1], lst[2].","title":"Indexing Lists"},{"location":"04-Data-Types-and-Variables/04-05-Lists/#slicing-lists","text":"List slicing is an operation used to pull out a sequence of objects from a list. In Python, the syntax of list slicing is similar to the syntax of string slicing shown in a previous section. Colons : are used inside the square brackets to denote all >>> lst = [ 2 , 4 , 6 ] >>> lst [:] [ 2 , 4 , 6 ] Negative numbers can be used as indexes to call the last number of elements in the list >>> lst = [ 2 , 4 , 6 ] >>> lst [ - 1 ] 6 The colon operator can also be used to denote all up to and thru end . >>> lst = [ 2 , 4 , 6 ] >>> lst [: 2 ] # all up to 2 [ 2 , 4 ] >>> lst = [ 2 , 4 , 6 ] >>> lst [ 2 :] # 2 thru end [ 6 ] The colon operator can also be used to denote start : end + 1 . Note that indexing here is not inclusive. lst[1:3] returns the 2nd element, and 3rd element but not the fourth element even though 3 is used in the index. Remember! Python indexing is not inclusive. The last element called in an index will not be returned.","title":"Slicing Lists"},{"location":"04-Data-Types-and-Variables/04-06-Dictionaries-and-Tuples/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Dictionaries and Tuples Besides lists, Python has two additional data structures that can store multiple objects. These data structures are dictionaries and tuples . Tuples will be discussed first. Tuples Tuples are immutable lists. Elements of a list can be modified, but elements in a tuple can only be accessed , not modified . The name tuple does not mean that only two values can be stored in this data structure. Tuples are defined in Python by enclosing elements in parenthesis ( ) separated by commas. The command below creates a tuple containing the numbers 3 , 4 , and 5 . >>> t_var = ( 3 , 4 , 5 ) >>> t_var ( 3 , 4 , 5 ) Note how the elements of a list can be modified: >>> l_var = [ 3 , 4 , 5 ] # a list >>> l_var [ 0 ] = 8 >>> l_var [ 8 , 4 , 5 ] The elements of a tuple can not be modified. If you try to assign a new value to one of the elements in a tuple, an error is returned. >>> t_var = ( 3 , 4 , 5 ) # a tuple >>> t_var [ 0 ] = 8 >>> t_var TypeError : 'tuple' object does not support item assignment To create a tuple that just contains one numerical value, the number must be followed by a comma. Without a comma, the variable is defined as a number. >>> num = ( 5 ) >>> type ( num ) int When a comma is included after the number, the variable is defined as a tuple. >>> t_var = ( 5 ,) >>> type ( t_var ) tuple Tuple indexing and slicing Just like strings and lists, tuples can be indexed and sliced. The code section below creates a tuple with 3 elements and uses indexing and slicing to certain elements out. Note that you can index out of a tuple, but you can't index into a tuple. This is because tuples are an immutable data structure. >>> t = ( 'red' , 'green' , 'blue' ) >>> t [ 2 ] 'blue' >>> t = ( 'civil' , 'mechanical' , 'electrical' ) >>> t [ 1 : 3 ] ( 'mechanical' , 'electrical' ) Dictionaries Dictionaries are made up of key: value pairs. In Python, lists and tuples are organized and accessed based on position . Dictionaries in Python are organized and accessed using keys and values . The location of a pair of keys and values stored in a Python dictionary is irrelevant. Dictionaries are defined in Python with curly braces { } . Commas separate the key-value pairs that make up the dictionary. Each key-value pair is related by a colon : . dict_name = {key1: value1, key2: value2} Let's store the ages of two people in a dictionary. The two people are Gabby and Maelle . Gabby is 10 and Maelle is 7 . Note the name Gabby is a string and the age 10 is an integer. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> type ( age_dict ) dict The values stored in a dictionary are called and assigned using the following syntax: dict_name [ key ] = value >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict [ \"Maelle\" ] 7 We can add a new person to our age_dict with the following command: >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict [ \"Peter\" ] = 42 >>> age_dict { 'Gabby' : 10 , 'Maelle' : 7 , 'Peter' : 42 } Dictionaries can be converted to lists by calling the .items() , .keys() , and .values() methods. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> whole_list = list ( age_dict . items ()) >>> whole_list [( 'Gabby' , 10 ), ( 'Maelle' , 7 )] >>> name_list = list ( age_dict . keys ()) >>> name_list [ 'Gabby' , 'Maelle' ] >>> age_list = list ( age_dict . values ()) >>> age_list [ 10 , 7 ] Items can be removed from a dictionary by calling the .pop() method. The dictionary key (and that key's associated value) supplied to the .pop() method is removed from the dictionary. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict . pop ( \"Gabby\" ) >>> age_dict { 'Maelle' : 7 }","title":"4.6 Dictionaries and Tuples"},{"location":"04-Data-Types-and-Variables/04-06-Dictionaries-and-Tuples/#dictionaries-and-tuples","text":"Besides lists, Python has two additional data structures that can store multiple objects. These data structures are dictionaries and tuples . Tuples will be discussed first.","title":"Dictionaries and Tuples"},{"location":"04-Data-Types-and-Variables/04-06-Dictionaries-and-Tuples/#tuples","text":"Tuples are immutable lists. Elements of a list can be modified, but elements in a tuple can only be accessed , not modified . The name tuple does not mean that only two values can be stored in this data structure. Tuples are defined in Python by enclosing elements in parenthesis ( ) separated by commas. The command below creates a tuple containing the numbers 3 , 4 , and 5 . >>> t_var = ( 3 , 4 , 5 ) >>> t_var ( 3 , 4 , 5 ) Note how the elements of a list can be modified: >>> l_var = [ 3 , 4 , 5 ] # a list >>> l_var [ 0 ] = 8 >>> l_var [ 8 , 4 , 5 ] The elements of a tuple can not be modified. If you try to assign a new value to one of the elements in a tuple, an error is returned. >>> t_var = ( 3 , 4 , 5 ) # a tuple >>> t_var [ 0 ] = 8 >>> t_var TypeError : 'tuple' object does not support item assignment To create a tuple that just contains one numerical value, the number must be followed by a comma. Without a comma, the variable is defined as a number. >>> num = ( 5 ) >>> type ( num ) int When a comma is included after the number, the variable is defined as a tuple. >>> t_var = ( 5 ,) >>> type ( t_var ) tuple","title":"Tuples"},{"location":"04-Data-Types-and-Variables/04-06-Dictionaries-and-Tuples/#tuple-indexing-and-slicing","text":"Just like strings and lists, tuples can be indexed and sliced. The code section below creates a tuple with 3 elements and uses indexing and slicing to certain elements out. Note that you can index out of a tuple, but you can't index into a tuple. This is because tuples are an immutable data structure. >>> t = ( 'red' , 'green' , 'blue' ) >>> t [ 2 ] 'blue' >>> t = ( 'civil' , 'mechanical' , 'electrical' ) >>> t [ 1 : 3 ] ( 'mechanical' , 'electrical' )","title":"Tuple indexing and slicing"},{"location":"04-Data-Types-and-Variables/04-06-Dictionaries-and-Tuples/#dictionaries","text":"Dictionaries are made up of key: value pairs. In Python, lists and tuples are organized and accessed based on position . Dictionaries in Python are organized and accessed using keys and values . The location of a pair of keys and values stored in a Python dictionary is irrelevant. Dictionaries are defined in Python with curly braces { } . Commas separate the key-value pairs that make up the dictionary. Each key-value pair is related by a colon : . dict_name = {key1: value1, key2: value2} Let's store the ages of two people in a dictionary. The two people are Gabby and Maelle . Gabby is 10 and Maelle is 7 . Note the name Gabby is a string and the age 10 is an integer. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> type ( age_dict ) dict The values stored in a dictionary are called and assigned using the following syntax: dict_name [ key ] = value >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict [ \"Maelle\" ] 7 We can add a new person to our age_dict with the following command: >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict [ \"Peter\" ] = 42 >>> age_dict { 'Gabby' : 10 , 'Maelle' : 7 , 'Peter' : 42 } Dictionaries can be converted to lists by calling the .items() , .keys() , and .values() methods. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> whole_list = list ( age_dict . items ()) >>> whole_list [( 'Gabby' , 10 ), ( 'Maelle' , 7 )] >>> name_list = list ( age_dict . keys ()) >>> name_list [ 'Gabby' , 'Maelle' ] >>> age_list = list ( age_dict . values ()) >>> age_list [ 10 , 7 ] Items can be removed from a dictionary by calling the .pop() method. The dictionary key (and that key's associated value) supplied to the .pop() method is removed from the dictionary. >>> age_dict = { \"Gabby\" : 10 , \"Maelle\" : 7 } >>> age_dict . pop ( \"Gabby\" ) >>> age_dict { 'Maelle' : 7 }","title":"Dictionaries"},{"location":"04-Data-Types-and-Variables/04-07-Summary/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Summary In this chapter, you learned about a couple of different data types built-in to Python. These data types include numeric data types: integers, floats, and complex numbers. The string data type is composed of letters, numbers, spaces, and punctuation. Python also has container data types that can store many values. These container data types include lists, tuples, and dictionaries. Strings, lists, and tuples can be indexed and sliced using square brackets [ ] . Key Terms and Concepts data type variable assignment assignment operator integer int whole number floating point number float scientific notation complex number string boolean bool boolean arithmetic boolean operators or and not data structure dictionary tuple list index indexing immutable Summary of Python Data Types and Commands Built-in Data Types Python Data Type Description int integer float floating point number bool boolean value: True or False complex complex number, real and imaginary components str string, sequence of letters, numbers and symbols list list, created with [ ] dict dictionary, created with {'key'=value} tuple an immutable list, created with ( ) Python Functions Function Description type() output a variable or object data type len() return the length of a string, list dictionary or tuple str() convert a float or int into a str (string) int() convert a float or str into an int (integer) bool() convert an object into a bool (True or False) float() convert an int or str into an float (floating point number) list() convert a sequence into a list Indexing and Slicing Operators Operator Description Example Result [ ] indexing lst[1] 4 : start lst[:2] [ 2, 4 ] : end lst[2:] [ 6, 8 ] : through lst[0:3] [ 2, 4, 6 ] : start, stop, step lst[0:5:2] [2, 6]","title":"4.7 Summary"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#summary","text":"In this chapter, you learned about a couple of different data types built-in to Python. These data types include numeric data types: integers, floats, and complex numbers. The string data type is composed of letters, numbers, spaces, and punctuation. Python also has container data types that can store many values. These container data types include lists, tuples, and dictionaries. Strings, lists, and tuples can be indexed and sliced using square brackets [ ] .","title":"Summary"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#key-terms-and-concepts","text":"data type variable assignment assignment operator integer int whole number floating point number float scientific notation complex number string boolean bool boolean arithmetic boolean operators or and not data structure dictionary tuple list index indexing immutable","title":"Key Terms and Concepts"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#summary-of-python-data-types-and-commands","text":"","title":"Summary of Python Data Types and Commands"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#built-in-data-types","text":"Python Data Type Description int integer float floating point number bool boolean value: True or False complex complex number, real and imaginary components str string, sequence of letters, numbers and symbols list list, created with [ ] dict dictionary, created with {'key'=value} tuple an immutable list, created with ( )","title":"Built-in Data Types"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#python-functions","text":"Function Description type() output a variable or object data type len() return the length of a string, list dictionary or tuple str() convert a float or int into a str (string) int() convert a float or str into an int (integer) bool() convert an object into a bool (True or False) float() convert an int or str into an float (floating point number) list() convert a sequence into a list","title":"Python Functions"},{"location":"04-Data-Types-and-Variables/04-07-Summary/#indexing-and-slicing-operators","text":"Operator Description Example Result [ ] indexing lst[1] 4 : start lst[:2] [ 2, 4 ] : end lst[2:] [ 6, 8 ] : through lst[0:3] [ 2, 4, 6 ] : start, stop, step lst[0:5:2] [2, 6]","title":"Indexing and Slicing Operators"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Review Questions Determine the Data Type Q04.01 Find the data type of a if a=9 Q04.02 Find the data type of a if a=9. (note the . after the number 9) Q04.03 Find the data type of a if a='9.' Q04.04 Find the data type of a if a=(9) Q04.05 Find the data type of a if a=False Q04.06 Find the data type of a if a=[1,2,3] Q04.07 Find the data type of a if a=(1,2,3) Q04.08 Find the data type of a if a={'key': 9} Q04.09 Find the data type of a if a=1 + 9j Numeric Data Types Q04.10 Set a=1 and b=2 . What data type is a/b ? Q04.11 Set a=1 and b=2 . What data type is a*b ? Q04.12 What is 5.1 plus 0 + 3j ? Complete this calculation by defining one variable as a floating point number and another variable as a complex number. Q04.13 What floating point number converts to the boolean False ? Show this in code using the bool() function. Q04.14 Create the floating point number \\(0.001 \\times 10^{-0.2}\\) and assign it to the variable b . Q04.15 Show that 3e2 is equivalent to 3E2 with the comparison operator == Q04.16 Euler's number, \\(e\\) , can be called in Python using the code below: from math import e (a) Round \\(e\\) to the nearest integer. Store the result in a variable called x . (b) Round \\(e\\) to the nearest 1000ths place (the nearest 0.001). Store the result in a variable called y . (c) Truncate the decimal portion of \\(e\\) (remove the 0.71828.... portion) so you are left with the integer 2 . Store the result in a variable called z . Hint: convert \\(e\\) to a string and use string slicing. Q04.17 Define the complex number A using the code below: A = 4 + 2j (a) store the real component of A in a variable called real . (b) store the imaginary component of A in a variable called imaginary . (c) store the magnitude of A in a variable called mag . The magnitude of an imaginary number is defined as: \\[ magnitude = \\sqrt{(real)^2+(imaginary)^2} \\] Booleans Q04.20 Predict the output if the lines n=5 and (n<3) and (n<7) are run. Then run the the two lines of code. Q04.21 Predict the output if the lines of code below are run. Then run the code. >>> ans = 'Yes' >>> ans == 'Yes' or ans == 'No' Q04.22 Pick a number n to make the following statement True : (2<n) or (n==2+n) Then run the code to show your number works. Q04.23 Pick a number n to make the following statement False : not (n<6) and (n<4) Then run the code to show your number works. Q04.24 Add the integers 1 and 0 and convert the answer to a boolean. Add the boolean values bool(0) + bool(1) and compare the result. Q04.25 Show that (n>5) and (n<=10) is equivalent to 5 < n <= 10 using the two different numbers for n . Q04.26 Show that (n<5) or (n>=10) is equivalent to not(5 <= n < 10) using the two different numbers for n . Strings Q04.30 Define a string that contains the word \\(Problem\\) . Q04.31 Define one string as the word \\(Problem\\) and define another string as the word \\(Solving\\) . Combine these two strings to make the statement \\(Problem \\ Solving\\) . Q04.32 (a) Define a string that contains the number \\(8\\) and a string that contains the number \\(5\\) . Combine these two strings with the plus operator + . (b) Define an integer as the number \\(8\\) and an integer as the number \\(5\\) and combine these two integers with the plus operator + (c) Explain why the output from (a) was different from the output of (b) (d) Multiply the string \\(8\\) and the integer \\(5\\) with the multiplication operator * . Compare the output to multiplying the integers \\(8\\) and the integer \\(5\\) . Why is the output different? Q03.33 Complete the following index and slicing operations after word = 'Problem' is defined. (a) Pull out the letter \\(P\\) from word (b) Pull out the first three letters \\(Pro\\) from word (c) Pull out the second through the fourth letters \\(rob\\) from word (d) Pull out every other letter from word starting with \\(P\\) (e) Use indexing and slicing to output word backward to produce \\(melborP\\) . Q04.34 Define the strings below: (a) Define string a as coffee , define string b as it's , define string c as hot! and define string d as , (a comma). (b) Combine the strings a , b , c and d to produce the string coffee, it's hot (notice the comma) (c) Print out the statement she said \"coffee, it's hot\" using the variables a , b , c and d . Q04.35 Create the string path with the value C:\\Users\\Maelle\\Documents Q04.36 Convert the string Problem to the list ['P','r','o','b','l','e','m'] without writing the list from scratch. Q04.37 Use the string over board and slicing to produce the following words: (a) over (b) board (c) oar Q04.38 Use the string rotten tomatoes and slicing to produce the following words: (a) to (b) no (c) ten (d) oat Lists Q04.40 Create a list that contains the numbers \\(1\\) , \\(2.9 \\times 10^8\\) , and the word \\(game\\) . Q04.41 Create a list that contains the words \\(problem\\) , \\(solving\\) , \\(with\\) , \\(python\\) . Q04.42 Create a list with one value, the number \\(6\\) . Convert the list to a boolean with the bool() function. Next create a list with one value, the number \\(0\\) . Convert this list to a boolean and compare the result. Q04.43 Create an empty list. Convert the empty list to a boolean with the bool() function. Q04.44 Create a list with the letters \\(C\\) , \\(D\\) , and \\(R\\) . Pull the letters \\(C\\) and \\(D\\) out of your list with indexing. Q04.45 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out the number \\(5\\) from the list. Q04.46 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the numbers \\(5\\) or less. Q04.47 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the numbers \\(5\\) and greater. Q04.48 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the even numbers from the list. Q04.49 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out every odd number from the list. Q04.50 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to return the list in reverse order (the returned list starts with \\(10\\) and ends with \\(1\\) ). Q04.51 Create a list containing the values 1, 2, 5.6, and 9 in that order, and store it in a variable called x . Dictionaries Q04.60 Create a dictionary called capitals that contains the states and state capitals. Include Washington , capital Olympia and Oregon , capital Salem . Q04.61 Create a dictionary called capitals that contains the states and state capitals. Include Washington , capital Olympia and Oregon , capital Salem . In the line after the dictionary is created add the state New York , capital Albany . Q04.62 Create a dictionary numbers = {'one':1, 'two':2, 'three':3} . Pull out the number 2 by calling the key 'two' . Q04.63 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the keys and add them to a list called colors_list with the .keys() method. Q04.64 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the values and add them to a list called colors_hex with the .values() method. Q04.65 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the items from the dictionary and add them to a list called color_items with the .items() method. Q04.66 Create a dictionary groups = {'solo':1, 'duo':2} . Add the key 'trio' and the corresponding value 3 . Q04.67 Create a dictionary groups = {'solo':1, 'duo':2} . Then remove the key 'duo' and the value 2 so that only 'solo':1 remains. Q04.68 Create a dictionary college = {'name': 'University of Oregon'} . Add the following two keys: \\(abbreviation\\) , \\(mascot\\) and the corresponding two values: \\(UofO\\) , \\(ducks\\) . Tuples Q04.70 Create a tuple with the numbers \\(8\\) , \\(9\\) , and \\(10\\) . Q04.71 Create a tuple that has a single entry, the number \\(10\\) . Q04.72 Create a list and a tuple that both contain the strings: \\(one\\) , \\(two\\) , and \\(three\\) . Pull the word \\(two\\) out of both the list and the tuple. Q04.73 Create a list and a tuple that both contain the strings: \\(one\\) , \\(two\\) , and \\(three\\) . Try to substitute the number \\(2\\) for the word \\(two\\) in both the list and tuple using indexing (square brackets). Q04.74 Code the following lines: t1 = ( 9 ) t2 = ( 9 ,) t3 = ( '9' ) Use Python's type() function to find the object type of each variable. Q04.75 Create a tuple that returns True when converted to a boolean. Use the bool() function to demonstrate your tuple converts to True . Q04.76 Create a tuple that returns False when converted to a boolean. Use the bool() function to demonstrate your tuple converts to False . Errors, Explanations, and Solutions Q04.80 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: n = 503 n [ 2 ] Q04.81 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: a = 321 b = 'go!' c = a + b Q04.82 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: d = { one : 1 , two : 2 , three : 3 } d [ one ] Q04.83 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: f = false not f Q04.84 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: comp = 0.1 - 4.3 i comp + 5 Q04.85 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: tpl = ( 1 , 2 , 3 ) tpl [ 1 ] = 20 Q04.86 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: lst = [ 1 , 3 , 5 ] lst [ 3 ] Q04.87 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: d = [ 'key' : 8 , 'pair' : 9 ] d [ 'key' ] Q04.88 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: s = [ 'Problem Solving' ] s [ 8 :]","title":"4.8 Review Questions"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#review-questions","text":"","title":"Review Questions"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#determine-the-data-type","text":"Q04.01 Find the data type of a if a=9 Q04.02 Find the data type of a if a=9. (note the . after the number 9) Q04.03 Find the data type of a if a='9.' Q04.04 Find the data type of a if a=(9) Q04.05 Find the data type of a if a=False Q04.06 Find the data type of a if a=[1,2,3] Q04.07 Find the data type of a if a=(1,2,3) Q04.08 Find the data type of a if a={'key': 9} Q04.09 Find the data type of a if a=1 + 9j","title":"Determine the Data Type"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#numeric-data-types","text":"Q04.10 Set a=1 and b=2 . What data type is a/b ? Q04.11 Set a=1 and b=2 . What data type is a*b ? Q04.12 What is 5.1 plus 0 + 3j ? Complete this calculation by defining one variable as a floating point number and another variable as a complex number. Q04.13 What floating point number converts to the boolean False ? Show this in code using the bool() function. Q04.14 Create the floating point number \\(0.001 \\times 10^{-0.2}\\) and assign it to the variable b . Q04.15 Show that 3e2 is equivalent to 3E2 with the comparison operator == Q04.16 Euler's number, \\(e\\) , can be called in Python using the code below: from math import e (a) Round \\(e\\) to the nearest integer. Store the result in a variable called x . (b) Round \\(e\\) to the nearest 1000ths place (the nearest 0.001). Store the result in a variable called y . (c) Truncate the decimal portion of \\(e\\) (remove the 0.71828.... portion) so you are left with the integer 2 . Store the result in a variable called z . Hint: convert \\(e\\) to a string and use string slicing. Q04.17 Define the complex number A using the code below: A = 4 + 2j (a) store the real component of A in a variable called real . (b) store the imaginary component of A in a variable called imaginary . (c) store the magnitude of A in a variable called mag . The magnitude of an imaginary number is defined as: \\[ magnitude = \\sqrt{(real)^2+(imaginary)^2} \\]","title":"Numeric Data Types"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#booleans","text":"Q04.20 Predict the output if the lines n=5 and (n<3) and (n<7) are run. Then run the the two lines of code. Q04.21 Predict the output if the lines of code below are run. Then run the code. >>> ans = 'Yes' >>> ans == 'Yes' or ans == 'No' Q04.22 Pick a number n to make the following statement True : (2<n) or (n==2+n) Then run the code to show your number works. Q04.23 Pick a number n to make the following statement False : not (n<6) and (n<4) Then run the code to show your number works. Q04.24 Add the integers 1 and 0 and convert the answer to a boolean. Add the boolean values bool(0) + bool(1) and compare the result. Q04.25 Show that (n>5) and (n<=10) is equivalent to 5 < n <= 10 using the two different numbers for n . Q04.26 Show that (n<5) or (n>=10) is equivalent to not(5 <= n < 10) using the two different numbers for n .","title":"Booleans"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#strings","text":"Q04.30 Define a string that contains the word \\(Problem\\) . Q04.31 Define one string as the word \\(Problem\\) and define another string as the word \\(Solving\\) . Combine these two strings to make the statement \\(Problem \\ Solving\\) . Q04.32 (a) Define a string that contains the number \\(8\\) and a string that contains the number \\(5\\) . Combine these two strings with the plus operator + . (b) Define an integer as the number \\(8\\) and an integer as the number \\(5\\) and combine these two integers with the plus operator + (c) Explain why the output from (a) was different from the output of (b) (d) Multiply the string \\(8\\) and the integer \\(5\\) with the multiplication operator * . Compare the output to multiplying the integers \\(8\\) and the integer \\(5\\) . Why is the output different? Q03.33 Complete the following index and slicing operations after word = 'Problem' is defined. (a) Pull out the letter \\(P\\) from word (b) Pull out the first three letters \\(Pro\\) from word (c) Pull out the second through the fourth letters \\(rob\\) from word (d) Pull out every other letter from word starting with \\(P\\) (e) Use indexing and slicing to output word backward to produce \\(melborP\\) . Q04.34 Define the strings below: (a) Define string a as coffee , define string b as it's , define string c as hot! and define string d as , (a comma). (b) Combine the strings a , b , c and d to produce the string coffee, it's hot (notice the comma) (c) Print out the statement she said \"coffee, it's hot\" using the variables a , b , c and d . Q04.35 Create the string path with the value C:\\Users\\Maelle\\Documents Q04.36 Convert the string Problem to the list ['P','r','o','b','l','e','m'] without writing the list from scratch. Q04.37 Use the string over board and slicing to produce the following words: (a) over (b) board (c) oar Q04.38 Use the string rotten tomatoes and slicing to produce the following words: (a) to (b) no (c) ten (d) oat","title":"Strings"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#lists","text":"Q04.40 Create a list that contains the numbers \\(1\\) , \\(2.9 \\times 10^8\\) , and the word \\(game\\) . Q04.41 Create a list that contains the words \\(problem\\) , \\(solving\\) , \\(with\\) , \\(python\\) . Q04.42 Create a list with one value, the number \\(6\\) . Convert the list to a boolean with the bool() function. Next create a list with one value, the number \\(0\\) . Convert this list to a boolean and compare the result. Q04.43 Create an empty list. Convert the empty list to a boolean with the bool() function. Q04.44 Create a list with the letters \\(C\\) , \\(D\\) , and \\(R\\) . Pull the letters \\(C\\) and \\(D\\) out of your list with indexing. Q04.45 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out the number \\(5\\) from the list. Q04.46 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the numbers \\(5\\) or less. Q04.47 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the numbers \\(5\\) and greater. Q04.48 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out all of the even numbers from the list. Q04.49 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to pull out every odd number from the list. Q04.50 Create a list with the numbers \\(1\\) to \\(10\\) (counting by ones). Use slicing to return the list in reverse order (the returned list starts with \\(10\\) and ends with \\(1\\) ). Q04.51 Create a list containing the values 1, 2, 5.6, and 9 in that order, and store it in a variable called x .","title":"Lists"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#dictionaries","text":"Q04.60 Create a dictionary called capitals that contains the states and state capitals. Include Washington , capital Olympia and Oregon , capital Salem . Q04.61 Create a dictionary called capitals that contains the states and state capitals. Include Washington , capital Olympia and Oregon , capital Salem . In the line after the dictionary is created add the state New York , capital Albany . Q04.62 Create a dictionary numbers = {'one':1, 'two':2, 'three':3} . Pull out the number 2 by calling the key 'two' . Q04.63 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the keys and add them to a list called colors_list with the .keys() method. Q04.64 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the values and add them to a list called colors_hex with the .values() method. Q04.65 Create a dictionary colors = {'red':'#FF0000', 'green':'#008000', 'blue':'#0000FF'} . Pull out all the items from the dictionary and add them to a list called color_items with the .items() method. Q04.66 Create a dictionary groups = {'solo':1, 'duo':2} . Add the key 'trio' and the corresponding value 3 . Q04.67 Create a dictionary groups = {'solo':1, 'duo':2} . Then remove the key 'duo' and the value 2 so that only 'solo':1 remains. Q04.68 Create a dictionary college = {'name': 'University of Oregon'} . Add the following two keys: \\(abbreviation\\) , \\(mascot\\) and the corresponding two values: \\(UofO\\) , \\(ducks\\) .","title":"Dictionaries"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#tuples","text":"Q04.70 Create a tuple with the numbers \\(8\\) , \\(9\\) , and \\(10\\) . Q04.71 Create a tuple that has a single entry, the number \\(10\\) . Q04.72 Create a list and a tuple that both contain the strings: \\(one\\) , \\(two\\) , and \\(three\\) . Pull the word \\(two\\) out of both the list and the tuple. Q04.73 Create a list and a tuple that both contain the strings: \\(one\\) , \\(two\\) , and \\(three\\) . Try to substitute the number \\(2\\) for the word \\(two\\) in both the list and tuple using indexing (square brackets). Q04.74 Code the following lines: t1 = ( 9 ) t2 = ( 9 ,) t3 = ( '9' ) Use Python's type() function to find the object type of each variable. Q04.75 Create a tuple that returns True when converted to a boolean. Use the bool() function to demonstrate your tuple converts to True . Q04.76 Create a tuple that returns False when converted to a boolean. Use the bool() function to demonstrate your tuple converts to False .","title":"Tuples"},{"location":"04-Data-Types-and-Variables/04-08-Review-Questions/#errors-explanations-and-solutions","text":"Q04.80 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: n = 503 n [ 2 ] Q04.81 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: a = 321 b = 'go!' c = a + b Q04.82 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: d = { one : 1 , two : 2 , three : 3 } d [ one ] Q04.83 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: f = false not f Q04.84 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: comp = 0.1 - 4.3 i comp + 5 Q04.85 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: tpl = ( 1 , 2 , 3 ) tpl [ 1 ] = 20 Q04.86 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: lst = [ 1 , 3 , 5 ] lst [ 3 ] Q04.87 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: d = [ 'key' : 8 , 'pair' : 9 ] d [ 'key' ] Q04.88 Run the following lines of code and explain the error in your own words. Then rewrite the lines of code to run error free: s = [ 'Problem Solving' ] s [ 8 :]","title":"Errors, Explanations, and Solutions"},{"location":"05-NumPy-and-Arrays/05-01-Introduction/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); NumPy and Arrays Introduction NumPy is a Python package used for array creation and numerical computation. NumPy is one of the fundamental packages for scientific computing with Python. In this chapter, you will learn how to use NumPy to complete operations on arrays. By the end of this chapter you will be able to: Explain the difference between a Python list and a NumPy array Create NumPy arrays Modify NumPy arrays Index and slice NumPy arrays Run mathematical operations on NumPy arrays Solve a system of linear equations using matrices","title":"5.1 Introduction"},{"location":"05-NumPy-and-Arrays/05-01-Introduction/#numpy-and-arrays","text":"","title":"NumPy and Arrays"},{"location":"05-NumPy-and-Arrays/05-01-Introduction/#introduction","text":"NumPy is a Python package used for array creation and numerical computation. NumPy is one of the fundamental packages for scientific computing with Python. In this chapter, you will learn how to use NumPy to complete operations on arrays. By the end of this chapter you will be able to: Explain the difference between a Python list and a NumPy array Create NumPy arrays Modify NumPy arrays Index and slice NumPy arrays Run mathematical operations on NumPy arrays Solve a system of linear equations using matrices","title":"Introduction"},{"location":"05-NumPy-and-Arrays/05-02-NumPy/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); NumPy NumPy is a Python package used for numerical computation. NumPy is one of the foundational packages for scientific computing with Python. NumPy's core data type is the array and NumPy functions operate on arrays.","title":"5.2 NumPy"},{"location":"05-NumPy-and-Arrays/05-02-NumPy/#numpy","text":"NumPy is a Python package used for numerical computation. NumPy is one of the foundational packages for scientific computing with Python. NumPy's core data type is the array and NumPy functions operate on arrays.","title":"NumPy"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Installing NumPy Before NumPy's functions and methods can be used, NumPy must first be installed. Depending on which distribution of Python you use, the installation method is slightly different. Install NumPy with Anaconda If you installed the Anaconda distribution of Python, NumPy comes pre-installed and no further installation steps are necessary. If you use a version of Python from python.org or a version of Python that came with your operating system, the Anaconda Prompt and conda or a terminal and pip can be used to install NumPy. Install NumPy with the Anaconda Prompt To install NumPy, open the Anaconda Prompt and type: > conda install numpy Type y for yes when prompted. This command installs NumPy in the active environment. Install NumPy with pip To install NumPy with pip (the Python package manager), open a terminal and type: $ pip install numpy This command installs NumPy in the current working Python environment. Verify NumPy installation To verify NumPy is installed, invoke NumPy's version using the Python REPL. Import NumPy and call the .__version__ attribute common to most Python packages. import numpy as np np . __version__ '1.18.5' A version number like '1.18.5' indicates a successful NumPy installation.","title":"5.3 Installing NumPy"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/#installing-numpy","text":"Before NumPy's functions and methods can be used, NumPy must first be installed. Depending on which distribution of Python you use, the installation method is slightly different.","title":"Installing NumPy"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/#install-numpy-with-anaconda","text":"If you installed the Anaconda distribution of Python, NumPy comes pre-installed and no further installation steps are necessary. If you use a version of Python from python.org or a version of Python that came with your operating system, the Anaconda Prompt and conda or a terminal and pip can be used to install NumPy.","title":"Install NumPy with Anaconda"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/#install-numpy-with-the-anaconda-prompt","text":"To install NumPy, open the Anaconda Prompt and type: > conda install numpy Type y for yes when prompted. This command installs NumPy in the active environment.","title":"Install NumPy with the Anaconda Prompt"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/#install-numpy-with-pip","text":"To install NumPy with pip (the Python package manager), open a terminal and type: $ pip install numpy This command installs NumPy in the current working Python environment.","title":"Install NumPy with pip"},{"location":"05-NumPy-and-Arrays/05-03-Installing-NumPy/#verify-numpy-installation","text":"To verify NumPy is installed, invoke NumPy's version using the Python REPL. Import NumPy and call the .__version__ attribute common to most Python packages. import numpy as np np . __version__ '1.18.5' A version number like '1.18.5' indicates a successful NumPy installation.","title":"Verify NumPy installation"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Python Lists and NumPy Arrays NumPy is a Python package used for numerical calculations, working with arrays of homogeneous values, and scientific computing. This section introduces NumPy arrays then explains the difference between Python lists and NumPy arrays. Python Lists NumPy is used to construct homogeneous arrays and perform mathematical operations on arrays. A NumPy array is different from a Python list. The objects stored in a Python list can all be different data types. python_list = [ 1 , - 0.038 , 'gear' , True ] The Python list above contains four different data types: 1 is an integer, -0.038 is a float, 'gear' is a string, and 'True' is a boolean. The code below prints the data type of each value store in python_list . python_list = [ 1 , - 0.038 , 'gear' , True ] for item in python_list : print ( type ( item )) <class 'int'> <class 'float'> <class 'str'> <class 'bool'> NumPy Arrays The values stored in a NumPy array must all share the same data type. Consider the NumPy array below: np . array ([ 1.0 , 3.1 , 5e-04 , 0.007 ]) All four values stored in the NumPy array above share the same data type: 1.0 , 3.1 , 5e-04 , and 0.007 are all floats. The code below prints the data type of each value stored in the NumPy array above. import numpy as np for value in np . array ([ 1.0 , 3.1 , 5e-04 , 0.007 ]): print ( type ( value )) <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> The class 'numpy.float64' indicates the numbers stored in the array are all floats. If the same four elements stored in the previous Python list are stored in a NumPy array, NumPy forces all of the four items in the array to conform to the same data type. In the next code section, all four items are converted to type '<U32' , which is a string data type in NumPy (the U refers Unicode strings; all strings in Python are Unicode by default). np . array ([ 1 , - 0.038 , 'gear' , True ]) array(['1', '-0.038', 'gear', 'True'], dtype='<U32') NumPy arrays can also be two-dimensional, three-dimensional, or up to n-dimensional. In practice, computer resources limit array size. Remember that regardless of size, all elements in a NumPy array must be the same type. NumPy arrays are useful because mathematical operations can be run on an entire array simultaneously. If numbers are stored in a regular Python list and the list is multiplied by a scalar, the list extends and repeats- instead of multiplying each number in the list by the scalar. The code below demonstrates list repetition using the multiplication operator, * . lst = [ 1 , 2 , 3 , 4 ] lst * 2 [1, 2, 3, 4, 1, 2, 3, 4] To multiply each element in a Python list by the number 2 , a loop can be used: lst = [ 1 , 2 , 3 , 4 ] for i , item in enumerate ( lst ): lst [ i ] = lst [ i ] * 2 lst [2, 4, 6, 8] The method above is relatively cumbersome and is also quite computationally expensive . A computationally expensive operation is an operation that takes a lot of processing power. Another way to complete the same operation in the loop above is to use a NumPy array. Array Multiplication An entire NumPy array can be multiplied by a scalar in one step. The scalar multiplication operation below produces an array with each element multiplied by the scalar 2 . nparray = np . array ([ 1 , 2 , 3 , 4 ]) 2 * nparray array([2, 4, 6, 8]) If we have a very long list of numbers, we can compare the amount of time it takes each of the two computation methods above (a list with a loop compared to array multiplication) to complete the same operation. This comparison highlights one advantage of NumPy arrays compared to Python lists: speed. Timing Arrays Jupyter notebooks have a nice built-in method to time how long a line of code takes to execute. In a Jupyter notebook, when a line starts with %timeit followed by code, the kernel runs the line of code multiple times and outputs an average of the time spent to execute the line of code. We can use %timit to compare a mathematical operation on a Python list using a for loop to the same mathematical operation on a NumPy array. lst = list ( range ( 10000 )) % timeit for i , item in enumerate ( lst ): lst [ i ] = lst [ i ] * 2 2.8 ms \u00b1 108 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each) nparray = np . arange ( 0 , 10000 , 1 ) % timeit 2 * nparray 10.1 \u00b5s \u00b1 67.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each) With 10,000 integers, the Python list and for loop takes an average of single milliseconds, while the NumPy array completes the same operation in tens of microseconds. This is a speed increase of over 100x by using the NumPy array (1 millisecond = 1000 microseconds). For larger lists of numbers, the speed increase using NumPy arrays is considerable.","title":"5.4 Python Lists and NumPy Arrays"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/#python-lists-and-numpy-arrays","text":"NumPy is a Python package used for numerical calculations, working with arrays of homogeneous values, and scientific computing. This section introduces NumPy arrays then explains the difference between Python lists and NumPy arrays.","title":"Python Lists and NumPy Arrays"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/#python-lists","text":"NumPy is used to construct homogeneous arrays and perform mathematical operations on arrays. A NumPy array is different from a Python list. The objects stored in a Python list can all be different data types. python_list = [ 1 , - 0.038 , 'gear' , True ] The Python list above contains four different data types: 1 is an integer, -0.038 is a float, 'gear' is a string, and 'True' is a boolean. The code below prints the data type of each value store in python_list . python_list = [ 1 , - 0.038 , 'gear' , True ] for item in python_list : print ( type ( item )) <class 'int'> <class 'float'> <class 'str'> <class 'bool'>","title":"Python Lists"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/#numpy-arrays","text":"The values stored in a NumPy array must all share the same data type. Consider the NumPy array below: np . array ([ 1.0 , 3.1 , 5e-04 , 0.007 ]) All four values stored in the NumPy array above share the same data type: 1.0 , 3.1 , 5e-04 , and 0.007 are all floats. The code below prints the data type of each value stored in the NumPy array above. import numpy as np for value in np . array ([ 1.0 , 3.1 , 5e-04 , 0.007 ]): print ( type ( value )) <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> The class 'numpy.float64' indicates the numbers stored in the array are all floats. If the same four elements stored in the previous Python list are stored in a NumPy array, NumPy forces all of the four items in the array to conform to the same data type. In the next code section, all four items are converted to type '<U32' , which is a string data type in NumPy (the U refers Unicode strings; all strings in Python are Unicode by default). np . array ([ 1 , - 0.038 , 'gear' , True ]) array(['1', '-0.038', 'gear', 'True'], dtype='<U32') NumPy arrays can also be two-dimensional, three-dimensional, or up to n-dimensional. In practice, computer resources limit array size. Remember that regardless of size, all elements in a NumPy array must be the same type. NumPy arrays are useful because mathematical operations can be run on an entire array simultaneously. If numbers are stored in a regular Python list and the list is multiplied by a scalar, the list extends and repeats- instead of multiplying each number in the list by the scalar. The code below demonstrates list repetition using the multiplication operator, * . lst = [ 1 , 2 , 3 , 4 ] lst * 2 [1, 2, 3, 4, 1, 2, 3, 4] To multiply each element in a Python list by the number 2 , a loop can be used: lst = [ 1 , 2 , 3 , 4 ] for i , item in enumerate ( lst ): lst [ i ] = lst [ i ] * 2 lst [2, 4, 6, 8] The method above is relatively cumbersome and is also quite computationally expensive . A computationally expensive operation is an operation that takes a lot of processing power. Another way to complete the same operation in the loop above is to use a NumPy array.","title":"NumPy Arrays"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/#array-multiplication","text":"An entire NumPy array can be multiplied by a scalar in one step. The scalar multiplication operation below produces an array with each element multiplied by the scalar 2 . nparray = np . array ([ 1 , 2 , 3 , 4 ]) 2 * nparray array([2, 4, 6, 8]) If we have a very long list of numbers, we can compare the amount of time it takes each of the two computation methods above (a list with a loop compared to array multiplication) to complete the same operation. This comparison highlights one advantage of NumPy arrays compared to Python lists: speed.","title":"Array Multiplication"},{"location":"05-NumPy-and-Arrays/05-04-Python-Lists-and-NumPy-Arrays/#timing-arrays","text":"Jupyter notebooks have a nice built-in method to time how long a line of code takes to execute. In a Jupyter notebook, when a line starts with %timeit followed by code, the kernel runs the line of code multiple times and outputs an average of the time spent to execute the line of code. We can use %timit to compare a mathematical operation on a Python list using a for loop to the same mathematical operation on a NumPy array. lst = list ( range ( 10000 )) % timeit for i , item in enumerate ( lst ): lst [ i ] = lst [ i ] * 2 2.8 ms \u00b1 108 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each) nparray = np . arange ( 0 , 10000 , 1 ) % timeit 2 * nparray 10.1 \u00b5s \u00b1 67.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each) With 10,000 integers, the Python list and for loop takes an average of single milliseconds, while the NumPy array completes the same operation in tens of microseconds. This is a speed increase of over 100x by using the NumPy array (1 millisecond = 1000 microseconds). For larger lists of numbers, the speed increase using NumPy arrays is considerable.","title":"Timing Arrays"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Array Creation NumPy arrays are created with the np.array() function. The arguments provided to np.array() needs to be a list or iterable. An example is below. Note how the list [1,2,3] is passed into the function with square brackets at either end. import numpy as np np . array ([ 1 , 2 , 3 ]) array([1, 2, 3]) The data type can be passed into the np.array() function as a second optional keyword argument. Available data types include 'int64' , 'float' , 'complex' and '>U32' (a string data type). import numpy as np np . array ([ 1 , 2 , 3 ], dtype = 'float' ) array([1., 2., 3.]) The data type used in a NumPy array can be determined using the .dtype attribute. For instance, an array of floats returns float64 . import numpy as np my_array = np . array ([ 1 , 2 , 3 ], dtype = 'float' ) my_array . dtype dtype('float64') In addition to np.array() , there are other functions you can use to create NumPy arrays. Arrays of Regularly Spaced Numbers There are multiple ways to create arrays of regularly spaced numbers with NumPy. The next section introduces five NumPy functions to create regular arrays. np.arange() NumPy's np.arange() function creates a NumPy array according the arguments start , stop , step . my_array = np . arange ( start , stop , step ) The np.arange() function is useful for creating an array of regularly spaced numbers where you know the step size . Consider creating a NumPy array of even numbers between 0 and 10 . Note that just like counting in Python, counting in NumPy starts at 0 and ends at n-1 . np . arange ( 0 , 10 + 2 , 2 ) array([ 0, 2, 4, 6, 8, 10]) np.linspace() NumPy's np.linspace() function creates a NumPy array according the arguments start , stop , number_of_elements . my_array = np . linspace ( start , stop , number_of_elements ) The np.linspace() function is useful for creating an array of regularly spaced numbers when the step size is unknown, but the number of values is. Consider creating a NumPy array of 10 equally spaced numbers between 0 and 2pi . np . linspace ( 0 , 2 * np . pi , 10 ) array([0. , 0.6981317 , 1.3962634 , 2.0943951 , 2.7925268 , 3.4906585 , 4.1887902 , 4.88692191, 5.58505361, 6.28318531]) np.logspace() NumPy's np.logspace() function creates a NumPy array of numbers according the arguments start , stop , number of elements , but unlike np.linspace() (which produces a linearly spaced array), np.logspace() produces a logarithmically spaced array. my_array = np . logspace ( start , stop , number of elements , base =< num > ) The np.logspace() function is useful to create an array of logarithmically spaced numbers when the spacing interval is not known but the number of values is. Consider creating a NumPy array of 4 logarithmically spaced numbers between 10 and 100 . The function call is np.logspace(1, 2, 4) . The start is \\(10^1 = 10\\) and the stop is \\(10^2 = 100\\) , and the number of elements is 4 . np . logspace ( 1 , 2 , 4 ) array([ 10. , 21.5443469 , 46.41588834, 100. ]) When using np.logspace(), be careful about inputting large numbers for stop. The stop argument is the exponent or power of 10, not the stop value. Large numbers passed to np.logspace() will produce errors. Remember to pass exponents to np.logspace() . The code below throws an error because \\(10^{1000}\\) is bigger than the largest floating point number supported by a 64 bit computer. np . logspace ( 10 , 1000 , 4 ) C:\\Users\\Peter\\Anaconda3\\lib\\site-packages\\numpy\\core\\function_base.py:274: RuntimeWarning: overflow encountered in power return _nx.power(base, y) array([1.e+10, inf, inf, inf]) np.zeros() NumPy's np.zeros() function creates a NumPy array containing all zeros of a specific size. np.zeros() is useful when the size of an array is known, but the values that will go into the array have not been created yet. Note how a tuple of (rows,cols) is passed as an argument to np.zeros() . Two sets of parenthesis are needed. my_array = np . zeros (( rows , cols )) np . zeros (( 5 , 5 )) array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]) np.ones() NumPy's np.ones() function creates a NumPy array containing all 1's of a specific size. Like np.zeros() , np.ones() is useful when the size of an array is known, but the values that will go into the array have not been created yet. my_array = np . ones (( rows , cols )) np . ones (( 3 , 5 )) array([[1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]]) In the next section, you'll learn how to create arrays of random numbers with NumPy. Arrays of Random Numbers NumPy has functions to create arrays of many different types of random numbers in the np.random module. A few of the common random number types are detailed below. Array of Random Integers Arrays of random integers can be created with NumPy's np.random.randint() function. The general syntax is: np . random . randint ( lower_limit , upper_limit , number_of_values ) The code below creates an array of 5 random integers, each random integer between 1 and 10: np . random . randint ( 0 , 10 , 5 ) array([6, 1, 0, 8, 7]) Array dimensions can be provided as the third argument to the np.random.randint() function. The code below creates a 5 \\(\\times\\) 5 array of random numbers between 1 and 10: np . random . randint ( 0 , 10 ,[ 5 , 5 ]) array([[6, 9, 6, 1, 0], [6, 6, 3, 0, 7], [1, 3, 5, 9, 2], [9, 9, 4, 1, 0], [6, 7, 1, 7, 2]]) Array of Random Floats Arrays of random floating point numbers can be created with NumPy's np.random.rand() function. The general syntax is: np . random . rand ( number of values ) To create an array of 5 random floats between 0 and 1: np . random . rand ( 5 ) array([0.28031033, 0.18841544, 0.81582107, 0.85694189, 0.31810357]) The upper and lower ranges of random floats can me modified with arithmetic. To expand the range of random floats to between 0 and 10 , multiply the result by 10 . np . random . rand ( 5 ) * 10 array([1.56240783, 0.96206982, 4.58545583, 8.49695137, 9.34050894]) To change the range to between 11 and 13 , we multiply the range by 2 (range 0-2), then add 11 to the result. np . random . rand ( 5 ) * 2 + 11 array([11.48381119, 12.17928723, 11.22024366, 12.12511413, 12.31208729]) Random Array Choice from a List NumPy can be used to choose an array of numbers randomly selected from a list or array. np . random . choice ( list_of_choices , number_of_choices ) To choose three numbers at random from a list of [1,5,9,11] use: lst = [ 1 , 5 , 9 , 11 ] np . random . choice ( lst , 3 ) array([ 5, 11, 5]) Random Array with a Normal Distribution np.random.randn() returns an array of random numbers with a normal distribution, assuming a mean of 0 and variance of 1. np . random . randn ( number_of_values ) np . random . randn ( 10 ) array([-1.15325763, -0.69864105, -0.39476384, 1.35101393, -0.51892399, 0.56400008, -0.21046968, -1.05542913, -0.44973573, -0.43243792]) To specify a mean mu and a standard deviation sigma , the function can be wrapped with: mu = 70 sigma = 6.6 sigma * np . random . randn ( 10 ) + mu array([69.91589931, 68.28761328, 75.7545006 , 61.52863167, 79.69327355, 87.56434083, 66.49061338, 59.01518845, 61.99925555, 75.68850397]) Matplotlib's plt.hist() function can be used to quickly plot a normal distribution created with NumPy's np.random.randn() function. You will learn more about Matplotlib and plotting with Python in the next chapter. import matplotlib.pyplot as plt import numpy as np % matplotlib inline mu = 70 sigma = 6.6 sample = sigma * np . random . randn ( 1000 ) + mu plt . hist ( sample ) plt . show () The next section introduces methods to create 2-D NumPy arrays. 2-D Arrays np.meshgrid() NumPy's np.meshgrid() function takes in two positional arguments which are 1D NumPy arrays. The two input arrays do not have to contain the same number of elements. The outputs of the np.meshgrid() function are two 2D arrays. One of the 2D arrays has the same values in each row; the other 2D array has the same values in each column. np . meshgrid ( array1 , array2 ) x = np . arange ( 0 , 6 ) y = np . arange ( 0 , 11 , 2 ) X , Y = np . meshgrid ( x , y ) print ( X ) print ( Y ) [[0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5]] [[ 0 0 0 0 0 0] [ 2 2 2 2 2 2] [ 4 4 4 4 4 4] [ 6 6 6 6 6 6] [ 8 8 8 8 8 8] [10 10 10 10 10 10]] Note how the first array X has the same numbers in each row, and the second array Y has the same numbers in each column. np.mgrid[] NumPy's np.mgrid[] function is similar to np.meshgrid() , but has a \"MATLAB-like\" syntax and behavior. Use square brackets [ ] after the np.mgrid function name. Separate the two \"lists\" passed as input arguments with a comma and use the start:stop:step indexing method. The outputs of the np.mgrid[] function are two 2D arrays. The first 2D array has the same values in each row; the second 2D array has the same values in each column. np . mgrid [ start : stop : step , start : stop : step ] X , Y = np . mgrid [ 0 : 5 , 0 : 11 : 2 ] print ( X ) print ( Y ) [[0 0 0 0 0 0] [1 1 1 1 1 1] [2 2 2 2 2 2] [3 3 3 3 3 3] [4 4 4 4 4 4]] [[ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10]] Section Summary Below is a list of NumPy functions and associated descriptions used in this section. Function Description np.array([list, of, numbers]) Array from a list np.arange(start, stop, step) Array with known step np.linspace(start, stop, num) Array with known size np.logspace(start, stop, num) Logorithmically spaced array np.zeros((rows, cols)) Array of zeros np.ones((rows, cols)) Array of ones np.random.randint(start, stop, num) Random integers np.random.rand(num) Random floats, 0 to 1 np.random.choice(list, num) Random choice from a list np.random.randn(num) Random normal distribution np.meshgrid(array1, array2) Two 2D arrays from two 1D arrays np.mgrid[start:stop:step, start:stop:step] MATLAB meshgrid syntax","title":"5.5 Array Creation"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#array-creation","text":"NumPy arrays are created with the np.array() function. The arguments provided to np.array() needs to be a list or iterable. An example is below. Note how the list [1,2,3] is passed into the function with square brackets at either end. import numpy as np np . array ([ 1 , 2 , 3 ]) array([1, 2, 3]) The data type can be passed into the np.array() function as a second optional keyword argument. Available data types include 'int64' , 'float' , 'complex' and '>U32' (a string data type). import numpy as np np . array ([ 1 , 2 , 3 ], dtype = 'float' ) array([1., 2., 3.]) The data type used in a NumPy array can be determined using the .dtype attribute. For instance, an array of floats returns float64 . import numpy as np my_array = np . array ([ 1 , 2 , 3 ], dtype = 'float' ) my_array . dtype dtype('float64') In addition to np.array() , there are other functions you can use to create NumPy arrays.","title":"Array Creation"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#arrays-of-regularly-spaced-numbers","text":"There are multiple ways to create arrays of regularly spaced numbers with NumPy. The next section introduces five NumPy functions to create regular arrays.","title":"Arrays of Regularly Spaced Numbers"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#nparange","text":"NumPy's np.arange() function creates a NumPy array according the arguments start , stop , step . my_array = np . arange ( start , stop , step ) The np.arange() function is useful for creating an array of regularly spaced numbers where you know the step size . Consider creating a NumPy array of even numbers between 0 and 10 . Note that just like counting in Python, counting in NumPy starts at 0 and ends at n-1 . np . arange ( 0 , 10 + 2 , 2 ) array([ 0, 2, 4, 6, 8, 10])","title":"np.arange()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#nplinspace","text":"NumPy's np.linspace() function creates a NumPy array according the arguments start , stop , number_of_elements . my_array = np . linspace ( start , stop , number_of_elements ) The np.linspace() function is useful for creating an array of regularly spaced numbers when the step size is unknown, but the number of values is. Consider creating a NumPy array of 10 equally spaced numbers between 0 and 2pi . np . linspace ( 0 , 2 * np . pi , 10 ) array([0. , 0.6981317 , 1.3962634 , 2.0943951 , 2.7925268 , 3.4906585 , 4.1887902 , 4.88692191, 5.58505361, 6.28318531])","title":"np.linspace()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#nplogspace","text":"NumPy's np.logspace() function creates a NumPy array of numbers according the arguments start , stop , number of elements , but unlike np.linspace() (which produces a linearly spaced array), np.logspace() produces a logarithmically spaced array. my_array = np . logspace ( start , stop , number of elements , base =< num > ) The np.logspace() function is useful to create an array of logarithmically spaced numbers when the spacing interval is not known but the number of values is. Consider creating a NumPy array of 4 logarithmically spaced numbers between 10 and 100 . The function call is np.logspace(1, 2, 4) . The start is \\(10^1 = 10\\) and the stop is \\(10^2 = 100\\) , and the number of elements is 4 . np . logspace ( 1 , 2 , 4 ) array([ 10. , 21.5443469 , 46.41588834, 100. ]) When using np.logspace(), be careful about inputting large numbers for stop. The stop argument is the exponent or power of 10, not the stop value. Large numbers passed to np.logspace() will produce errors. Remember to pass exponents to np.logspace() . The code below throws an error because \\(10^{1000}\\) is bigger than the largest floating point number supported by a 64 bit computer. np . logspace ( 10 , 1000 , 4 ) C:\\Users\\Peter\\Anaconda3\\lib\\site-packages\\numpy\\core\\function_base.py:274: RuntimeWarning: overflow encountered in power return _nx.power(base, y) array([1.e+10, inf, inf, inf])","title":"np.logspace()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#npzeros","text":"NumPy's np.zeros() function creates a NumPy array containing all zeros of a specific size. np.zeros() is useful when the size of an array is known, but the values that will go into the array have not been created yet. Note how a tuple of (rows,cols) is passed as an argument to np.zeros() . Two sets of parenthesis are needed. my_array = np . zeros (( rows , cols )) np . zeros (( 5 , 5 )) array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]])","title":"np.zeros()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#npones","text":"NumPy's np.ones() function creates a NumPy array containing all 1's of a specific size. Like np.zeros() , np.ones() is useful when the size of an array is known, but the values that will go into the array have not been created yet. my_array = np . ones (( rows , cols )) np . ones (( 3 , 5 )) array([[1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]]) In the next section, you'll learn how to create arrays of random numbers with NumPy.","title":"np.ones()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#arrays-of-random-numbers","text":"NumPy has functions to create arrays of many different types of random numbers in the np.random module. A few of the common random number types are detailed below.","title":"Arrays of Random Numbers"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#array-of-random-integers","text":"Arrays of random integers can be created with NumPy's np.random.randint() function. The general syntax is: np . random . randint ( lower_limit , upper_limit , number_of_values ) The code below creates an array of 5 random integers, each random integer between 1 and 10: np . random . randint ( 0 , 10 , 5 ) array([6, 1, 0, 8, 7]) Array dimensions can be provided as the third argument to the np.random.randint() function. The code below creates a 5 \\(\\times\\) 5 array of random numbers between 1 and 10: np . random . randint ( 0 , 10 ,[ 5 , 5 ]) array([[6, 9, 6, 1, 0], [6, 6, 3, 0, 7], [1, 3, 5, 9, 2], [9, 9, 4, 1, 0], [6, 7, 1, 7, 2]])","title":"Array of Random Integers"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#array-of-random-floats","text":"Arrays of random floating point numbers can be created with NumPy's np.random.rand() function. The general syntax is: np . random . rand ( number of values ) To create an array of 5 random floats between 0 and 1: np . random . rand ( 5 ) array([0.28031033, 0.18841544, 0.81582107, 0.85694189, 0.31810357]) The upper and lower ranges of random floats can me modified with arithmetic. To expand the range of random floats to between 0 and 10 , multiply the result by 10 . np . random . rand ( 5 ) * 10 array([1.56240783, 0.96206982, 4.58545583, 8.49695137, 9.34050894]) To change the range to between 11 and 13 , we multiply the range by 2 (range 0-2), then add 11 to the result. np . random . rand ( 5 ) * 2 + 11 array([11.48381119, 12.17928723, 11.22024366, 12.12511413, 12.31208729])","title":"Array of Random Floats"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#random-array-choice-from-a-list","text":"NumPy can be used to choose an array of numbers randomly selected from a list or array. np . random . choice ( list_of_choices , number_of_choices ) To choose three numbers at random from a list of [1,5,9,11] use: lst = [ 1 , 5 , 9 , 11 ] np . random . choice ( lst , 3 ) array([ 5, 11, 5])","title":"Random Array Choice from  a List"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#random-array-with-a-normal-distribution","text":"np.random.randn() returns an array of random numbers with a normal distribution, assuming a mean of 0 and variance of 1. np . random . randn ( number_of_values ) np . random . randn ( 10 ) array([-1.15325763, -0.69864105, -0.39476384, 1.35101393, -0.51892399, 0.56400008, -0.21046968, -1.05542913, -0.44973573, -0.43243792]) To specify a mean mu and a standard deviation sigma , the function can be wrapped with: mu = 70 sigma = 6.6 sigma * np . random . randn ( 10 ) + mu array([69.91589931, 68.28761328, 75.7545006 , 61.52863167, 79.69327355, 87.56434083, 66.49061338, 59.01518845, 61.99925555, 75.68850397]) Matplotlib's plt.hist() function can be used to quickly plot a normal distribution created with NumPy's np.random.randn() function. You will learn more about Matplotlib and plotting with Python in the next chapter. import matplotlib.pyplot as plt import numpy as np % matplotlib inline mu = 70 sigma = 6.6 sample = sigma * np . random . randn ( 1000 ) + mu plt . hist ( sample ) plt . show () The next section introduces methods to create 2-D NumPy arrays.","title":"Random Array with a Normal Distribution"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#2-d-arrays","text":"","title":"2-D Arrays"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#npmeshgrid","text":"NumPy's np.meshgrid() function takes in two positional arguments which are 1D NumPy arrays. The two input arrays do not have to contain the same number of elements. The outputs of the np.meshgrid() function are two 2D arrays. One of the 2D arrays has the same values in each row; the other 2D array has the same values in each column. np . meshgrid ( array1 , array2 ) x = np . arange ( 0 , 6 ) y = np . arange ( 0 , 11 , 2 ) X , Y = np . meshgrid ( x , y ) print ( X ) print ( Y ) [[0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5] [0 1 2 3 4 5]] [[ 0 0 0 0 0 0] [ 2 2 2 2 2 2] [ 4 4 4 4 4 4] [ 6 6 6 6 6 6] [ 8 8 8 8 8 8] [10 10 10 10 10 10]] Note how the first array X has the same numbers in each row, and the second array Y has the same numbers in each column.","title":"np.meshgrid()"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#npmgrid","text":"NumPy's np.mgrid[] function is similar to np.meshgrid() , but has a \"MATLAB-like\" syntax and behavior. Use square brackets [ ] after the np.mgrid function name. Separate the two \"lists\" passed as input arguments with a comma and use the start:stop:step indexing method. The outputs of the np.mgrid[] function are two 2D arrays. The first 2D array has the same values in each row; the second 2D array has the same values in each column. np . mgrid [ start : stop : step , start : stop : step ] X , Y = np . mgrid [ 0 : 5 , 0 : 11 : 2 ] print ( X ) print ( Y ) [[0 0 0 0 0 0] [1 1 1 1 1 1] [2 2 2 2 2 2] [3 3 3 3 3 3] [4 4 4 4 4 4]] [[ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10] [ 0 2 4 6 8 10]]","title":"np.mgrid[]"},{"location":"05-NumPy-and-Arrays/05-05-Array-Creation/#section-summary","text":"Below is a list of NumPy functions and associated descriptions used in this section. Function Description np.array([list, of, numbers]) Array from a list np.arange(start, stop, step) Array with known step np.linspace(start, stop, num) Array with known size np.logspace(start, stop, num) Logorithmically spaced array np.zeros((rows, cols)) Array of zeros np.ones((rows, cols)) Array of ones np.random.randint(start, stop, num) Random integers np.random.rand(num) Random floats, 0 to 1 np.random.choice(list, num) Random choice from a list np.random.randn(num) Random normal distribution np.meshgrid(array1, array2) Two 2D arrays from two 1D arrays np.mgrid[start:stop:step, start:stop:step] MATLAB meshgrid syntax","title":"Section Summary"},{"location":"05-NumPy-and-Arrays/05-06-Array-Indexing/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Array Indexing Elements in NumPy arrays can be accessed by indexing . Indexing is an operation that pulls out a select set of values from an array. The index of a value in an array is that value's location within the array. There is a difference between the value and where the value is stored in an array. An array with 3 values is created in the code section below. import numpy as np a = np . array ([ 2 , 4 , 6 ]) print ( a ) [2 4 6] The array above contains three values: 2 , 4 and 6 . Each of these values has a different index. Remember! Counting in Python starts at 0 and ends at n-1 The value 2 has an index of 0. We could also say 2 is in location 0 of the array. The value 4 has an index of 1 and the value 6 has an index of 2 . The table below shows the index (or location) of each value in the array. Index (or location) Value 0 2 1 4 2 6 Individual values stored in an array can be accessed with indexing. The general form to index a NumPy array is below: < value > = < array > [ index ] Where <value> is the value stored in the array, <array> is the array object name and [index] specifies the index or location of that value. In the array above, the value 6 is stored at index 2. import numpy as np a = np . array ([ 2 , 4 , 6 ]) print ( a ) value = a [ 2 ] print ( value ) [2 4 6] 6 Multi-dimensional Array Indexing Multi-dimensional arrays can be indexed as well. A simple 2-D array is defined by a list of lists. import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) [[2 3 4] [6 7 8]] Values in a 2-D array can be accessed using the general notation below: < value > = < array > [ row , col ] Where <value> is the value pulled out of the 2-D array and [row,col] specifies the row and column index of the value. Remember Python counting starts at zero, so the first row is row zero and the first column is column zero. We can access the value 8 in the array above by calling the row and column index [1,2] . This corresponds to the 2nd row (remember row 0 is the first row) and the 3rd column (column 0 is the first column). import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) value = a [ 1 , 2 ] print ( value ) [[2 3 4] [6 7 8]] 8 Assigning Values with Indexing Array indexing is used to access values in an array. And array indexing can also be used for assigning values of an array. The general form used to assign a value to a particular index or location in an array is below: < array > [ index ] = < value > Where <value> is the new value going into the array and [index] is the location the new value will occupy. The code below puts the value 10 into the second index or location of array a . import numpy as np a = np . array ([ 2 , 4 , 6 ]) a [ 2 ] = 10 print ( a ) [ 2 4 10] Values can also be assigned to a particular location in a 2-D arrays using the form: < array > [ row , col ] = < value > The code example below shows the value 20 assigned to the 2nd row (index 1 ) and 3rd column (index 2 ) of the array. import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) a [ 1 , 2 ] = 20 print ( a ) [[2 3 4] [6 7 8]] [[ 2 3 4] [ 6 7 20]]","title":"5.6 Array Indexing"},{"location":"05-NumPy-and-Arrays/05-06-Array-Indexing/#array-indexing","text":"Elements in NumPy arrays can be accessed by indexing . Indexing is an operation that pulls out a select set of values from an array. The index of a value in an array is that value's location within the array. There is a difference between the value and where the value is stored in an array. An array with 3 values is created in the code section below. import numpy as np a = np . array ([ 2 , 4 , 6 ]) print ( a ) [2 4 6] The array above contains three values: 2 , 4 and 6 . Each of these values has a different index. Remember! Counting in Python starts at 0 and ends at n-1 The value 2 has an index of 0. We could also say 2 is in location 0 of the array. The value 4 has an index of 1 and the value 6 has an index of 2 . The table below shows the index (or location) of each value in the array. Index (or location) Value 0 2 1 4 2 6 Individual values stored in an array can be accessed with indexing. The general form to index a NumPy array is below: < value > = < array > [ index ] Where <value> is the value stored in the array, <array> is the array object name and [index] specifies the index or location of that value. In the array above, the value 6 is stored at index 2. import numpy as np a = np . array ([ 2 , 4 , 6 ]) print ( a ) value = a [ 2 ] print ( value ) [2 4 6] 6","title":"Array Indexing"},{"location":"05-NumPy-and-Arrays/05-06-Array-Indexing/#multi-dimensional-array-indexing","text":"Multi-dimensional arrays can be indexed as well. A simple 2-D array is defined by a list of lists. import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) [[2 3 4] [6 7 8]] Values in a 2-D array can be accessed using the general notation below: < value > = < array > [ row , col ] Where <value> is the value pulled out of the 2-D array and [row,col] specifies the row and column index of the value. Remember Python counting starts at zero, so the first row is row zero and the first column is column zero. We can access the value 8 in the array above by calling the row and column index [1,2] . This corresponds to the 2nd row (remember row 0 is the first row) and the 3rd column (column 0 is the first column). import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) value = a [ 1 , 2 ] print ( value ) [[2 3 4] [6 7 8]] 8","title":"Multi-dimensional Array Indexing"},{"location":"05-NumPy-and-Arrays/05-06-Array-Indexing/#assigning-values-with-indexing","text":"Array indexing is used to access values in an array. And array indexing can also be used for assigning values of an array. The general form used to assign a value to a particular index or location in an array is below: < array > [ index ] = < value > Where <value> is the new value going into the array and [index] is the location the new value will occupy. The code below puts the value 10 into the second index or location of array a . import numpy as np a = np . array ([ 2 , 4 , 6 ]) a [ 2 ] = 10 print ( a ) [ 2 4 10] Values can also be assigned to a particular location in a 2-D arrays using the form: < array > [ row , col ] = < value > The code example below shows the value 20 assigned to the 2nd row (index 1 ) and 3rd column (index 2 ) of the array. import numpy as np a = np . array ([[ 2 , 3 , 4 ],[ 6 , 7 , 8 ]]) print ( a ) a [ 1 , 2 ] = 20 print ( a ) [[2 3 4] [6 7 8]] [[ 2 3 4] [ 6 7 20]]","title":"Assigning Values with Indexing"},{"location":"05-NumPy-and-Arrays/05-07-Array-Slicing/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Array Slicing Multiple values stored within an array can be accessed simultaneously with array slicing . To pull out a section or slice of an array, the colon operator : is used when calling the index. The general form is: < slice > = < array > [ start : stop ] Where <slice> is the slice or section of the array object <array> . The index of the slice is specified in [start:stop] . Remember Python counting starts at 0 and ends at n-1 . The index [0:2] pulls the first two values out of an array. The index [1:3] pulls the second and third values out of an array. An example of slicing the first two elements out of an array is below. import numpy as np a = np . array ([ 2 , 4 , 6 ]) b = a [ 0 : 2 ] print ( b ) [2 4] On either side of the colon, a blank stands for \"default\". The default start is index 0, the default step is 1, and the default stop is the last index. [:2] corresponds to [start=default:stop=2] [1:] corresponds to [start=1:stop=default] Therefore, the slicing operation [:2] pulls out the first and second values in an array. The slicing operation [1:] pull out the second through the last values in an array. The example below illustrates the default stop value is the last value in the array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) print ( a ) b = a [ 1 :] print ( b ) [2 4 6 8] [4 6 8] The next example shows the default start value is the first value in the array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) print ( a ) b = a [: 3 ] print ( b ) [2 4 6 8] [2 4 6] The following indexing operations output the same array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) b = a [ 0 : 4 ] print ( b ) c = a [: 4 ] print ( c ) d = a [ 0 :] print ( d ) e = a [:] print ( e ) [2 4 6 8] [2 4 6 8] [2 4 6 8] [2 4 6 8] Slicing 2D Arrays 2D NumPy arrays can be sliced with the general form: < slice > = < array > [ start_row : end_row , start_col : end_col ] The code section below creates a two-row by four-column array and indexes out the first two rows and the first three columns. import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) print ( a ) b = a [ 0 : 2 , 0 : 3 ] print ( b ) [[ 2 4 6 8] [10 20 30 40]] [[ 2 4 6] [10 20 30]] The code section below slices out the first two rows and all columns from array a . import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) b = a [: 2 , :] #[first two rows, all columns] print ( b ) [[ 2 4 6 8] [10 20 30 40]] Again, a blank represents the defaults: the first index, count by 1, or the last index. The colon operator all by itself represents \"all\". import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) b = a [:,:] #[all rows, all columns] print ( b ) [[ 2 4 6 8] [10 20 30 40]]","title":"5.7 Array Slicing"},{"location":"05-NumPy-and-Arrays/05-07-Array-Slicing/#array-slicing","text":"Multiple values stored within an array can be accessed simultaneously with array slicing . To pull out a section or slice of an array, the colon operator : is used when calling the index. The general form is: < slice > = < array > [ start : stop ] Where <slice> is the slice or section of the array object <array> . The index of the slice is specified in [start:stop] . Remember Python counting starts at 0 and ends at n-1 . The index [0:2] pulls the first two values out of an array. The index [1:3] pulls the second and third values out of an array. An example of slicing the first two elements out of an array is below. import numpy as np a = np . array ([ 2 , 4 , 6 ]) b = a [ 0 : 2 ] print ( b ) [2 4] On either side of the colon, a blank stands for \"default\". The default start is index 0, the default step is 1, and the default stop is the last index. [:2] corresponds to [start=default:stop=2] [1:] corresponds to [start=1:stop=default] Therefore, the slicing operation [:2] pulls out the first and second values in an array. The slicing operation [1:] pull out the second through the last values in an array. The example below illustrates the default stop value is the last value in the array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) print ( a ) b = a [ 1 :] print ( b ) [2 4 6 8] [4 6 8] The next example shows the default start value is the first value in the array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) print ( a ) b = a [: 3 ] print ( b ) [2 4 6 8] [2 4 6] The following indexing operations output the same array. import numpy as np a = np . array ([ 2 , 4 , 6 , 8 ]) b = a [ 0 : 4 ] print ( b ) c = a [: 4 ] print ( c ) d = a [ 0 :] print ( d ) e = a [:] print ( e ) [2 4 6 8] [2 4 6 8] [2 4 6 8] [2 4 6 8]","title":"Array Slicing"},{"location":"05-NumPy-and-Arrays/05-07-Array-Slicing/#slicing-2d-arrays","text":"2D NumPy arrays can be sliced with the general form: < slice > = < array > [ start_row : end_row , start_col : end_col ] The code section below creates a two-row by four-column array and indexes out the first two rows and the first three columns. import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) print ( a ) b = a [ 0 : 2 , 0 : 3 ] print ( b ) [[ 2 4 6 8] [10 20 30 40]] [[ 2 4 6] [10 20 30]] The code section below slices out the first two rows and all columns from array a . import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) b = a [: 2 , :] #[first two rows, all columns] print ( b ) [[ 2 4 6 8] [10 20 30 40]] Again, a blank represents the defaults: the first index, count by 1, or the last index. The colon operator all by itself represents \"all\". import numpy as np a = np . array ([[ 2 , 4 , 6 , 8 ], [ 10 , 20 , 30 , 40 ]]) b = a [:,:] #[all rows, all columns] print ( b ) [[ 2 4 6 8] [10 20 30 40]]","title":"Slicing 2D Arrays"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Array Operations Mathematical operations can be completed using NumPy arrays. Scalar Addition Scalars can be added and subtracted from arrays and arrays can be added and subtracted from each other: import numpy as np a = np . array ([ 1 , 2 , 3 ]) b = a + 2 b array([3, 4, 5]) a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 2 , 4 , 6 ]) c = a + b c array([3, 6, 9]) Scalar Multiplication NumPy arrays can be multiplied and divided by scalar integers and floats: a = np . array ([ 1 , 2 , 3 ]) b = 3 * a b array([3, 6, 9]) a = np . array ([ 10 , 20 , 30 ]) b = a / 2 b array([ 5., 10., 15.]) Array Multiplication NumPy arrays can be multiplied by each other using matrix multiplication. These matrix multiplication methods include element-wise multiplication, the dot product, and the cross product. Element-wise Multiplication The standard multiplication sign in Python * produces element-wise multiplication on NumPy arrays. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) a * b array([ 4, 10, 18]) Dot Product The np.dot() function calculates the dot product of two arrays. Note that the dot product of two arrays is a scalar. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) np . dot ( a , b ) 32 Cross Product The np.cross() function calculates the cross product of two arrays. Note that the cross product of two arrays is an array. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) np . cross ( a , b ) array([-3, 6, -3]) Exponents and Logarithms np.exp() NumPy's np.exp() function produces element-wise \\(e^x\\) exponentiation. a = np . array ([ 1 , 2 , 3 ]) np . exp ( a ) array([ 2.71828183, 7.3890561 , 20.08553692]) Logarithms NumPy has three logarithmic functions. np.log() - natural logarithm (log base \\(e\\) ) np.log2() - logarithm base 2 np.log10() - logarithm base 10 np . log ( np . e ) 1.0 np . log2 ( 16 ) 4.0 np . log10 ( 1000 ) 3.0 Trigonometry NumPy also contains all of the standard trigonometry functions which operate on arrays. np.sin() - sin np.cos() - cosine np.tan() - tangent np.arcsin() - arc sine np.arccos() - arc cosine np.arctan() - arc tangent np.hypot() - given sides of a triangle, returns hypotenuse import numpy as np np . set_printoptions ( 4 ) # show 4 numbers after the decimal point a = np . array ([ 0 , np . pi / 4 , np . pi / 3 , np . pi / 2 ]) print ( np . sin ( a )) print ( np . cos ( a )) print ( np . tan ( a )) print ( f \"Sides 3 and 4, hypotenuse { np . hypot ( 3 , 4 ) } \" ) [0. 0.7071 0.866 1. ] [1.0000e+00 7.0711e-01 5.0000e-01 6.1232e-17] [0.0000e+00 1.0000e+00 1.7321e+00 1.6331e+16] Sides 3 and 4, hypotenuse 5.0 NumPy contains functions to convert arrays of angles between degrees and radians. deg2rad() - convert from degrees to radians rad2deg() - convert from radians to degrees a = np . array ([ np . pi , 2 * np . pi ]) np . rad2deg ( a ) array([180., 360.]) a = np . array ([ 0 , 90 , 180 , 270 ]) np . deg2rad ( a ) array([0. , 1.5708, 3.1416, 4.7124])","title":"5.8 Array Operations"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#array-operations","text":"Mathematical operations can be completed using NumPy arrays.","title":"Array Operations"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#scalar-addition","text":"Scalars can be added and subtracted from arrays and arrays can be added and subtracted from each other: import numpy as np a = np . array ([ 1 , 2 , 3 ]) b = a + 2 b array([3, 4, 5]) a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 2 , 4 , 6 ]) c = a + b c array([3, 6, 9])","title":"Scalar Addition"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#scalar-multiplication","text":"NumPy arrays can be multiplied and divided by scalar integers and floats: a = np . array ([ 1 , 2 , 3 ]) b = 3 * a b array([3, 6, 9]) a = np . array ([ 10 , 20 , 30 ]) b = a / 2 b array([ 5., 10., 15.])","title":"Scalar Multiplication"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#array-multiplication","text":"NumPy arrays can be multiplied by each other using matrix multiplication. These matrix multiplication methods include element-wise multiplication, the dot product, and the cross product.","title":"Array Multiplication"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#element-wise-multiplication","text":"The standard multiplication sign in Python * produces element-wise multiplication on NumPy arrays. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) a * b array([ 4, 10, 18])","title":"Element-wise Multiplication"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#dot-product","text":"The np.dot() function calculates the dot product of two arrays. Note that the dot product of two arrays is a scalar. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) np . dot ( a , b ) 32","title":"Dot Product"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#cross-product","text":"The np.cross() function calculates the cross product of two arrays. Note that the cross product of two arrays is an array. a = np . array ([ 1 , 2 , 3 ]) b = np . array ([ 4 , 5 , 6 ]) np . cross ( a , b ) array([-3, 6, -3])","title":"Cross Product"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#exponents-and-logarithms","text":"","title":"Exponents and Logarithms"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#npexp","text":"NumPy's np.exp() function produces element-wise \\(e^x\\) exponentiation. a = np . array ([ 1 , 2 , 3 ]) np . exp ( a ) array([ 2.71828183, 7.3890561 , 20.08553692])","title":"np.exp()"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#logarithms","text":"NumPy has three logarithmic functions. np.log() - natural logarithm (log base \\(e\\) ) np.log2() - logarithm base 2 np.log10() - logarithm base 10 np . log ( np . e ) 1.0 np . log2 ( 16 ) 4.0 np . log10 ( 1000 ) 3.0","title":"Logarithms"},{"location":"05-NumPy-and-Arrays/05-08-Array-Operations/#trigonometry","text":"NumPy also contains all of the standard trigonometry functions which operate on arrays. np.sin() - sin np.cos() - cosine np.tan() - tangent np.arcsin() - arc sine np.arccos() - arc cosine np.arctan() - arc tangent np.hypot() - given sides of a triangle, returns hypotenuse import numpy as np np . set_printoptions ( 4 ) # show 4 numbers after the decimal point a = np . array ([ 0 , np . pi / 4 , np . pi / 3 , np . pi / 2 ]) print ( np . sin ( a )) print ( np . cos ( a )) print ( np . tan ( a )) print ( f \"Sides 3 and 4, hypotenuse { np . hypot ( 3 , 4 ) } \" ) [0. 0.7071 0.866 1. ] [1.0000e+00 7.0711e-01 5.0000e-01 6.1232e-17] [0.0000e+00 1.0000e+00 1.7321e+00 1.6331e+16] Sides 3 and 4, hypotenuse 5.0 NumPy contains functions to convert arrays of angles between degrees and radians. deg2rad() - convert from degrees to radians rad2deg() - convert from radians to degrees a = np . array ([ np . pi , 2 * np . pi ]) np . rad2deg ( a ) array([180., 360.]) a = np . array ([ 0 , 90 , 180 , 270 ]) np . deg2rad ( a ) array([0. , 1.5708, 3.1416, 4.7124])","title":"Trigonometry"},{"location":"05-NumPy-and-Arrays/05-09-Systems-of-Linear-Equations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Systems of Linear Equations Systems of linear equations can be solved with arrays and NumPy. A system of linear equations is shown below: \\[ 8x + 3y -2z = 9 \\] \\[ -4x + 7y + 5z = 15 \\] \\[ 3x + 4y - 12z = 35 \\] NumPy's np.linalg.solve() function can be used to solve this system of equations for the variables \\(x\\) , \\(y\\) and \\(z\\) . The steps to solve the system of linear equations with np.linalg.solve() are below: Create NumPy array A as a 3 by 3 array of the coefficients Create a NumPy array b as the right-hand side of the equations (9, 15, 35) Solve for the values of \\(x\\) , \\(y\\) and \\(z\\) using np.linalg.solve(A, b) . The resulting array has three entries. One entry for each variable. import numpy as np A = np . array ([[ 8 , 3 , - 2 ], [ - 4 , 7 , 5 ], [ 3 , 4 , - 12 ]]) b = np . array ([ 9 , 15 , 35 ]) x = np . linalg . solve ( A , b ) x array([-0.58226371, 3.22870478, -1.98599767]) We can plug the values of \\(x\\) , \\(y\\) , and \\(z\\) back into one of the equations to check the answer. \\(x\\) is the first entry of the array, \\(y\\) is the second entry of the array, and \\(z\\) is the third entry of the array. \\(x\\) = x[0] \\(y\\) = x[1] \\(z\\) = x[2] When these values are plugged into the equation from above: \\[ 8x + 3y -2z = 9 \\] The answer should be 9.0 . 8 * x [ 0 ] + 3 * x [ 1 ] - 2 * x [ 2 ] 9.0","title":"5.9 Systems of Linear Equations"},{"location":"05-NumPy-and-Arrays/05-09-Systems-of-Linear-Equations/#systems-of-linear-equations","text":"Systems of linear equations can be solved with arrays and NumPy. A system of linear equations is shown below: \\[ 8x + 3y -2z = 9 \\] \\[ -4x + 7y + 5z = 15 \\] \\[ 3x + 4y - 12z = 35 \\] NumPy's np.linalg.solve() function can be used to solve this system of equations for the variables \\(x\\) , \\(y\\) and \\(z\\) . The steps to solve the system of linear equations with np.linalg.solve() are below: Create NumPy array A as a 3 by 3 array of the coefficients Create a NumPy array b as the right-hand side of the equations (9, 15, 35) Solve for the values of \\(x\\) , \\(y\\) and \\(z\\) using np.linalg.solve(A, b) . The resulting array has three entries. One entry for each variable. import numpy as np A = np . array ([[ 8 , 3 , - 2 ], [ - 4 , 7 , 5 ], [ 3 , 4 , - 12 ]]) b = np . array ([ 9 , 15 , 35 ]) x = np . linalg . solve ( A , b ) x array([-0.58226371, 3.22870478, -1.98599767]) We can plug the values of \\(x\\) , \\(y\\) , and \\(z\\) back into one of the equations to check the answer. \\(x\\) is the first entry of the array, \\(y\\) is the second entry of the array, and \\(z\\) is the third entry of the array. \\(x\\) = x[0] \\(y\\) = x[1] \\(z\\) = x[2] When these values are plugged into the equation from above: \\[ 8x + 3y -2z = 9 \\] The answer should be 9.0 . 8 * x [ 0 ] + 3 * x [ 1 ] - 2 * x [ 2 ] 9.0","title":"Systems of Linear Equations"},{"location":"05-NumPy-and-Arrays/05-10-Summary/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Summary In this chapter, you learned how to work with NumPy arrays. NumPy is a Python package used for numerical calculations and working with arrays. An array is a data structure that only contains objects that share the same data type. Arrays can be one dimensional, two dimensional or up to n-dimensional. Arrays are faster than lists in large-scale numerical calculations. You learned how to create arrays in a variety of ways: Create an array from a Python list with np.array() Create an array of regularly spaced numbers with np.arange() , np.linspace() , and np.logspace Create an array of random numbers with np.random.ranint() , np.random.rand() , and np.random.randn() Create two 2D arrays from two 1D arrays with np.meshgrid() and np.mgrid() In the middle of the chapter, you learned how to index and slice arrays. Slicing NumPy arrays share the same syntax used to slice Python lists and strings. At the end of the chapter, you learned how to run mathematical operations on arrays. NumPy's mathematical functions operate on arrays like Python's math functions operate on integers and floats. NumPy has additional functions like np.dot() and np.cross() that cannot be applied to scalars. NumPy's np.linalg.solve() function can be used to solve systems of linear equations. Key Terms and Concepts NumPy array scalar computationally expensive slice index datatype homogeneous homogeneous data type heterogeneous data type NumPy array scalar computationally expensive slice index datatype homogeneous homogeneous data type heterogeneous data type element-wise system of linear equations attribute scientific computing Unicode iterable logarithmically spaced numbers normal distribution meshgrid matrix multiplication methods dot product cross product element-wise system of linear equations attribute scientific computing Unicode iterable logarithmically spaced numbers normal distribution meshgrid matrix multiplication methods dot product cross product Summary of NumPy Functions NumPy Array Creation Functions NumPy Function Description np.array() array from a list np.arange() array from start, stop, step np.linspace() array of linearly spaced numbers np.logspace() array of logarythmically spaced numbers np.zeros() array of all zeros np.ones() array of all ones NumPy 2D Array Creation Functions NumPy Function Description np.meshgrid() 2D array from two 1D arrays np.mgrid[] meshgrid with a MATLAB-like syntax NumPy Arrays of Random Numbers NumPy Function Description np.random.randint() array of random integers np.random.rand() array of random floats np.random.choice() random array chosen from list or array np.random.randn() array of numbers with a normal distribution NumPy Array Mathematical Functions NumPy Function Description array1 + array2 element-wise addition array1 - array2 element-wise subtraction array1 * array2 element-wise multiplication array1 / array2 element-wise division scalar * array element-wise scalar multiplication np.dot() dot product np.cross() cross product np.exp() \\(e^x\\) exponentiation np.log() natural logarithm np.log2() logarithm base 2 np.log10() logarithm base 10 np.sin() sine np.cos() cosine np.tan() tangent np.arcsin() arc sine np.arccos() arc cosine np.arctan() arc tangent np.rad2deg() radians to degrees np.deg2rad() degrees to radians np.hypot() hypotenuse given sides or a right trangle np.linalg.solve() solve a system of linear equations","title":"5.10 Summary"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#summary","text":"In this chapter, you learned how to work with NumPy arrays. NumPy is a Python package used for numerical calculations and working with arrays. An array is a data structure that only contains objects that share the same data type. Arrays can be one dimensional, two dimensional or up to n-dimensional. Arrays are faster than lists in large-scale numerical calculations. You learned how to create arrays in a variety of ways: Create an array from a Python list with np.array() Create an array of regularly spaced numbers with np.arange() , np.linspace() , and np.logspace Create an array of random numbers with np.random.ranint() , np.random.rand() , and np.random.randn() Create two 2D arrays from two 1D arrays with np.meshgrid() and np.mgrid() In the middle of the chapter, you learned how to index and slice arrays. Slicing NumPy arrays share the same syntax used to slice Python lists and strings. At the end of the chapter, you learned how to run mathematical operations on arrays. NumPy's mathematical functions operate on arrays like Python's math functions operate on integers and floats. NumPy has additional functions like np.dot() and np.cross() that cannot be applied to scalars. NumPy's np.linalg.solve() function can be used to solve systems of linear equations.","title":"Summary"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#key-terms-and-concepts","text":"NumPy array scalar computationally expensive slice index datatype homogeneous homogeneous data type heterogeneous data type NumPy array scalar computationally expensive slice index datatype homogeneous homogeneous data type heterogeneous data type element-wise system of linear equations attribute scientific computing Unicode iterable logarithmically spaced numbers normal distribution meshgrid matrix multiplication methods dot product cross product element-wise system of linear equations attribute scientific computing Unicode iterable logarithmically spaced numbers normal distribution meshgrid matrix multiplication methods dot product cross product","title":"Key Terms and Concepts"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#summary-of-numpy-functions","text":"","title":"Summary of NumPy Functions"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#numpy-array-creation-functions","text":"NumPy Function Description np.array() array from a list np.arange() array from start, stop, step np.linspace() array of linearly spaced numbers np.logspace() array of logarythmically spaced numbers np.zeros() array of all zeros np.ones() array of all ones","title":"NumPy Array Creation Functions"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#numpy-2d-array-creation-functions","text":"NumPy Function Description np.meshgrid() 2D array from two 1D arrays np.mgrid[] meshgrid with a MATLAB-like syntax","title":"NumPy 2D Array Creation Functions"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#numpy-arrays-of-random-numbers","text":"NumPy Function Description np.random.randint() array of random integers np.random.rand() array of random floats np.random.choice() random array chosen from list or array np.random.randn() array of numbers with a normal distribution","title":"NumPy Arrays of Random Numbers"},{"location":"05-NumPy-and-Arrays/05-10-Summary/#numpy-array-mathematical-functions","text":"NumPy Function Description array1 + array2 element-wise addition array1 - array2 element-wise subtraction array1 * array2 element-wise multiplication array1 / array2 element-wise division scalar * array element-wise scalar multiplication np.dot() dot product np.cross() cross product np.exp() \\(e^x\\) exponentiation np.log() natural logarithm np.log2() logarithm base 2 np.log10() logarithm base 10 np.sin() sine np.cos() cosine np.tan() tangent np.arcsin() arc sine np.arccos() arc cosine np.arctan() arc tangent np.rad2deg() radians to degrees np.deg2rad() degrees to radians np.hypot() hypotenuse given sides or a right trangle np.linalg.solve() solve a system of linear equations","title":"NumPy Array Mathematical Functions"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Review Questions Array Creation Q05.01 Create an array of the numbers 1 , 5 , 19 , 30 Q05.02 Create an array of the numbers -3 , 15 , 0.001 , 6.02e23 Q05.03 Create an array of integers between -10 and 10 Q05.04 Create an array of 10 equally spaced angles between 0 and 2 \\(\\pi\\) Q05.05 Create an array of logarithmically spaced numbers between 1 and 1 million. Hint: remember to pass exponents to the np.logspace() function. Q05.06 Create an array of 20 random integers between 1 and 10 Q05.07 Create an array of 30 random numbers with a normal distribution Q05.08 Create an array of 30 random numbers with a normal distribution that has a mean \\(\\mu\\) of 78.5 and a standard deviation \\(\\sigma\\) of 5.2 Q05.09 Create an array of 18 random floating-point numbers between 0 and 1 Q05.10 Create an array of 18 random floating-point numbers between -1 and 0 Q05.11 Create an array of 18 random floating-point numbers between 0 and 10 Q05.12 Create a variable \\(x\\) that is an NumPy array which contains values 0, 0.1, 0.2, ..., 4.9, 5.0. Hard coding the values one will be time-consuming, use a NumPy function to create the array instead. Q05.13 Create a Python list containing the values 1, 2, 5.6, and 9 and store the Python list in a variable called x . Then create a NumPy array of the same values and store it in a variable called y . Q05.14 Create an array called r of 200 evenly spaced numbers between and including 0 to 2 \\(\\pi\\) , then create an array y such that \\(y=10sin(3r)\\) . Q05.15 Create an array of 25 regularly spaced numbers beginning at 10 and ending with 18. Q05.16 Create an array of regularly spaced numbers beginning at 10, ending with 18.4 using an increment of 0.6. Array Manipulation Q05.20 Create a NumPy array called A and store the values 5, 8, -8, 99, and 0 in array A in a single row, five columns. Reshape A to an array with one column and five rows. Q05.21 Create a NumPy array called B and store the values 1, 2, 3, 4, 5 as floats, not integers. Array Slicing Q05.30 Create an array B that contains integers 0 to 24 (including 24) in one row. Then reshape B into a 5 row by 5 column array. (a) Extract the 2nd row from B . Store it as a one column array called x . (b) Store the number of elements in array x in a new variable called y . (c) Extract the last column of B and store it in an array called z . (d) Store a transposed version of B in an array called t . Q05.31 Run the following code to create a NumPy array C C = np.array(range(11)) + 5 (a) Extract the 4th value in array C into a variable called x . (b) Extract the 2nd-to-last value in array C into a variable called y . (c) Extract the values from array C starting from the 3rd value up to and including the 7th value into a variable called z . Q05.32 Run the following code to create a NumPy array D D = np.array(range(18)) + 3 (a) Extract every other value from array D starting from the 2nd value through the 10th value. Store the result in a variable called x . (b) Extract every other value from array D starting from the 10th value through the 2nd value. Store the result a variable called y . (c) Create a variable z that contains all of the values in D in reverse order. Q05.33 The 1D NumPy array F is defined below. But construct your code to work with any 1D NumPy array filled with numbers. F = np.array([5, -4.7, 99, 50, 6, -1, 0, 50, -78, 27, 10]) (a) Select all the elements from F that are greater than 5 and store them in x . (b) Select all of the elements from F that are between 5 and 30 . Store them in y . (c) Select all of the elements from F that are between 5 and 30 or that are equal to 50 . Store them in z . Hint: To perform the logical OR or AND operations, on boolean arrays of the same dimensions, NumPy functions are needed. The standard Python \"or\" and \"and\" will not work. Hint: You can use either logical indexing or np.where() to get the appropriate values from A . Q05.34 The 1D NumPy array B is defined below. But your code should work with any 1D NumPy array filled with numeric values. G = np.array([5, -4.7, 99, 50, 6, -1, 0, 50, -78, 27, 10]) (a) Select all of the positive numbers in G and store them in x . (b) Select all the numbers in G between 0 and 30 and store them in y . (c) Select all of the numbers in G that are either less than -50 or greater than 50 and store them in z . Q05.35 Define an integer c which is a random integer between 100 and 999 (including 100 and 999 ) (a) pull the first digit out of c and assign it to the variable x (b) pull the second digit out of c and assign it to the variable y (c) pull the third digit out of c and assign it to the variable z . Meshgrids Q05.40 Create two 2D arrays from the two 1D arrays below using NumPy's np.meshgrid() function. x = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5] y = [0, 2, 4, 6] Q05.41 Create a meshgrid of the two arrays below: x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Use element-wise multiplication to multiply each element in the first resulting 2D array with the corresponding element is the second array to build a multiplication table. Array Operations Q05.50 Create the two arrays below and perform each calculation. a = [2 4 6] b = [-1 0 1] (a) \\(a + b\\) (b) \\(1.5a -2b\\) (c) \\(0.5ab\\) (d) \\(\\frac{b^2}{a}\\) Q05.51 Create an array of angles between (and including) 0 and 2 \\(\\pi\\) radians in increments of \\(\\pi/2\\) radians. (a) Calculate the sine of each angle in the array (b) Calculate the cosine of each angle in the array (c) Convert each angle in the array to degrees Q05.52 Create the two arrays F1 , F2 below and then perform the following operations. F1 = [-1, 0, 2] F2 = [5, -2, 0] (a) Calculate the dot product of F1 and F2 (b) Calculate cross product of F1 and F2 (c) Calculate the element-wise product (element-wise multiplication of F1 and F2 ) Q05.53 Compute all possible prices of flooring that can have lengths of 2 , 4 , 6 , and 8 meters and widths of 1 , 1.5 , and 2 meters if the flooring costs $32.19 per square meter. Store the result in a 2D array. The lengths should increase from top to bottom and widths should increase from left to right. Q05.54 Create array H defined by the code below: H = np.array([-5, 10, 12, 500, 20, 10, -46, 16]) (a) Create a boolean array x based on the variable H . x should be True everywhere H equals 10 and False everywhere else. (b) Create a boolean array y based on the variable H . y should be True everywhere H is not equal to 10 . y should be False everywhere else. (c) Create a boolean array z based on the variable H . z should be True everywhere H is less than or equal to 20 . z should be False everywhere else. Q05.55 Create array J using the code below: J = np.array(range(7*5)).reshape((7, 5)) J[4, 3] = 500 (a) Store the row index of the number 500 in a variable called row_500 . (b) Store the column index of the number 500 in a variable called col_500 . Q05.56 Create array K using the code below: K = np.random.randint(100, 500, 7*7).reshape(7, 7) K[2, 6] = 250 (a) Extract all of the values from K that are greater or equal to 250 and store them in an array called x . (b) Extract all of the values from K that are less than 250 and store them in an array called y . (c) Programmatically determine which column and which row the number 250 is stored inside of array K . Systems of Linear Equations Q05.70 Use the system of linear equations below to calculate the values of \\(x\\) and \\(y\\) . \\[ 4x - 2y = -42 \\] \\[ -6x + y = 31 \\] Q05.71 Use the system of linear equations below to calculate the values of \\(x\\) , \\(y\\) , and \\(z\\) . \\[ \\frac{x}{2} +2y - z = 5 \\] \\[ x + 3y - 4z = -1 \\] \\[ -x - 3y + 2z = -5 \\] Q05.72 Use the system of linear equations below to calculate the values of \\(F_1\\) , \\(F_2\\) , and \\(F_3\\) . \\[ 2F_1 + 3F_2 - F_3 = -9 \\] \\[ -F_1 + 2F_2 + 5F_3 = -20 \\] \\[ F_1 - F_2 - F_3 = 1 \\]","title":"5.11 Review Questions"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#review-questions","text":"","title":"Review Questions"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#array-creation","text":"Q05.01 Create an array of the numbers 1 , 5 , 19 , 30 Q05.02 Create an array of the numbers -3 , 15 , 0.001 , 6.02e23 Q05.03 Create an array of integers between -10 and 10 Q05.04 Create an array of 10 equally spaced angles between 0 and 2 \\(\\pi\\) Q05.05 Create an array of logarithmically spaced numbers between 1 and 1 million. Hint: remember to pass exponents to the np.logspace() function. Q05.06 Create an array of 20 random integers between 1 and 10 Q05.07 Create an array of 30 random numbers with a normal distribution Q05.08 Create an array of 30 random numbers with a normal distribution that has a mean \\(\\mu\\) of 78.5 and a standard deviation \\(\\sigma\\) of 5.2 Q05.09 Create an array of 18 random floating-point numbers between 0 and 1 Q05.10 Create an array of 18 random floating-point numbers between -1 and 0 Q05.11 Create an array of 18 random floating-point numbers between 0 and 10 Q05.12 Create a variable \\(x\\) that is an NumPy array which contains values 0, 0.1, 0.2, ..., 4.9, 5.0. Hard coding the values one will be time-consuming, use a NumPy function to create the array instead. Q05.13 Create a Python list containing the values 1, 2, 5.6, and 9 and store the Python list in a variable called x . Then create a NumPy array of the same values and store it in a variable called y . Q05.14 Create an array called r of 200 evenly spaced numbers between and including 0 to 2 \\(\\pi\\) , then create an array y such that \\(y=10sin(3r)\\) . Q05.15 Create an array of 25 regularly spaced numbers beginning at 10 and ending with 18. Q05.16 Create an array of regularly spaced numbers beginning at 10, ending with 18.4 using an increment of 0.6.","title":"Array Creation"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#array-manipulation","text":"Q05.20 Create a NumPy array called A and store the values 5, 8, -8, 99, and 0 in array A in a single row, five columns. Reshape A to an array with one column and five rows. Q05.21 Create a NumPy array called B and store the values 1, 2, 3, 4, 5 as floats, not integers.","title":"Array Manipulation"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#array-slicing","text":"Q05.30 Create an array B that contains integers 0 to 24 (including 24) in one row. Then reshape B into a 5 row by 5 column array. (a) Extract the 2nd row from B . Store it as a one column array called x . (b) Store the number of elements in array x in a new variable called y . (c) Extract the last column of B and store it in an array called z . (d) Store a transposed version of B in an array called t . Q05.31 Run the following code to create a NumPy array C C = np.array(range(11)) + 5 (a) Extract the 4th value in array C into a variable called x . (b) Extract the 2nd-to-last value in array C into a variable called y . (c) Extract the values from array C starting from the 3rd value up to and including the 7th value into a variable called z . Q05.32 Run the following code to create a NumPy array D D = np.array(range(18)) + 3 (a) Extract every other value from array D starting from the 2nd value through the 10th value. Store the result in a variable called x . (b) Extract every other value from array D starting from the 10th value through the 2nd value. Store the result a variable called y . (c) Create a variable z that contains all of the values in D in reverse order. Q05.33 The 1D NumPy array F is defined below. But construct your code to work with any 1D NumPy array filled with numbers. F = np.array([5, -4.7, 99, 50, 6, -1, 0, 50, -78, 27, 10]) (a) Select all the elements from F that are greater than 5 and store them in x . (b) Select all of the elements from F that are between 5 and 30 . Store them in y . (c) Select all of the elements from F that are between 5 and 30 or that are equal to 50 . Store them in z . Hint: To perform the logical OR or AND operations, on boolean arrays of the same dimensions, NumPy functions are needed. The standard Python \"or\" and \"and\" will not work. Hint: You can use either logical indexing or np.where() to get the appropriate values from A . Q05.34 The 1D NumPy array B is defined below. But your code should work with any 1D NumPy array filled with numeric values. G = np.array([5, -4.7, 99, 50, 6, -1, 0, 50, -78, 27, 10]) (a) Select all of the positive numbers in G and store them in x . (b) Select all the numbers in G between 0 and 30 and store them in y . (c) Select all of the numbers in G that are either less than -50 or greater than 50 and store them in z . Q05.35 Define an integer c which is a random integer between 100 and 999 (including 100 and 999 ) (a) pull the first digit out of c and assign it to the variable x (b) pull the second digit out of c and assign it to the variable y (c) pull the third digit out of c and assign it to the variable z .","title":"Array Slicing"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#meshgrids","text":"Q05.40 Create two 2D arrays from the two 1D arrays below using NumPy's np.meshgrid() function. x = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5] y = [0, 2, 4, 6] Q05.41 Create a meshgrid of the two arrays below: x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Use element-wise multiplication to multiply each element in the first resulting 2D array with the corresponding element is the second array to build a multiplication table.","title":"Meshgrids"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#array-operations","text":"Q05.50 Create the two arrays below and perform each calculation. a = [2 4 6] b = [-1 0 1] (a) \\(a + b\\) (b) \\(1.5a -2b\\) (c) \\(0.5ab\\) (d) \\(\\frac{b^2}{a}\\) Q05.51 Create an array of angles between (and including) 0 and 2 \\(\\pi\\) radians in increments of \\(\\pi/2\\) radians. (a) Calculate the sine of each angle in the array (b) Calculate the cosine of each angle in the array (c) Convert each angle in the array to degrees Q05.52 Create the two arrays F1 , F2 below and then perform the following operations. F1 = [-1, 0, 2] F2 = [5, -2, 0] (a) Calculate the dot product of F1 and F2 (b) Calculate cross product of F1 and F2 (c) Calculate the element-wise product (element-wise multiplication of F1 and F2 ) Q05.53 Compute all possible prices of flooring that can have lengths of 2 , 4 , 6 , and 8 meters and widths of 1 , 1.5 , and 2 meters if the flooring costs $32.19 per square meter. Store the result in a 2D array. The lengths should increase from top to bottom and widths should increase from left to right. Q05.54 Create array H defined by the code below: H = np.array([-5, 10, 12, 500, 20, 10, -46, 16]) (a) Create a boolean array x based on the variable H . x should be True everywhere H equals 10 and False everywhere else. (b) Create a boolean array y based on the variable H . y should be True everywhere H is not equal to 10 . y should be False everywhere else. (c) Create a boolean array z based on the variable H . z should be True everywhere H is less than or equal to 20 . z should be False everywhere else. Q05.55 Create array J using the code below: J = np.array(range(7*5)).reshape((7, 5)) J[4, 3] = 500 (a) Store the row index of the number 500 in a variable called row_500 . (b) Store the column index of the number 500 in a variable called col_500 . Q05.56 Create array K using the code below: K = np.random.randint(100, 500, 7*7).reshape(7, 7) K[2, 6] = 250 (a) Extract all of the values from K that are greater or equal to 250 and store them in an array called x . (b) Extract all of the values from K that are less than 250 and store them in an array called y . (c) Programmatically determine which column and which row the number 250 is stored inside of array K .","title":"Array Operations"},{"location":"05-NumPy-and-Arrays/05-11-Review-Questions/#systems-of-linear-equations","text":"Q05.70 Use the system of linear equations below to calculate the values of \\(x\\) and \\(y\\) . \\[ 4x - 2y = -42 \\] \\[ -6x + y = 31 \\] Q05.71 Use the system of linear equations below to calculate the values of \\(x\\) , \\(y\\) , and \\(z\\) . \\[ \\frac{x}{2} +2y - z = 5 \\] \\[ x + 3y - 4z = -1 \\] \\[ -x - 3y + 2z = -5 \\] Q05.72 Use the system of linear equations below to calculate the values of \\(F_1\\) , \\(F_2\\) , and \\(F_3\\) . \\[ 2F_1 + 3F_2 - F_3 = -9 \\] \\[ -F_1 + 2F_2 + 5F_3 = -20 \\] \\[ F_1 - F_2 - F_3 = 1 \\]","title":"Systems of Linear Equations"},{"location":"10-Symbolic-Math/10-00-Introduction/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Symbolic Math Introduction By the end of this chapter you will be able to: Define Python variables as symbolic math variables Define mathematical expressions and equations using symbolic math variables Solve for symbolic math variables in terms of other symbolic math variables Derive numerical solutions using symbolic math variable substitution Solve linear and quadratic equations using symbolic math Solve systems of equations using symbolic math","title":"10.1 Introduction"},{"location":"10-Symbolic-Math/10-00-Introduction/#symbolic-math","text":"","title":"Symbolic Math"},{"location":"10-Symbolic-Math/10-00-Introduction/#introduction","text":"By the end of this chapter you will be able to: Define Python variables as symbolic math variables Define mathematical expressions and equations using symbolic math variables Solve for symbolic math variables in terms of other symbolic math variables Derive numerical solutions using symbolic math variable substitution Solve linear and quadratic equations using symbolic math Solve systems of equations using symbolic math","title":"Introduction"},{"location":"10-Symbolic-Math/10-01-SymPy/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); SymPy SymPy (sympy.org) is a Python library for symbolic math . In symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below. \\[ x^{2} + y^{2} = z \\] The expression contains the symbols \\(x\\) , \\(y\\) , and \\(z\\) . If we define a second symbolic math expression: \\[ x = a + b \\] then we can substitue in \\(a + b\\) for \\(x\\) . The result is the expression: \\[ (a + b)^{2} + y^{2} = z \\] \\[ a^{2} + 2ab + b^{2} + y^{2} = z \\] Solving for \\(y\\) in terms of \\(a\\) , \\(b\\) and \\(z\\) results in: \\[ y = \\sqrt{z - a^{2} - 2ab - b^{2}} \\] In the symbolic math substitution above, symbolic math variables were rearranged, grouped, and inserted. None of the variables were equal to a specific number, like 5 or 0.001, but we can still solve for one variable in terms of the other variables when we use symbolic math. If we have numerical values for \\(z\\) , \\(a\\) and \\(b\\) , we can use Python to calculate the value of \\(y\\) . But if we don't have numerical values for \\(z\\) , \\(a\\) and \\(b\\) , Python and the SymPy package can be used to rearrange terms and solve for one variable in terms of the other. Working with mathematical symbols programmatically instead of working with numerical values is called symbolic math .","title":"10.2 SymPy"},{"location":"10-Symbolic-Math/10-01-SymPy/#sympy","text":"SymPy (sympy.org) is a Python library for symbolic math . In symbolic math, symbols are used to represent mathematical expressions. An example of a symbolic math expression is below. \\[ x^{2} + y^{2} = z \\] The expression contains the symbols \\(x\\) , \\(y\\) , and \\(z\\) . If we define a second symbolic math expression: \\[ x = a + b \\] then we can substitue in \\(a + b\\) for \\(x\\) . The result is the expression: \\[ (a + b)^{2} + y^{2} = z \\] \\[ a^{2} + 2ab + b^{2} + y^{2} = z \\] Solving for \\(y\\) in terms of \\(a\\) , \\(b\\) and \\(z\\) results in: \\[ y = \\sqrt{z - a^{2} - 2ab - b^{2}} \\] In the symbolic math substitution above, symbolic math variables were rearranged, grouped, and inserted. None of the variables were equal to a specific number, like 5 or 0.001, but we can still solve for one variable in terms of the other variables when we use symbolic math. If we have numerical values for \\(z\\) , \\(a\\) and \\(b\\) , we can use Python to calculate the value of \\(y\\) . But if we don't have numerical values for \\(z\\) , \\(a\\) and \\(b\\) , Python and the SymPy package can be used to rearrange terms and solve for one variable in terms of the other. Working with mathematical symbols programmatically instead of working with numerical values is called symbolic math .","title":"SymPy"},{"location":"10-Symbolic-Math/10-02-Installing-SymPy/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Installing SymPy To work with symbolic math in Python, the SymPy library needs to be installed. SymPy comes pre-installed with the Anaconda distribution of Python. If you use the Anaconda distribution of Python, SymPy can be installed with the Anaconda Prompt . Type the command below to install SymPy: > conda install sympy Alternatively, you can install SymPy using the Python package manager pip . The command below installs SymPy into the current environment. $ pip install sympy You can confirm your SymPy installation by opening up the Python REPL and typing the two commands below. >>> import sympy >>> sympy.__version__ '1.8' The output above shows SymPy version '1.8' is installed.","title":"10.3 Installing SymPy"},{"location":"10-Symbolic-Math/10-02-Installing-SymPy/#installing-sympy","text":"To work with symbolic math in Python, the SymPy library needs to be installed. SymPy comes pre-installed with the Anaconda distribution of Python. If you use the Anaconda distribution of Python, SymPy can be installed with the Anaconda Prompt . Type the command below to install SymPy: > conda install sympy Alternatively, you can install SymPy using the Python package manager pip . The command below installs SymPy into the current environment. $ pip install sympy You can confirm your SymPy installation by opening up the Python REPL and typing the two commands below. >>> import sympy >>> sympy.__version__ '1.8' The output above shows SymPy version '1.8' is installed.","title":"Installing SymPy"},{"location":"10-Symbolic-Math/10-03-Defining-Variables/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Defining Variables Before we can construct symbolic math expressions or symbolic math equations with SymPy, first we need to create symbolic math variables, also called symbolic math symbols . To define symbolic math variables with SymPy, first import the symbols() function from the SymPy module: from sympy import symbols Symbolic math symbols are declared using SymPy's symbols() function. Pass a string surrounded by quotes to the symbols() function as an input argument. The output of the symbols() function is assigned to a SymPy symbols object (not a string, no quotes). x = symbols ( 'x' ) y = symbols ( 'y' ) SymPy's symbols() function can define multiple symbols in the same line of code. Note the input arguments passed to the symbols() function is a string, entries separated by a space (no comma), and surrounded by quotes. The output of the symbols() function are SymPy symbol objects separated by commas (no quotation marks). x , y = symbols ( 'x y' )","title":"10.4 Defining Variables"},{"location":"10-Symbolic-Math/10-03-Defining-Variables/#defining-variables","text":"Before we can construct symbolic math expressions or symbolic math equations with SymPy, first we need to create symbolic math variables, also called symbolic math symbols . To define symbolic math variables with SymPy, first import the symbols() function from the SymPy module: from sympy import symbols Symbolic math symbols are declared using SymPy's symbols() function. Pass a string surrounded by quotes to the symbols() function as an input argument. The output of the symbols() function is assigned to a SymPy symbols object (not a string, no quotes). x = symbols ( 'x' ) y = symbols ( 'y' ) SymPy's symbols() function can define multiple symbols in the same line of code. Note the input arguments passed to the symbols() function is a string, entries separated by a space (no comma), and surrounded by quotes. The output of the symbols() function are SymPy symbol objects separated by commas (no quotation marks). x , y = symbols ( 'x y' )","title":"Defining Variables"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Expressions and Substitutions from sympy import init_session init_session ( pretty_print = False , quiet = True ) Symbolic math variables can be combined into symbolic math expressions. Once in an expression, symbolic math variables can be exchanged with substitution. Expressions A symbolic math expression is a combination of symbolic math variables with numbers and mathematical operators such as + , - , / , and * . The standard Python rules for calculating numbers apply in SymPy symbolic math expressions. After the symbols x and y are created, a symbolic math expression using x and y can be defined. from sympy import symbols x , y = symbols ( 'x y' ) expr = 2 * x + y Symbolic math variables can be exchanged for other variables or expressions using substitution. Substitution Use SymPy's .subs() method to insert a numerical value into a symbolic math expression. The first argument of the .subs() method is the mathematical symbol and the second argument is the numerical value. In the expression below: \\[ 2x + y \\] If we substitute: \\[ x = 2 \\] The resulting expression is: \\[ 2(2) + y \\] \\[ 4 + y \\] We can code the substitution above using SymPy's .subs() method as shown below. expr . subs ( x , 2 ) y + 4 The .subs() method does not replace variables in place, .subs() only completes a one-time substitution. If expr is called after the .subs() method is applied, the original expr expression is returned. expr 2*x + y To make the substitution permanent, a new expression object needs to be assigned to the output of the .subs() method. expr = 2 * x + y expr2 = expr . subs ( x , 2 ) expr2 y + 4 SymPy variables can also be substituted into SymPy expressions. In the code section below, the symbol \\(z\\) is substituted for the symbol \\(x\\) ( \\(z\\) replaces \\(x\\) ). x , y , z = symbols ( 'x y z' ) expr = 2 * x + y expr2 = expr . subs ( x , z ) expr2 y + 2*z Expressions can also be substituted into other expressions. Consider the following symbolic math expression: \\[ y + 2x^2 + z^{-3} \\] We can substitute in the expression: \\[ y = 2x \\] Which results in: \\[ 2x + 2x^2 + z^{-3} \\] Let's try this same operation with code. x , y , z = symbols ( 'x y z' ) expr = y + 2 * x ** 2 + z ** ( - 3 ) expr2 = expr . subs ( y , 2 * x ) expr2 2*x**2 + 2*x + z**(-3) Worked Example A practical example involving symbolic math variables, expressions, and substitutions can include a complex expression and several replacements. \\[ n_0e^{-Q_v/RT} \\] \\[ n_0 = 3.48 \\times 10^{-6} \\] \\[ Q_v = 12,700 \\] \\[ R = 8.31 \\] \\[ T = 1000 + 273 \\] We can create four symbolic math variables and combine the variables into an expression with the code below. Note how four symbolic math variables were assigned in one line of code. from sympy import symbols , exp n0 , Qv , R , T = symbols ( 'n0 Qv R T' ) expr = n0 * exp ( - Qv / ( R * T )) Multiple SymPy subs() methods can be chained together to substitute multiple variables in one line of code. expr . subs ( n0 , 3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R , 8.31 ) . subs ( T , 1000 + 273 ) 1.04759678564474e-6 To evaluate an expression as a floating-point number, use SymPy's .evalf() method. expr2 = expr . subs ( n0 , 3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R , 8.31 ) . subs ( T , 1000 + 273 ) expr2 . evalf () 1.04759678564474e-6 You can control the number of digits the .evalf() method outputs by passing a number as an argument. Let's represent our final answer as four digits: expr2 . evalf ( 4 ) 1.048e-6 Summary The SymPy functions and methods used in this section are summarized in the table below. SymPy function Description Example symbols() create symbolic math variables x, y = symbols('x y') .subs() substitute a value into an expression expr.subs(x,2) .evalf() evaluate an expression as a float expr.evalf(4)","title":"10.5 Expressions and Substitutions"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/#expressions-and-substitutions","text":"from sympy import init_session init_session ( pretty_print = False , quiet = True ) Symbolic math variables can be combined into symbolic math expressions. Once in an expression, symbolic math variables can be exchanged with substitution.","title":"Expressions and Substitutions"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/#expressions","text":"A symbolic math expression is a combination of symbolic math variables with numbers and mathematical operators such as + , - , / , and * . The standard Python rules for calculating numbers apply in SymPy symbolic math expressions. After the symbols x and y are created, a symbolic math expression using x and y can be defined. from sympy import symbols x , y = symbols ( 'x y' ) expr = 2 * x + y Symbolic math variables can be exchanged for other variables or expressions using substitution.","title":"Expressions"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/#substitution","text":"Use SymPy's .subs() method to insert a numerical value into a symbolic math expression. The first argument of the .subs() method is the mathematical symbol and the second argument is the numerical value. In the expression below: \\[ 2x + y \\] If we substitute: \\[ x = 2 \\] The resulting expression is: \\[ 2(2) + y \\] \\[ 4 + y \\] We can code the substitution above using SymPy's .subs() method as shown below. expr . subs ( x , 2 ) y + 4 The .subs() method does not replace variables in place, .subs() only completes a one-time substitution. If expr is called after the .subs() method is applied, the original expr expression is returned. expr 2*x + y To make the substitution permanent, a new expression object needs to be assigned to the output of the .subs() method. expr = 2 * x + y expr2 = expr . subs ( x , 2 ) expr2 y + 4 SymPy variables can also be substituted into SymPy expressions. In the code section below, the symbol \\(z\\) is substituted for the symbol \\(x\\) ( \\(z\\) replaces \\(x\\) ). x , y , z = symbols ( 'x y z' ) expr = 2 * x + y expr2 = expr . subs ( x , z ) expr2 y + 2*z Expressions can also be substituted into other expressions. Consider the following symbolic math expression: \\[ y + 2x^2 + z^{-3} \\] We can substitute in the expression: \\[ y = 2x \\] Which results in: \\[ 2x + 2x^2 + z^{-3} \\] Let's try this same operation with code. x , y , z = symbols ( 'x y z' ) expr = y + 2 * x ** 2 + z ** ( - 3 ) expr2 = expr . subs ( y , 2 * x ) expr2 2*x**2 + 2*x + z**(-3)","title":"Substitution"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/#worked-example","text":"A practical example involving symbolic math variables, expressions, and substitutions can include a complex expression and several replacements. \\[ n_0e^{-Q_v/RT} \\] \\[ n_0 = 3.48 \\times 10^{-6} \\] \\[ Q_v = 12,700 \\] \\[ R = 8.31 \\] \\[ T = 1000 + 273 \\] We can create four symbolic math variables and combine the variables into an expression with the code below. Note how four symbolic math variables were assigned in one line of code. from sympy import symbols , exp n0 , Qv , R , T = symbols ( 'n0 Qv R T' ) expr = n0 * exp ( - Qv / ( R * T )) Multiple SymPy subs() methods can be chained together to substitute multiple variables in one line of code. expr . subs ( n0 , 3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R , 8.31 ) . subs ( T , 1000 + 273 ) 1.04759678564474e-6 To evaluate an expression as a floating-point number, use SymPy's .evalf() method. expr2 = expr . subs ( n0 , 3.48e-6 ) . subs ( Qv , 12700 ) . subs ( R , 8.31 ) . subs ( T , 1000 + 273 ) expr2 . evalf () 1.04759678564474e-6 You can control the number of digits the .evalf() method outputs by passing a number as an argument. Let's represent our final answer as four digits: expr2 . evalf ( 4 ) 1.048e-6","title":"Worked Example"},{"location":"10-Symbolic-Math/10-04-Expressions-and-Substitutions/#summary","text":"The SymPy functions and methods used in this section are summarized in the table below. SymPy function Description Example symbols() create symbolic math variables x, y = symbols('x y') .subs() substitute a value into an expression expr.subs(x,2) .evalf() evaluate an expression as a float expr.evalf(4)","title":"Summary"},{"location":"10-Symbolic-Math/10-05-Equations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Equations You can define equations in Python using SymPy and symbolic math variables. Equations in SymPy are different than expressions . An expression does not have equality. An expression is a collection of symbols and operators, but expressions are not equal to anything. Equations have equality. An equation can be thought of as an expression equal to something else. A code section that defines the equation \\(4x + 2 = 0\\) is below. Note two arguments are passed to the Eq class. The left-hand side of the equation \\(4x + 2\\) is the first argument and the right-hand side of the equation \\(0\\) is the second argument. from sympy import symbols , Eq x = symbols ( 'x' ) eq1 = Eq ( 4 * x + 2 , 0 ) SymPy equations can contain multiple variables. If you want to define the equation \\(2y - x = 5\\) , you just have to create the symbolic math variables \\(y\\) and \\(x\\) first. x , y = symbols ( 'x y' ) eq2 = Eq ( 2 * y - x , 5 ) Substitutions in Equations Symbols and expressions can be substituted into equations. In the code section below, the variable \\(z\\) is substituted in for the variable \\(x\\) ( \\(z\\) replaces \\(x\\) ). x , y , z = symbols ( 'x y z' ) eq2 = Eq ( 2 * y - x , 5 ) eq3 = eq2 . subs ( x , z ) print ( eq3 ) Eq(2*y - z, 5)","title":"10.6 Equations"},{"location":"10-Symbolic-Math/10-05-Equations/#equations","text":"You can define equations in Python using SymPy and symbolic math variables. Equations in SymPy are different than expressions . An expression does not have equality. An expression is a collection of symbols and operators, but expressions are not equal to anything. Equations have equality. An equation can be thought of as an expression equal to something else. A code section that defines the equation \\(4x + 2 = 0\\) is below. Note two arguments are passed to the Eq class. The left-hand side of the equation \\(4x + 2\\) is the first argument and the right-hand side of the equation \\(0\\) is the second argument. from sympy import symbols , Eq x = symbols ( 'x' ) eq1 = Eq ( 4 * x + 2 , 0 ) SymPy equations can contain multiple variables. If you want to define the equation \\(2y - x = 5\\) , you just have to create the symbolic math variables \\(y\\) and \\(x\\) first. x , y = symbols ( 'x y' ) eq2 = Eq ( 2 * y - x , 5 )","title":"Equations"},{"location":"10-Symbolic-Math/10-05-Equations/#substitutions-in-equations","text":"Symbols and expressions can be substituted into equations. In the code section below, the variable \\(z\\) is substituted in for the variable \\(x\\) ( \\(z\\) replaces \\(x\\) ). x , y , z = symbols ( 'x y z' ) eq2 = Eq ( 2 * y - x , 5 ) eq3 = eq2 . subs ( x , z ) print ( eq3 ) Eq(2*y - z, 5)","title":"Substitutions in Equations"},{"location":"10-Symbolic-Math/10-06-Solving-Equations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Solving Equations SymPy's solve() function can be used to solve equations and expressions that contain symbolic math variables. Equations with one solution An equation that contains one variable like \\(x-4-2 = 0\\) can be solved using the SymPy's solve() function. When only one value is part of the solution, the solution is in the form of a list. The code section below demonstrates SymPy's solve() function when an expression is defined with symbolic math variables. from sympy import symbols , solve x = symbols ( 'x' ) expr = x - 4 - 2 sol = solve ( expr ) sol [6] To pull the answer out of the solution list sol , use regular list indexing. num = sol [ 0 ] num $\\displaystyle 6$ The code section below demonstrates SymPy's solve() function when an equation is defined with symbolic math variables. from sympy import symbols , Eq , solve y = symbols ( 'y' ) eq1 = Eq ( y + 3 + 8 , 0 ) sol = solve ( eq1 ) sol [-11] Equations with two solutions Quadratic equations, like \\(x^2 - 5x + 6 = 0\\) , have two solutions. SymPy's solve() function can be used to solve equations like this with two solutions. When an equation has two solutions, SymPy's solve() function outputs a list. The elements in the list are the two solutions. The code section below shows how an equation with two solutions is solved with SymPy's solve() function. from sympy import symbols , Eq , solve y = symbols ( 'x' ) eq1 = Eq ( x ** 2 - 5 * x + 6 , 0 ) sol = solve ( eq1 ) sol [2, 3] If you specify the keyword argument dict=True to SymPy's solve() function, the output is still a list, but inside the list is a dictionary that shows which variable was solved for. from sympy import symbols , Eq , solve y = symbols ( 'x' ) eq1 = Eq ( x ** 2 - 5 * x + 6 , 0 ) sol = solve ( eq1 , dict = True ) sol [{x: 2}, {x: 3}] sol [ 0 ] {x: 2} sol [ 1 ] {x: 3}","title":"10.7 Solving Equations"},{"location":"10-Symbolic-Math/10-06-Solving-Equations/#solving-equations","text":"SymPy's solve() function can be used to solve equations and expressions that contain symbolic math variables.","title":"Solving Equations"},{"location":"10-Symbolic-Math/10-06-Solving-Equations/#equations-with-one-solution","text":"An equation that contains one variable like \\(x-4-2 = 0\\) can be solved using the SymPy's solve() function. When only one value is part of the solution, the solution is in the form of a list. The code section below demonstrates SymPy's solve() function when an expression is defined with symbolic math variables. from sympy import symbols , solve x = symbols ( 'x' ) expr = x - 4 - 2 sol = solve ( expr ) sol [6] To pull the answer out of the solution list sol , use regular list indexing. num = sol [ 0 ] num $\\displaystyle 6$ The code section below demonstrates SymPy's solve() function when an equation is defined with symbolic math variables. from sympy import symbols , Eq , solve y = symbols ( 'y' ) eq1 = Eq ( y + 3 + 8 , 0 ) sol = solve ( eq1 ) sol [-11]","title":"Equations with one solution"},{"location":"10-Symbolic-Math/10-06-Solving-Equations/#equations-with-two-solutions","text":"Quadratic equations, like \\(x^2 - 5x + 6 = 0\\) , have two solutions. SymPy's solve() function can be used to solve equations like this with two solutions. When an equation has two solutions, SymPy's solve() function outputs a list. The elements in the list are the two solutions. The code section below shows how an equation with two solutions is solved with SymPy's solve() function. from sympy import symbols , Eq , solve y = symbols ( 'x' ) eq1 = Eq ( x ** 2 - 5 * x + 6 , 0 ) sol = solve ( eq1 ) sol [2, 3] If you specify the keyword argument dict=True to SymPy's solve() function, the output is still a list, but inside the list is a dictionary that shows which variable was solved for. from sympy import symbols , Eq , solve y = symbols ( 'x' ) eq1 = Eq ( x ** 2 - 5 * x + 6 , 0 ) sol = solve ( eq1 , dict = True ) sol [{x: 2}, {x: 3}] sol [ 0 ] {x: 2} sol [ 1 ] {x: 3}","title":"Equations with two solutions"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Solving Two Equations for Two Unknows Solving two equations for two unknowns can be accomplished using SymPy. Consider the following set of two equations with two variables: \\[ x + y - 5 = 0 \\] \\[ x - y + 3 = 0 \\] To solve this system of two equations for the two unknowns, \\(x\\) and \\(y\\) , first import the SymPy package. From the SymPy package, the functions symbols , Eq and solve are needed. from sympy import symbols , Eq , solve Next, create two SymPy symbols objects, \\(x\\) , and \\(y\\) . As shown in a previous section, the string passed as an input argument to the symbols() function, 'x y' , does not contain any commas. The outputs of the symbols() function are the two symbol objects x and y . These outputs must be separated by a comma and are not surrounded by quotes. x , y = symbols ( 'x y' ) Now define the two equations as SymPy equation objects. Remember to supply the right-hand side and left-hand side of the equation as two separate arguments to the Eq class. eq1 = Eq ( x + y - 5 , 0 ) eq2 = Eq ( x - y + 3 , 0 ) We can use SymPy's solve() function to compute the value of \\(x\\) and \\(y\\) . The first argument passed to the solve() function is a tuple of the two equations (eq1, eq2) . The second argument passed to the solve() function is a tuple of the variables we want to solve for (x, y) . solve (( eq1 , eq2 ), ( x , y )) {x: 1, y: 4} The solution is in the form of a Python dictionary. The dictionary keys are the variables and the dictionary values are the numerical solutions. We can access the solution out of the solution dictionary using regular dictionary indexing. sol_dict = solve (( eq1 , eq2 ), ( x , y )) print ( f 'x = { sol_dict [ x ] } ' ) print ( f 'y = { sol_dict [ y ] } ' ) x = 1 y = 4 Solve an engineering statics problem with SymPy Consider the following engineering statics problem. This problem can be solved with symbolic math and SymPy. GIVEN: A weight of 22 lbs is hung from a ring. The ring is supported by two cords. The first cord, cord CE, is 30 degrees above the horizontal and to the right. The second cord, cord BD, is 45 degrees to the left and above the horizontal. \\(w\\) = 22 lb \\(T_{CE}\\) @ +30 degrees CCW relative to +x-axis \\(T_{BD}\\) @ +45 degress CW relative to -x-axis FIND: The magnitude of \\(T_{CE}\\) and \\(T_{BD}\\) SOLUTION: To solve for the magnitude of \\(T_{CE}\\) and \\(T_{BD}\\) , we need to solve two equations for two unknowns. To accomplish this with Python, first import NumPy and SymPy. The SymPy functions symbols , Eq , and solve are needed. We will also use NumPy's trig functions to solve this problem. import numpy as np from sympy import symbols , Eq , solve Next, define the symbolic math variables. Multiple symbolic math variables can be defined at the same time. Remember the argument names (on the right-hand side of the assignment operator = ) need to be enclosed in quotes ' ' and separated by spaces, no commas. The object names (on the left-hand side of the assignment operator = ) are separated with commas, no quotes. Tce , Tbd = symbols ( 'Tce Tbd' ) Two equations based on the sum of the forces need to be defined. Assuming the ring is in static equilibrium: \\[ \\Sigma \\vec{F} = 0 \\] \\[ \\Sigma F_{x} = 0 \\] \\[ \\Sigma F_{y} = 0 \\] The three forces opperating on the ring are defined as: \\[ {T_{ce}} = tension \\ in \\ cable \\ CE \\ \\] \\[ \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j} \\] \\[ {T_{bd}} = tension \\ in \\ cable \\ BD \\] \\[ \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j} \\] \\[ \\vec{w} = 0 \\hat{i} - 22 \\hat{j} \\] Taking \\(\\Sigma F_{x} = 0\\) (sum of the \\(\\hat{i}\\) terms): \\[ T_{ce} cos(30) - T_{bd} cos(45) + 0 = 0 \\] Taking \\(\\Sigma F_{y} = 0\\) (sum of the \\(\\hat{j}\\) terms): \\[ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \\] The first equation, based on the sum of the forces in the x-direction (the \\(\\hat{i}\\) terms) is: \\[ T_{ce} cos(30) - T_{bd} cos(45) + 0 = 0 \\] This equation can be represented as a SymPy equation object. Note the right-hand side of the equation is 0 . SymPy equation objects are instantiated with expressions equal to zero. If the expression was not equal to zero, simply subtract both sides by the term on the right-hand side of the equals sign and use the resulting expression (equal to zero) to create the SymPy equation object. A detail in the code section below is that NumPy's np.cos() function accepts an angle in radians. Therefore, we need to convert our angles from degrees to radians using NumPy's np.radians() function. eq1 = Eq ( Tce * np . cos ( np . radians ( 30 )) - Tbd * np . cos ( np . radians ( 45 )), 0 ) print ( eq1 ) Eq(-0.707106781186548*Tbd + 0.866025403784439*Tce, 0) The second equation, based on the sum of the forces in the y-direction is: \\[ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \\] We can define this equation as a SymPy equation object as well: eq2 = Eq ( Tce * np . sin ( np . radians ( 30 )) + Tbd * np . sin ( np . radians ( 45 )) - 22 , 0 ) print ( eq2 ) Eq(0.707106781186548*Tbd + 0.5*Tce - 22, 0) Next, solve the two equations eq1 and eq2 for the two unknows \\(T_{ce}\\) and \\(T_{bd}\\) with SymPy's solve() function. The first argument passed to the solve() function is a tuple of equations to solve, the second argument passed to the solve() function is a tuple of the variables to solve for. solve (( eq1 , eq2 ),( Tce , Tbd )) {Tce: 16.1051177665153, Tbd: 19.7246603876972} The solution is saved in a Python dictionary. The dictionary keys are the variable names Tbd and Tce and the dictionary values are the numerical solutions. The numerical solutions can be pulled out of the dictionary using regular Python dictionary access. Note Tce and Tbd are SymPy symbols objects, not strings. sol_dict = solve (( eq1 , eq2 ),( Tce , Tbd )) print ( f 'Tce = { sol_dict [ Tce ] } ' ) print ( f 'Tce = { sol_dict [ Tbd ] } ' ) Tce = 16.1051177665153 Tce = 19.7246603876972 The same problem can be solved again, but with \\(w\\) kept as a variable. w , Tce , Tbd = symbols ( 'w, Tab, Tac' ) eq1 = Eq ( Tce * np . cos ( np . radians ( 30 )) - Tbd * np . cos ( np . radians ( 45 )), 0 ) eq2 = Eq ( Tce * np . sin ( np . radians ( 30 )) + Tbd * np . sin ( np . radians ( 45 )) - w , 0 ) solve (( eq1 , eq2 ),( Tce , Tbd )) {Tab: 0.732050807568877*w, Tac: 0.896575472168053*w} The result is a solution is in terms of the variable \\(w\\) .","title":"10.8 Solving Two Equations for Two Unknows"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/#solving-two-equations-for-two-unknows","text":"Solving two equations for two unknowns can be accomplished using SymPy. Consider the following set of two equations with two variables: \\[ x + y - 5 = 0 \\] \\[ x - y + 3 = 0 \\] To solve this system of two equations for the two unknowns, \\(x\\) and \\(y\\) , first import the SymPy package. From the SymPy package, the functions symbols , Eq and solve are needed. from sympy import symbols , Eq , solve Next, create two SymPy symbols objects, \\(x\\) , and \\(y\\) . As shown in a previous section, the string passed as an input argument to the symbols() function, 'x y' , does not contain any commas. The outputs of the symbols() function are the two symbol objects x and y . These outputs must be separated by a comma and are not surrounded by quotes. x , y = symbols ( 'x y' ) Now define the two equations as SymPy equation objects. Remember to supply the right-hand side and left-hand side of the equation as two separate arguments to the Eq class. eq1 = Eq ( x + y - 5 , 0 ) eq2 = Eq ( x - y + 3 , 0 ) We can use SymPy's solve() function to compute the value of \\(x\\) and \\(y\\) . The first argument passed to the solve() function is a tuple of the two equations (eq1, eq2) . The second argument passed to the solve() function is a tuple of the variables we want to solve for (x, y) . solve (( eq1 , eq2 ), ( x , y )) {x: 1, y: 4} The solution is in the form of a Python dictionary. The dictionary keys are the variables and the dictionary values are the numerical solutions. We can access the solution out of the solution dictionary using regular dictionary indexing. sol_dict = solve (( eq1 , eq2 ), ( x , y )) print ( f 'x = { sol_dict [ x ] } ' ) print ( f 'y = { sol_dict [ y ] } ' ) x = 1 y = 4","title":"Solving Two Equations for Two Unknows"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/#solve-an-engineering-statics-problem-with-sympy","text":"Consider the following engineering statics problem. This problem can be solved with symbolic math and SymPy.","title":"Solve an engineering statics problem with SymPy"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/#given","text":"A weight of 22 lbs is hung from a ring. The ring is supported by two cords. The first cord, cord CE, is 30 degrees above the horizontal and to the right. The second cord, cord BD, is 45 degrees to the left and above the horizontal. \\(w\\) = 22 lb \\(T_{CE}\\) @ +30 degrees CCW relative to +x-axis \\(T_{BD}\\) @ +45 degress CW relative to -x-axis","title":"GIVEN:"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/#find","text":"The magnitude of \\(T_{CE}\\) and \\(T_{BD}\\)","title":"FIND:"},{"location":"10-Symbolic-Math/10-07-Solving-Two-Equations-for-Two-Unknowns/#solution","text":"To solve for the magnitude of \\(T_{CE}\\) and \\(T_{BD}\\) , we need to solve two equations for two unknowns. To accomplish this with Python, first import NumPy and SymPy. The SymPy functions symbols , Eq , and solve are needed. We will also use NumPy's trig functions to solve this problem. import numpy as np from sympy import symbols , Eq , solve Next, define the symbolic math variables. Multiple symbolic math variables can be defined at the same time. Remember the argument names (on the right-hand side of the assignment operator = ) need to be enclosed in quotes ' ' and separated by spaces, no commas. The object names (on the left-hand side of the assignment operator = ) are separated with commas, no quotes. Tce , Tbd = symbols ( 'Tce Tbd' ) Two equations based on the sum of the forces need to be defined. Assuming the ring is in static equilibrium: \\[ \\Sigma \\vec{F} = 0 \\] \\[ \\Sigma F_{x} = 0 \\] \\[ \\Sigma F_{y} = 0 \\] The three forces opperating on the ring are defined as: \\[ {T_{ce}} = tension \\ in \\ cable \\ CE \\ \\] \\[ \\vec{T_{ce}} = T_{ce} cos(30)\\hat{i} + T_{ce} sin(30)\\hat{j} \\] \\[ {T_{bd}} = tension \\ in \\ cable \\ BD \\] \\[ \\vec{T_{bd}} = - T_{bd} cos(45)\\hat{i} + T_{bd} sin(45)\\hat{j} \\] \\[ \\vec{w} = 0 \\hat{i} - 22 \\hat{j} \\] Taking \\(\\Sigma F_{x} = 0\\) (sum of the \\(\\hat{i}\\) terms): \\[ T_{ce} cos(30) - T_{bd} cos(45) + 0 = 0 \\] Taking \\(\\Sigma F_{y} = 0\\) (sum of the \\(\\hat{j}\\) terms): \\[ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \\] The first equation, based on the sum of the forces in the x-direction (the \\(\\hat{i}\\) terms) is: \\[ T_{ce} cos(30) - T_{bd} cos(45) + 0 = 0 \\] This equation can be represented as a SymPy equation object. Note the right-hand side of the equation is 0 . SymPy equation objects are instantiated with expressions equal to zero. If the expression was not equal to zero, simply subtract both sides by the term on the right-hand side of the equals sign and use the resulting expression (equal to zero) to create the SymPy equation object. A detail in the code section below is that NumPy's np.cos() function accepts an angle in radians. Therefore, we need to convert our angles from degrees to radians using NumPy's np.radians() function. eq1 = Eq ( Tce * np . cos ( np . radians ( 30 )) - Tbd * np . cos ( np . radians ( 45 )), 0 ) print ( eq1 ) Eq(-0.707106781186548*Tbd + 0.866025403784439*Tce, 0) The second equation, based on the sum of the forces in the y-direction is: \\[ T_{ce} sin(30) + T_{bd} sin(45) - 22 = 0 \\] We can define this equation as a SymPy equation object as well: eq2 = Eq ( Tce * np . sin ( np . radians ( 30 )) + Tbd * np . sin ( np . radians ( 45 )) - 22 , 0 ) print ( eq2 ) Eq(0.707106781186548*Tbd + 0.5*Tce - 22, 0) Next, solve the two equations eq1 and eq2 for the two unknows \\(T_{ce}\\) and \\(T_{bd}\\) with SymPy's solve() function. The first argument passed to the solve() function is a tuple of equations to solve, the second argument passed to the solve() function is a tuple of the variables to solve for. solve (( eq1 , eq2 ),( Tce , Tbd )) {Tce: 16.1051177665153, Tbd: 19.7246603876972} The solution is saved in a Python dictionary. The dictionary keys are the variable names Tbd and Tce and the dictionary values are the numerical solutions. The numerical solutions can be pulled out of the dictionary using regular Python dictionary access. Note Tce and Tbd are SymPy symbols objects, not strings. sol_dict = solve (( eq1 , eq2 ),( Tce , Tbd )) print ( f 'Tce = { sol_dict [ Tce ] } ' ) print ( f 'Tce = { sol_dict [ Tbd ] } ' ) Tce = 16.1051177665153 Tce = 19.7246603876972 The same problem can be solved again, but with \\(w\\) kept as a variable. w , Tce , Tbd = symbols ( 'w, Tab, Tac' ) eq1 = Eq ( Tce * np . cos ( np . radians ( 30 )) - Tbd * np . cos ( np . radians ( 45 )), 0 ) eq2 = Eq ( Tce * np . sin ( np . radians ( 30 )) + Tbd * np . sin ( np . radians ( 45 )) - w , 0 ) solve (( eq1 , eq2 ),( Tce , Tbd )) {Tab: 0.732050807568877*w, Tac: 0.896575472168053*w} The result is a solution is in terms of the variable \\(w\\) .","title":"SOLUTION:"},{"location":"10-Symbolic-Math/10-08-Summary/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Summary In this chapter, you learned about symbolic math and how to complete symbolic math calculations using Python and SymPy. Symbolic math treats variables as mathematical symbols rather than defining variables as numbers. At the start of the chapter, you learned how to create symbolic math variables with SymPy's symbols() function. Symbolic math variables can be combined into symbolic math expressions and symbolic math equations. You learned how to substitute variables and numbers into symbolic math expressions and equations. At the end of the chapter, you learned how to solve linear and quadratic equations with SymPy. The final example in the chapter was a multi-variable engineering statics problem where two equations were solved for two unknowns. Key Terms and Concepts symbolic math symbolic variable object numerical calculation system of equations expression equation substitution evaluate linear equation quadratic equation SymPy Functions and Methods The SymPy functions and methods used in this chapter are summarized in the table below. SymPy Function Description Example symbols() Define a symbolic math variable x, y = symbols('x y') .subs() Substitute a variable or value expr.subs(x, 2) .evalf() evaluate an expression as a float expr.evalf() Eq() Define a SymPy equation eq1 = Eq(4*x + 2) solve() Solve a SymPy expression or equation solve((eq1,eq2), (x, y))","title":"10.9 Summary"},{"location":"10-Symbolic-Math/10-08-Summary/#summary","text":"In this chapter, you learned about symbolic math and how to complete symbolic math calculations using Python and SymPy. Symbolic math treats variables as mathematical symbols rather than defining variables as numbers. At the start of the chapter, you learned how to create symbolic math variables with SymPy's symbols() function. Symbolic math variables can be combined into symbolic math expressions and symbolic math equations. You learned how to substitute variables and numbers into symbolic math expressions and equations. At the end of the chapter, you learned how to solve linear and quadratic equations with SymPy. The final example in the chapter was a multi-variable engineering statics problem where two equations were solved for two unknowns.","title":"Summary"},{"location":"10-Symbolic-Math/10-08-Summary/#key-terms-and-concepts","text":"symbolic math symbolic variable object numerical calculation system of equations expression equation substitution evaluate linear equation quadratic equation","title":"Key Terms and Concepts"},{"location":"10-Symbolic-Math/10-08-Summary/#sympy-functions-and-methods","text":"The SymPy functions and methods used in this chapter are summarized in the table below. SymPy Function Description Example symbols() Define a symbolic math variable x, y = symbols('x y') .subs() Substitute a variable or value expr.subs(x, 2) .evalf() evaluate an expression as a float expr.evalf() Eq() Define a SymPy equation eq1 = Eq(4*x + 2) solve() Solve a SymPy expression or equation solve((eq1,eq2), (x, y))","title":"SymPy Functions and Methods"},{"location":"10-Symbolic-Math/10-09-Review-Questions/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Review Questions Creating Expressions and Equations Q10.01 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) and \\(x\\) . Use these variables to define the symbolic math expressions: \\[ ax^2 + bx + c \\] \\[ sin(ax) + cos(bx) + tan(cx) \\] Q10.02 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) and \\(x\\) . Use these variables to define the symbolic math equations: \\[ ax^2 + bx = c \\] \\[ \\frac{sin(ax)}{cos(bx)} = tan(cx) \\] Q10.03 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) , \\(x\\) , and \\(y\\) . Use these variables to define the symbolic math expression: \\[ ax^2 + bx + c \\] Substitute in the variable \\(y\\) in for the variable \\(c\\) . Substitute in the value 5 in for the variable \\(y\\) . Q10.04 Create the symbolic math variables \\(E\\) , \\(A\\) , \\(d\\) , \\(P\\) , \\(L\\) , and \\(F\\) . Use these variables to define the symbolic math equation: \\[ d = \\frac{PL}{AE} \\] Substitute in the value \\(29 \\times 10^6\\) for \\(E\\) . Substitute in the expression \\(F/2\\) for the variable \\(P\\) . Q10.05 Create the symbolic math variables \\(t\\) , \\(T\\) , \\(c\\) , and \\(J\\) . Use these variables to define the symbolic math equation: \\[ t = \\frac{Tc}{J} \\] Substitute \\(J = \\frac{\\pi}{2}c^4\\) into the equation. Substitute \\(T=9.0\\) and \\(c=4.5\\) into the equation. Print out the resulting value of \\(t\\) . Q10.06 Mohr's circle is used in mechanical engineering to calculate the shear and normal stress. Given the height of Mohr's circle \\(\\tau_{max}\\) is equal to the expression below: \\[ \\tau_{max} = \\sqrt{(\\sigma_x - \\sigma_y)/2)^2 + \\tau_{xy}} \\] Use SymPy expressions or equations to calculate \\(\\tau\\) if \\(\\sigma_x = 90\\) , \\(\\sigma_y = 60\\) and \\(\\tau_{xy} = 20\\) Solving Equations Q10.20 Use SymPy to solve for \\(x\\) if \\(x - 4 = 2\\) Q10.21 Use SymPy to solve for the roots of the quadratic equation \\(2x^2 - 4x + 1.5 = 0\\) Q10.22 Create the symbolic math variable \\(b\\) and define the equation below: \\[ \\frac{1}{\\sqrt{2}}(b - 6) = -1 \\] Find the numeric value of \\(b\\) to three decimal places Q10.30 Use SymPy to solve the system of linear equations below for the variables \\(x\\) and \\(y\\) : \\[ -3x - 2y + 7 = 0 \\] \\[ 5x - 3y - 6 = 0 \\] Q10.31 Use SymPy to solve the system of linear equations below for the variables \\(x\\) , \\(y\\) , and \\(z\\) : \\[ 2x + 4y - z = -0.6 \\] \\[ -x - 3y + 2z = 2.2 \\] \\[ \\frac{1}{2}x + 6y - 3z = -6.8 \\] Q10.32 A set of five linear equations is below: \\[ -5x_1 - 4x_2 - 2x_3 + 2x_4 + 3x_5 = 10 \\] \\[ 9x_1 + 3x_2 + 4x_3 + 10x_4 + 5x_5 = -5 \\] \\[ 2x_1 + 4x_2 + 3x_3 + 2x_4 + x_5 = 12 \\] \\[ 5x_1 - 4x_2 + 3x_3 - 2x_4 + 2x_5 = 32 \\] \\[ x_1 - x_2 + 2x_3 + 4x_4 + 3x_5 = 42 \\] Use symbolic math variables and equations to solve for \\(x_1\\) , \\(x_2\\) , \\(x_3\\) , \\(x_4\\) and \\(x_5\\) . Q10.33 An equation in terms of the variables \\(L\\) and \\(x\\) is defined below. \\[ \\frac{1}{6}L^3x^2 - \\frac{1}{6}Lx^3 + \\frac{1}{24}x^4 - \\frac{1}{45}L^4 = 0 \\] Solve the equation for \\(x\\) in terms of the variable \\(L\\) . Note their will be more than one solution. Q10.50 Use SymPy to solve the system of non-linear equations below for the variables \\(x\\) and \\(y\\) : \\[ 3x^2 + 2y^3 = -\\frac{17}{4} \\] \\[ \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0 \\]","title":"10.10 Review Questions"},{"location":"10-Symbolic-Math/10-09-Review-Questions/#review-questions","text":"","title":"Review Questions"},{"location":"10-Symbolic-Math/10-09-Review-Questions/#creating-expressions-and-equations","text":"Q10.01 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) and \\(x\\) . Use these variables to define the symbolic math expressions: \\[ ax^2 + bx + c \\] \\[ sin(ax) + cos(bx) + tan(cx) \\] Q10.02 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) and \\(x\\) . Use these variables to define the symbolic math equations: \\[ ax^2 + bx = c \\] \\[ \\frac{sin(ax)}{cos(bx)} = tan(cx) \\] Q10.03 Create the symbolic math variables \\(a\\) , \\(b\\) , \\(c\\) , \\(x\\) , and \\(y\\) . Use these variables to define the symbolic math expression: \\[ ax^2 + bx + c \\] Substitute in the variable \\(y\\) in for the variable \\(c\\) . Substitute in the value 5 in for the variable \\(y\\) . Q10.04 Create the symbolic math variables \\(E\\) , \\(A\\) , \\(d\\) , \\(P\\) , \\(L\\) , and \\(F\\) . Use these variables to define the symbolic math equation: \\[ d = \\frac{PL}{AE} \\] Substitute in the value \\(29 \\times 10^6\\) for \\(E\\) . Substitute in the expression \\(F/2\\) for the variable \\(P\\) . Q10.05 Create the symbolic math variables \\(t\\) , \\(T\\) , \\(c\\) , and \\(J\\) . Use these variables to define the symbolic math equation: \\[ t = \\frac{Tc}{J} \\] Substitute \\(J = \\frac{\\pi}{2}c^4\\) into the equation. Substitute \\(T=9.0\\) and \\(c=4.5\\) into the equation. Print out the resulting value of \\(t\\) . Q10.06 Mohr's circle is used in mechanical engineering to calculate the shear and normal stress. Given the height of Mohr's circle \\(\\tau_{max}\\) is equal to the expression below: \\[ \\tau_{max} = \\sqrt{(\\sigma_x - \\sigma_y)/2)^2 + \\tau_{xy}} \\] Use SymPy expressions or equations to calculate \\(\\tau\\) if \\(\\sigma_x = 90\\) , \\(\\sigma_y = 60\\) and \\(\\tau_{xy} = 20\\)","title":"Creating Expressions and Equations"},{"location":"10-Symbolic-Math/10-09-Review-Questions/#solving-equations","text":"Q10.20 Use SymPy to solve for \\(x\\) if \\(x - 4 = 2\\) Q10.21 Use SymPy to solve for the roots of the quadratic equation \\(2x^2 - 4x + 1.5 = 0\\) Q10.22 Create the symbolic math variable \\(b\\) and define the equation below: \\[ \\frac{1}{\\sqrt{2}}(b - 6) = -1 \\] Find the numeric value of \\(b\\) to three decimal places Q10.30 Use SymPy to solve the system of linear equations below for the variables \\(x\\) and \\(y\\) : \\[ -3x - 2y + 7 = 0 \\] \\[ 5x - 3y - 6 = 0 \\] Q10.31 Use SymPy to solve the system of linear equations below for the variables \\(x\\) , \\(y\\) , and \\(z\\) : \\[ 2x + 4y - z = -0.6 \\] \\[ -x - 3y + 2z = 2.2 \\] \\[ \\frac{1}{2}x + 6y - 3z = -6.8 \\] Q10.32 A set of five linear equations is below: \\[ -5x_1 - 4x_2 - 2x_3 + 2x_4 + 3x_5 = 10 \\] \\[ 9x_1 + 3x_2 + 4x_3 + 10x_4 + 5x_5 = -5 \\] \\[ 2x_1 + 4x_2 + 3x_3 + 2x_4 + x_5 = 12 \\] \\[ 5x_1 - 4x_2 + 3x_3 - 2x_4 + 2x_5 = 32 \\] \\[ x_1 - x_2 + 2x_3 + 4x_4 + 3x_5 = 42 \\] Use symbolic math variables and equations to solve for \\(x_1\\) , \\(x_2\\) , \\(x_3\\) , \\(x_4\\) and \\(x_5\\) . Q10.33 An equation in terms of the variables \\(L\\) and \\(x\\) is defined below. \\[ \\frac{1}{6}L^3x^2 - \\frac{1}{6}Lx^3 + \\frac{1}{24}x^4 - \\frac{1}{45}L^4 = 0 \\] Solve the equation for \\(x\\) in terms of the variable \\(L\\) . Note their will be more than one solution. Q10.50 Use SymPy to solve the system of non-linear equations below for the variables \\(x\\) and \\(y\\) : \\[ 3x^2 + 2y^3 = -\\frac{17}{4} \\] \\[ \\frac{-x^3}{2} - 8y^2 + \\frac{127}{2} = 0 \\]","title":"Solving Equations"}]}